[
  {
    "functions": [
      {
        "type": "function",
        "file": "attr.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": null,
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": null,
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "values",
            "type": "const char *",
            "comment": null,
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "attr",
        "cFunctionName": "git_attr_add_macro",
        "cppFunctionName": "AddMacro",
        "jsFunctionName": "addMacro",
        "cppClassName": "GitAttr"
      },
      {
        "type": "function",
        "file": "attr.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": null,
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "attr",
        "cFunctionName": "git_attr_cache_flush",
        "cppFunctionName": "CacheFlush",
        "jsFunctionName": "cacheFlush",
        "cppClassName": "GitAttr"
      },
      {
        "type": "function",
        "file": "attr.h",
        "args": [
          {
            "name": "value_out",
            "type": "const char **",
            "comment": "Output of the value of the attribute.  Use the GIT_ATTR_...\n             macros to test for TRUE, FALSE, UNSPECIFIED, etc. or just\n             use the string value for attributes set to a value.  You\n             should NOT modify or free this value.",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository containing the path.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "type": "uint32_t",
            "comment": "A combination of GIT_ATTR_CHECK... flags.",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "The path to check for attributes.  Relative paths are\n             interpreted relative to the repo root.  The file does\n             not have to exist, but if it does not, then it will be\n             treated as a plain file (not a directory).",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "The name of the attribute to look up.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "attr",
        "cFunctionName": "git_attr_get",
        "cppFunctionName": "Get",
        "jsFunctionName": "get",
        "isAsync": true,
        "cppClassName": "GitAttr"
      },
      {
        "type": "function",
        "file": "attr.h",
        "args": [
          {
            "name": "values_out",
            "type": "const char **",
            "comment": "An array of num_attr entries that will have string\n             pointers written into it for the values of the attributes.\n             You should not modify or free the values that are written\n             into this array (although of course, you should free the\n             array itself if you allocated it).",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository containing the path.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "type": "uint32_t",
            "comment": "A combination of GIT_ATTR_CHECK... flags.",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "The path inside the repo to check attributes.  This\n             does not have to exist, but if it does not, then\n             it will be treated as a plain file (i.e. not a directory).",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "num_attr",
            "type": "size_t",
            "comment": "The number of attributes being looked up",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "names",
            "type": "const char **",
            "comment": "An array of num_attr strings containing attribute names.",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "attr",
        "cFunctionName": "git_attr_get_many",
        "cppFunctionName": "GetMany",
        "jsFunctionName": "getMany",
        "cppClassName": "GitAttr"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "attr",
    "cppClassName": "GitAttr",
    "jsClassName": "Attr",
    "filename": "attr",
    "isLibgitType": true,
    "dependencies": [
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "attr"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "blame.h",
        "args": [
          {
            "name": "out",
            "type": "git_blame **",
            "comment": "pointer that will receive the resulting blame data",
            "cType": "git_blame **",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "reference",
            "type": "git_blame *",
            "comment": "cached blame from the history of the file (usually the output\n                  from git_blame_file)",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "buffer",
            "type": "const char *",
            "comment": "the (possibly) modified contents of the file",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer_len",
            "type": "size_t",
            "comment": "number of valid bytes in the buffer",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or an error code. (use giterr_last for information\n         about the error)",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blame",
        "cFunctionName": "git_blame_buffer",
        "cppFunctionName": "Buffer",
        "jsFunctionName": "buffer",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitBlame"
      },
      {
        "type": "function",
        "file": "blame.h",
        "args": [
          {
            "name": "out",
            "type": "git_blame **",
            "comment": "pointer that will receive the blame object",
            "cType": "git_blame **",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository whose history is to be walked",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "path to file to consider",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "options",
            "type": "git_blame_options *",
            "comment": "options for the blame operation.  If NULL, this is treated as\n                though GIT_BLAME_OPTIONS_INIT were passed.",
            "cType": "git_blame_options *",
            "cppClassName": "GitBlameOptions",
            "jsClassName": "BlameOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or an error code. (use giterr_last for information\n         about the error.)",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blame",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_blame_file-2"
          ]
        },
        "cFunctionName": "git_blame_file",
        "cppFunctionName": "File",
        "jsFunctionName": "file",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitBlame"
      },
      {
        "type": "function",
        "file": "blame.h",
        "args": [
          {
            "name": "blame",
            "type": "git_blame *",
            "comment": "the blame structure to query",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "index",
            "type": "uint32_t",
            "comment": "index of the hunk to retrieve",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_blame_hunk *",
          "comment": " the hunk at the given index, or NULL on error",
          "cType": "const git_blame_hunk *",
          "cppClassName": "GitBlameHunk",
          "jsClassName": "BlameHunk",
          "isLibgitType": true,
          "isEnum": false,
          "fields": {
            "boundary": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "blame",
        "cFunctionName": "git_blame_get_hunk_byindex",
        "cppFunctionName": "GetHunkByindex",
        "jsFunctionName": "getHunkByindex",
        "isPrototypeMethod": true,
        "cppClassName": "GitBlame"
      },
      {
        "type": "function",
        "file": "blame.h",
        "args": [
          {
            "name": "blame",
            "type": "git_blame *",
            "comment": "the blame structure to query",
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "lineno",
            "type": "uint32_t",
            "comment": "the (1-based) line number to find a hunk for",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_blame_hunk *",
          "comment": " the hunk that contains the given line, or NULL on error",
          "cType": "const git_blame_hunk *",
          "cppClassName": "GitBlameHunk",
          "jsClassName": "BlameHunk",
          "isLibgitType": true,
          "isEnum": false,
          "fields": {
            "boundary": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "blame",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_blame_get_hunk_byline-1"
          ]
        },
        "cFunctionName": "git_blame_get_hunk_byline",
        "cppFunctionName": "GetHunkByline",
        "jsFunctionName": "getHunkByline",
        "isPrototypeMethod": true,
        "cppClassName": "GitBlame"
      },
      {
        "type": "function",
        "file": "blame.h",
        "args": [
          {
            "name": "blame",
            "type": "git_blame *",
            "comment": null,
            "cType": "git_blame *",
            "cppClassName": "GitBlame",
            "jsClassName": "Blame",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "uint32_t",
          "comment": null,
          "cType": "uint32_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blame",
        "cFunctionName": "git_blame_get_hunk_count",
        "cppFunctionName": "GetHunkCount",
        "jsFunctionName": "getHunkCount",
        "isPrototypeMethod": true,
        "cppClassName": "GitBlame"
      },
      {
        "type": "function",
        "file": "blame.h",
        "args": [
          {
            "name": "opts",
            "type": "git_blame_options *",
            "comment": "The `git_blame_options` struct to initialize",
            "cType": "git_blame_options *",
            "cppClassName": "GitBlameOptions",
            "jsClassName": "BlameOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "Version of struct; pass `GIT_BLAME_OPTIONS_VERSION`",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blame",
        "cFunctionName": "git_blame_init_options",
        "cppFunctionName": "InitOptions",
        "jsFunctionName": "initOptions",
        "cppClassName": "GitBlame"
      }
    ],
    "type": "class",
    "cType": "git_blame",
    "typeName": "blame",
    "cppClassName": "GitBlame",
    "jsClassName": "Blame",
    "filename": "blame",
    "isLibgitType": true,
    "dependencies": [
      "../include/blame.h",
      "../include/repository.h",
      "../include/blame_options.h",
      "../include/blame_hunk.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "freeFunctionName": "git_blame_free",
    "name": "blame"
  },
  {
    "typeName": "blame_flag",
    "type": "enum",
    "cType": "git_blame_flag_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_BLAME_NORMAL",
        "value": 0,
        "JsName": "NORMAL"
      },
      {
        "name": "GIT_BLAME_TRACK_COPIES_SAME_FILE",
        "value": 1,
        "JsName": "TRACK_COPIES_SAME_FILE"
      },
      {
        "name": "GIT_BLAME_TRACK_COPIES_SAME_COMMIT_MOVES",
        "value": 2,
        "JsName": "TRACK_COPIES_SAME_COMMIT_MOVES"
      },
      {
        "name": "GIT_BLAME_TRACK_COPIES_SAME_COMMIT_COPIES",
        "value": 4,
        "JsName": "TRACK_COPIES_SAME_COMMIT_COPIES"
      },
      {
        "name": "GIT_BLAME_TRACK_COPIES_ANY_COMMIT_COPIES",
        "value": 8,
        "JsName": "TRACK_COPIES_ANY_COMMIT_COPIES"
      },
      {
        "name": "GIT_BLAME_FIRST_PARENT",
        "value": 16,
        "JsName": "FIRST_PARENT"
      }
    ],
    "owner": "Blame",
    "JsName": "FLAG"
  },
  {
    "type": "class",
    "value": "git_blame_hunk",
    "file": "blame.h",
    "fields": [
      {
        "type": "uint16_t",
        "name": "lines_in_hunk",
        "cType": "uint16_t",
        "cppFunctionName": "LinesInHunk",
        "jsFunctionName": "linesInHunk",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_oid",
        "name": "final_commit_id",
        "cType": "git_oid",
        "cppFunctionName": "FinalCommitId",
        "jsFunctionName": "finalCommitId",
        "cppClassName": "GitOid",
        "jsClassName": "Oid",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "shouldAlloc": true,
        "functions": {
          "git_oid_cpy": {
            "ignore": true
          },
          "git_oid_fmt": {
            "ignore": true
          },
          "git_oid_fromraw": {
            "ignore": true
          },
          "git_oid_fromstr": {
            "jsFunctionName": "fromString",
            "isAsync": false
          },
          "git_oid_fromstrn": {
            "ignore": true
          },
          "git_oid_fromstrp": {
            "ignore": true
          },
          "git_oid_nfmt": {
            "ignore": true
          },
          "git_oid_pathfmt": {
            "ignore": true
          },
          "git_oid_shorten_add": {
            "ignore": true
          },
          "git_oid_shorten_free": {
            "ignore": true
          },
          "git_oid_shorten_new": {
            "ignore": true
          },
          "git_oid_tostr": {
            "ignore": true,
            "jsFunctionName": "toString"
          }
        },
        "fields": {
          "id": {
            "ignore": true
          }
        }
      },
      {
        "type": "uint16_t",
        "name": "final_start_line_number",
        "cType": "uint16_t",
        "cppFunctionName": "FinalStartLineNumber",
        "jsFunctionName": "finalStartLineNumber",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_signature *",
        "name": "final_signature",
        "cType": "git_signature *",
        "cppFunctionName": "FinalSignature",
        "jsFunctionName": "finalSignature",
        "cppClassName": "GitSignature",
        "jsClassName": "Signature",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "functions": {
          "git_signature_new": {
            "isAsync": false
          }
        }
      },
      {
        "type": "git_oid",
        "name": "orig_commit_id",
        "cType": "git_oid",
        "cppFunctionName": "OrigCommitId",
        "jsFunctionName": "origCommitId",
        "cppClassName": "GitOid",
        "jsClassName": "Oid",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "shouldAlloc": true,
        "functions": {
          "git_oid_cpy": {
            "ignore": true
          },
          "git_oid_fmt": {
            "ignore": true
          },
          "git_oid_fromraw": {
            "ignore": true
          },
          "git_oid_fromstr": {
            "jsFunctionName": "fromString",
            "isAsync": false
          },
          "git_oid_fromstrn": {
            "ignore": true
          },
          "git_oid_fromstrp": {
            "ignore": true
          },
          "git_oid_nfmt": {
            "ignore": true
          },
          "git_oid_pathfmt": {
            "ignore": true
          },
          "git_oid_shorten_add": {
            "ignore": true
          },
          "git_oid_shorten_free": {
            "ignore": true
          },
          "git_oid_shorten_new": {
            "ignore": true
          },
          "git_oid_tostr": {
            "ignore": true,
            "jsFunctionName": "toString"
          }
        },
        "fields": {
          "id": {
            "ignore": true
          }
        }
      },
      {
        "type": "const char *",
        "name": "orig_path",
        "cType": "const char *",
        "cppFunctionName": "OrigPath",
        "jsFunctionName": "origPath",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "uint16_t",
        "name": "orig_start_line_number",
        "cType": "uint16_t",
        "cppFunctionName": "OrigStartLineNumber",
        "jsFunctionName": "origStartLineNumber",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_signature *",
        "name": "orig_signature",
        "cType": "git_signature *",
        "cppFunctionName": "OrigSignature",
        "jsFunctionName": "origSignature",
        "cppClassName": "GitSignature",
        "jsClassName": "Signature",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "functions": {
          "git_signature_new": {
            "isAsync": false
          }
        }
      }
    ],
    "used": {
      "returns": [
        "git_blame_get_hunk_byindex",
        "git_blame_get_hunk_byline"
      ],
      "needs": []
    },
    "typeName": "blame_hunk",
    "cType": "git_blame_hunk",
    "functions": [],
    "cppClassName": "GitBlameHunk",
    "jsClassName": "BlameHunk",
    "filename": "blame_hunk",
    "isLibgitType": true,
    "dependencies": [
      "../include/oid.h",
      "../include/signature.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "blame_hunk"
  },
  {
    "type": "struct",
    "value": "git_blame_options",
    "file": "blame.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint32_t",
        "name": "flags",
        "cType": "uint32_t",
        "cppFunctionName": "Flags",
        "jsFunctionName": "flags",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint16_t",
        "name": "min_match_characters",
        "cType": "uint16_t",
        "cppFunctionName": "MinMatchCharacters",
        "jsFunctionName": "minMatchCharacters",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_oid",
        "name": "newest_commit",
        "cType": "git_oid",
        "cppFunctionName": "NewestCommit",
        "jsFunctionName": "newestCommit",
        "cppClassName": "GitOid",
        "jsClassName": "Oid",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "shouldAlloc": true,
        "functions": {
          "git_oid_cpy": {
            "ignore": true
          },
          "git_oid_fmt": {
            "ignore": true
          },
          "git_oid_fromraw": {
            "ignore": true
          },
          "git_oid_fromstr": {
            "jsFunctionName": "fromString",
            "isAsync": false
          },
          "git_oid_fromstrn": {
            "ignore": true
          },
          "git_oid_fromstrp": {
            "ignore": true
          },
          "git_oid_nfmt": {
            "ignore": true
          },
          "git_oid_pathfmt": {
            "ignore": true
          },
          "git_oid_shorten_add": {
            "ignore": true
          },
          "git_oid_shorten_free": {
            "ignore": true
          },
          "git_oid_shorten_new": {
            "ignore": true
          },
          "git_oid_tostr": {
            "ignore": true,
            "jsFunctionName": "toString"
          }
        },
        "fields": {
          "id": {
            "ignore": true
          }
        }
      },
      {
        "type": "git_oid",
        "name": "oldest_commit",
        "cType": "git_oid",
        "cppFunctionName": "OldestCommit",
        "jsFunctionName": "oldestCommit",
        "cppClassName": "GitOid",
        "jsClassName": "Oid",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "shouldAlloc": true,
        "functions": {
          "git_oid_cpy": {
            "ignore": true
          },
          "git_oid_fmt": {
            "ignore": true
          },
          "git_oid_fromraw": {
            "ignore": true
          },
          "git_oid_fromstr": {
            "jsFunctionName": "fromString",
            "isAsync": false
          },
          "git_oid_fromstrn": {
            "ignore": true
          },
          "git_oid_fromstrp": {
            "ignore": true
          },
          "git_oid_nfmt": {
            "ignore": true
          },
          "git_oid_pathfmt": {
            "ignore": true
          },
          "git_oid_shorten_add": {
            "ignore": true
          },
          "git_oid_shorten_free": {
            "ignore": true
          },
          "git_oid_shorten_new": {
            "ignore": true
          },
          "git_oid_tostr": {
            "ignore": true,
            "jsFunctionName": "toString"
          }
        },
        "fields": {
          "id": {
            "ignore": true
          }
        }
      },
      {
        "type": "uint32_t",
        "name": "min_line",
        "cType": "uint32_t",
        "cppFunctionName": "MinLine",
        "jsFunctionName": "minLine",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint32_t",
        "name": "max_line",
        "cType": "uint32_t",
        "cppFunctionName": "MaxLine",
        "jsFunctionName": "maxLine",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_blame_file",
        "git_blame_init_options"
      ]
    },
    "typeName": "blame_options",
    "cType": "git_blame_options",
    "functions": [],
    "cppClassName": "GitBlameOptions",
    "jsClassName": "BlameOptions",
    "filename": "blame_options",
    "isLibgitType": true,
    "dependencies": [
      "../include/oid.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "blame_options"
  },
  {
    "type": "class",
    "value": "git_blob",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_blob_filtered_content",
        "git_blob_free",
        "git_blob_id",
        "git_blob_is_binary",
        "git_blob_lookup",
        "git_blob_lookup_prefix",
        "git_blob_owner",
        "git_blob_rawcontent",
        "git_blob_rawsize",
        "git_diff_blob_to_buffer",
        "git_diff_blobs",
        "git_filter_list_apply_to_blob",
        "git_filter_list_load",
        "git_patch_from_blob_and_buffer",
        "git_patch_from_blobs"
      ]
    },
    "typeName": "blob",
    "cType": "git_blob",
    "functions": [
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "id",
            "type": "git_oid *",
            "comment": "return the id of the written blob",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository where to blob will be written",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer",
            "type": "const void *",
            "comment": "data to be written into the blob",
            "cType": "const void *",
            "cppClassName": "Buffer",
            "jsClassName": "Buffer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "type": "size_t",
            "comment": "length of the data",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "cFunctionName": "git_blob_create_frombuffer",
        "cppFunctionName": "CreateFrombuffer",
        "jsFunctionName": "createFrombuffer",
        "cppClassName": "GitBlob"
      },
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "id",
            "type": "git_oid *",
            "comment": "return the id of the written blob",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository where the blob will be written.\n\tthis repository can be bare or not",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "file from which the blob will be created",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "cFunctionName": "git_blob_create_fromdisk",
        "cppFunctionName": "CreateFromdisk",
        "jsFunctionName": "createFromdisk",
        "cppClassName": "GitBlob"
      },
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "id",
            "type": "git_oid *",
            "comment": "return the id of the written blob",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository where the blob will be written.\n\tthis repository cannot be bare",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "relative_path",
            "type": "const char *",
            "comment": "file from which the blob will be created,\n\trelative to the repository's working dir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "cFunctionName": "git_blob_create_fromworkdir",
        "cppFunctionName": "CreateFromworkdir",
        "jsFunctionName": "createFromworkdir",
        "cppClassName": "GitBlob"
      },
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "blob",
            "type": "const git_blob *",
            "comment": "a previously loaded blob.",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " SHA1 hash for this blob.",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "cFunctionName": "git_blob_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "isPrototypeMethod": true,
        "cppClassName": "GitBlob"
      },
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "blob",
            "type": "const git_blob *",
            "comment": "The blob which content should be analyzed",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the content of the blob is detected\n as binary; 0 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "cFunctionName": "git_blob_is_binary",
        "cppFunctionName": "IsBinary",
        "jsFunctionName": "isBinary",
        "isPrototypeMethod": true,
        "cppClassName": "GitBlob"
      },
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "blob",
            "type": "git_blob **",
            "comment": "pointer to the looked up blob",
            "cType": "git_blob **",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repo to use when locating the blob.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "identity of the blob to locate.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_blob_lookup-4"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_blob_lookup-1"
          ]
        },
        "cFunctionName": "git_blob_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitBlob"
      },
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "blob",
            "type": "git_blob **",
            "comment": "pointer to the looked up blob",
            "cType": "git_blob **",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repo to use when locating the blob.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "identity of the blob to locate.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "type": "size_t",
            "comment": "the length of the short identifier",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "cFunctionName": "git_blob_lookup_prefix",
        "cppFunctionName": "LookupPrefix",
        "jsFunctionName": "lookupPrefix",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitBlob"
      },
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "blob",
            "type": "const git_blob *",
            "comment": "A previously loaded blob.",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " Repository that contains this blob.",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "cFunctionName": "git_blob_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "isPrototypeMethod": true,
        "cppClassName": "GitBlob"
      },
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "blob",
            "type": "const git_blob *",
            "comment": "pointer to the blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const void *",
          "comment": " the pointer",
          "cType": "const void *",
          "cppClassName": "Wrapper",
          "jsClassName": "Buffer",
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_blob_rawcontent-6"
          ],
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_blob_rawcontent-1"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_blob_rawcontent-2"
          ]
        },
        "cFunctionName": "git_blob_rawcontent",
        "cppFunctionName": "Rawcontent",
        "jsFunctionName": "rawcontent",
        "isPrototypeMethod": true,
        "cppClassName": "GitBlob"
      },
      {
        "type": "function",
        "file": "blob.h",
        "args": [
          {
            "name": "blob",
            "type": "const git_blob *",
            "comment": "pointer to the blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_off_t",
          "comment": " size on bytes",
          "cType": "git_off_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "blob",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_blob_rawsize-7"
          ],
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_blob_rawsize-2"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_blob_rawsize-3",
            "ex/v0.21.2/general.html#git_blob_rawsize-4"
          ]
        },
        "cFunctionName": "git_blob_rawsize",
        "cppFunctionName": "Rawsize",
        "jsFunctionName": "rawsize",
        "isPrototypeMethod": true,
        "cppClassName": "GitBlob"
      }
    ],
    "cppClassName": "GitBlob",
    "jsClassName": "Blob",
    "filename": "blob",
    "isLibgitType": true,
    "dependencies": [
      "../include/wrapper.h",
      "node_buffer.h",
      "../include/oid.h",
      "../include/repository.h",
      "../include/blob.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_blob_free",
    "name": "blob"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "Pointer where to store the underlying reference.",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": null,
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch_name",
            "type": "const char *",
            "comment": "Name for the branch; this name is\n validated for consistency. It should also not conflict with\n an already existing branch name.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "type": "const git_commit *",
            "comment": "Commit to which this branch should point. This object\n must belong to the given `repo`.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing branch.",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false,
            "isOptional": true
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false,
            "isOptional": true
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog.\n If NULL, the default is \"Branch: created\"; if you want something more\n useful, provide a message.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false,
            "isOptional": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, GIT_EINVALIDSPEC or an error code.\n A proper reference is written in the refs/heads namespace\n pointing to the provided target commit.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_create",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "isAsync": true,
        "cppClassName": "GitBranch"
      },
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "branch",
            "type": "git_reference *",
            "comment": "A valid reference representing a branch",
            "cType": "git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or an error code.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_delete",
        "cppFunctionName": "Delete",
        "jsFunctionName": "delete",
        "cppClassName": "GitBranch"
      },
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "branch",
            "type": "const git_reference *",
            "comment": "Current underlying reference of the branch.",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if HEAD points at the branch, 0 if it isn't,\n error code otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_is_head",
        "cppFunctionName": "IsHead",
        "jsFunctionName": "isHead",
        "cppClassName": "GitBranch"
      },
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "iter",
            "type": "git_branch_iterator *",
            "comment": "the iterator to free",
            "cType": "git_branch_iterator *",
            "cppClassName": "GitBranchIterator",
            "jsClassName": "BranchIterator",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_iterator_free",
        "cppFunctionName": "IteratorFree",
        "jsFunctionName": "iteratorFree",
        "cppClassName": "GitBranch"
      },
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "out",
            "type": "git_branch_iterator **",
            "comment": "the iterator",
            "cType": "git_branch_iterator **",
            "cppClassName": "GitBranchIterator",
            "jsClassName": "BranchIterator",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where to find the branches.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "list_flags",
            "type": "git_branch_t",
            "comment": "Filtering flags for the branch\n listing. Valid values are GIT_BRANCH_LOCAL, GIT_BRANCH_REMOTE\n or GIT_BRANCH_ALL.",
            "cType": "git_branch_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": true,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success  or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_iterator_new",
        "cppFunctionName": "IteratorNew",
        "jsFunctionName": "iteratorNew",
        "isAsync": true,
        "cppClassName": "GitBranch"
      },
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "pointer to the looked-up branch reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to look up the branch",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch_name",
            "type": "const char *",
            "comment": "Name of the branch to be looked-up;\n this name is validated for consistency.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch_type",
            "type": "git_branch_t",
            "comment": "Type of the considered branch. This should\n be valued with either GIT_BRANCH_LOCAL or GIT_BRANCH_REMOTE.",
            "cType": "git_branch_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": true,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success; GIT_ENOTFOUND when no matching branch\n exists, GIT_EINVALIDSPEC, otherwise an error code.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "isAsync": true,
        "cppClassName": "GitBranch"
      },
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": null,
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "branch",
            "type": "git_reference *",
            "comment": "Current underlying reference of the branch.",
            "cType": "git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "new_branch_name",
            "type": "const char *",
            "comment": "Target name of the branch once the move\n is performed; this name is validated for consistency.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing branch.",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EINVALIDSPEC or an error code.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_move",
        "cppFunctionName": "Move",
        "jsFunctionName": "move",
        "isAsync": true,
        "cppClassName": "GitBranch"
      },
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "out",
            "type": "const char **",
            "comment": "where the pointer of branch name is stored;\n this is valid as long as the ref is not freed.",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "the reference ideally pointing to a branch",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success; otherwise an error code (e.g., if the\n  ref is no local or remote branch).",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_name",
        "cppFunctionName": "Name",
        "jsFunctionName": "name",
        "isAsync": true,
        "cppClassName": "GitBranch"
      },
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "branch",
            "type": "git_reference *",
            "comment": "the branch to configure",
            "cType": "git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "upstream_name",
            "type": "const char *",
            "comment": "remote-tracking or local branch to set as\n upstream. Pass NULL to unset.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false,
            "isOptional": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_set_upstream",
        "cppFunctionName": "SetUpstream",
        "jsFunctionName": "setUpstream",
        "isAsync": false,
        "cppClassName": "GitBranch"
      },
      {
        "type": "function",
        "file": "branch.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "Pointer where to store the retrieved\n reference.",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "branch",
            "type": "const git_reference *",
            "comment": "Current underlying reference of the branch.",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success; GIT_ENOTFOUND when no remote tracking\n reference exists, otherwise an error code.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "branch",
        "cFunctionName": "git_branch_upstream",
        "cppFunctionName": "Upstream",
        "jsFunctionName": "upstream",
        "isAsync": false,
        "cppClassName": "GitBranch"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "branch",
    "cppClassName": "GitBranch",
    "jsClassName": "Branch",
    "filename": "branch",
    "isLibgitType": true,
    "dependencies": [
      "../include/reference.h",
      "../include/repository.h",
      "../include/commit.h",
      "../include/signature.h",
      "../include/branch_iterator.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "branch"
  },
  {
    "typeName": "branch",
    "type": "enum",
    "cType": "git_branch_t",
    "isMask": false,
    "values": [
      {
        "name": "GIT_BRANCH_LOCAL",
        "value": 1,
        "JsName": "LOCAL"
      },
      {
        "name": "GIT_BRANCH_REMOTE",
        "value": 2,
        "JsName": "REMOTE"
      },
      {
        "name": "GIT_BRANCH_ALL",
        "value": 3,
        "JsName": "ALL"
      }
    ],
    "owner": "Branch",
    "JsName": "BRANCH"
  },
  {
    "type": "class",
    "value": "git_branch_iterator",
    "file": "branch.h",
    "used": {
      "returns": [],
      "needs": [
        "git_branch_iterator_free",
        "git_branch_iterator_new",
        "git_branch_next"
      ]
    },
    "typeName": "branch_iterator",
    "cType": "git_branch_iterator",
    "functions": [],
    "cppClassName": "GitBranchIterator",
    "jsClassName": "BranchIterator",
    "filename": "branch_iterator",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "branch_iterator"
  },
  {
    "type": "class",
    "value": "git_buf",
    "file": "buffer.h",
    "fields": [
      {
        "type": "char *",
        "name": "ptr",
        "cType": "char *",
        "cppFunctionName": "Ptr",
        "jsFunctionName": "ptr",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "size_t",
        "name": "asize",
        "cType": "size_t",
        "cppFunctionName": "Asize",
        "jsFunctionName": "asize",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "size_t",
        "name": "size",
        "cType": "size_t",
        "cppFunctionName": "Size",
        "jsFunctionName": "size",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_blob_filtered_content",
        "git_buf_free",
        "git_buf_grow",
        "git_buf_set",
        "git_config_find_global",
        "git_config_find_system",
        "git_config_find_xdg",
        "git_diff_commit_as_email",
        "git_diff_format_email",
        "git_diff_stats_to_buf",
        "git_filter_list_apply_to_blob",
        "git_filter_list_apply_to_data",
        "git_filter_list_apply_to_file",
        "git_message_prettify",
        "git_object_short_id",
        "git_patch_to_buf",
        "git_refspec_rtransform",
        "git_refspec_transform",
        "git_remote_default_branch",
        "git_repository_discover",
        "git_repository_message"
      ]
    },
    "typeName": "buf",
    "cType": "git_buf",
    "functions": [
      {
        "type": "function",
        "file": "buffer.h",
        "args": [
          {
            "name": "buffer",
            "type": "git_buf *",
            "comment": "The buffer to be resized; may or may not be allocated yet",
            "cType": "git_buf *",
            "cppClassName": "GitBuf",
            "jsClassName": "Buf",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false,
            "shouldAlloc": true
          },
          {
            "name": "target_size",
            "type": "size_t",
            "comment": "The desired available size",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, -1 on allocation failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false,
          "isErrorCode": true
        },
        "group": "buf",
        "cFunctionName": "git_buf_grow",
        "cppFunctionName": "Grow",
        "jsFunctionName": "grow",
        "isPrototypeMethod": true,
        "isAsync": true,
        "cppClassName": "GitBuf"
      },
      {
        "type": "function",
        "file": "buffer.h",
        "args": [
          {
            "name": "buffer",
            "type": "git_buf *",
            "comment": "The buffer to set",
            "cType": "git_buf *",
            "cppClassName": "GitBuf",
            "jsClassName": "Buf",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false,
            "shouldAlloc": true
          },
          {
            "name": "data",
            "type": "const void *",
            "comment": "The data to copy into the buffer",
            "cType": "const void *",
            "cppClassName": "Buffer",
            "jsClassName": "Buffer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "datalen",
            "type": "size_t",
            "comment": "The length of the data to copy into the buffer",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, -1 on allocation failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false,
          "isErrorCode": true
        },
        "group": "buf",
        "cFunctionName": "git_buf_set",
        "cppFunctionName": "Set",
        "jsFunctionName": "set",
        "isPrototypeMethod": true,
        "isAsync": true,
        "cppClassName": "GitBuf"
      }
    ],
    "cppClassName": "GitBuf",
    "jsClassName": "Buf",
    "filename": "buf",
    "isLibgitType": true,
    "dependencies": [
      "../include/buf.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "freeFunctionName": "git_buf_free",
    "name": "buf"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "checkout.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository to check out (must be non-bare)",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "type": "const git_checkout_options *",
            "comment": "specifies checkout options (may be NULL)",
            "cType": "const git_checkout_options *",
            "cppClassName": "GitCheckoutOptions",
            "jsClassName": "CheckoutOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EUNBORNBRANCH if HEAD points to a non\n         existing branch, non-zero value returned by `notify_cb`, or\n         other error code \n<\n 0 (use giterr_last for error details)",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "checkout",
        "cFunctionName": "git_checkout_head",
        "cppFunctionName": "Head",
        "jsFunctionName": "head",
        "cppClassName": "GitCheckout"
      },
      {
        "type": "function",
        "file": "checkout.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository into which to check out (must be non-bare)",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "index",
            "type": "git_index *",
            "comment": "index to be checked out (or NULL to use repository index)",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "type": "const git_checkout_options *",
            "comment": "specifies checkout options (may be NULL)",
            "cType": "const git_checkout_options *",
            "cppClassName": "GitCheckoutOptions",
            "jsClassName": "CheckoutOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, non-zero return value from `notify_cb`, or error\n         code \n<\n 0 (use giterr_last for error details)",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "checkout",
        "cFunctionName": "git_checkout_index",
        "cppFunctionName": "Index",
        "jsFunctionName": "index",
        "cppClassName": "GitCheckout"
      },
      {
        "type": "function",
        "file": "checkout.h",
        "args": [
          {
            "name": "opts",
            "type": "git_checkout_options *",
            "comment": "the `git_checkout_options` struct to initialize.",
            "cType": "git_checkout_options *",
            "cppClassName": "GitCheckoutOptions",
            "jsClassName": "CheckoutOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "Version of struct; pass `GIT_CHECKOUT_OPTIONS_VERSION`",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "checkout",
        "cFunctionName": "git_checkout_init_options",
        "cppFunctionName": "InitOptions",
        "jsFunctionName": "initOptions",
        "cppClassName": "GitCheckout"
      },
      {
        "type": "function",
        "file": "checkout.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository to check out (must be non-bare)",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "treeish",
            "type": "const git_object *",
            "comment": "a commit, tag or tree which content will be used to update\n the working directory (or NULL to use HEAD)",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "type": "const git_checkout_options *",
            "comment": "specifies checkout options (may be NULL)",
            "cType": "const git_checkout_options *",
            "cppClassName": "GitCheckoutOptions",
            "jsClassName": "CheckoutOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, non-zero return value from `notify_cb`, or error\n         code \n<\n 0 (use giterr_last for error details)",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "checkout",
        "cFunctionName": "git_checkout_tree",
        "cppFunctionName": "Tree",
        "jsFunctionName": "tree",
        "cppClassName": "GitCheckout"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "checkout",
    "cppClassName": "GitCheckout",
    "jsClassName": "Checkout",
    "filename": "checkout",
    "isLibgitType": true,
    "dependencies": [
      "../include/repository.h",
      "../include/checkout_options.h",
      "../include/index.h",
      "../include/object.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "checkout"
  },
  {
    "typeName": "checkout_notify",
    "type": "enum",
    "cType": "git_checkout_notify_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_CHECKOUT_NOTIFY_NONE",
        "value": 0,
        "JsName": "NONE"
      },
      {
        "name": "GIT_CHECKOUT_NOTIFY_CONFLICT",
        "value": 1,
        "JsName": "CONFLICT"
      },
      {
        "name": "GIT_CHECKOUT_NOTIFY_DIRTY",
        "value": 2,
        "JsName": "DIRTY"
      },
      {
        "name": "GIT_CHECKOUT_NOTIFY_UPDATED",
        "value": 4,
        "JsName": "UPDATED"
      },
      {
        "name": "GIT_CHECKOUT_NOTIFY_UNTRACKED",
        "value": 8,
        "JsName": "UNTRACKED"
      },
      {
        "name": "GIT_CHECKOUT_NOTIFY_IGNORED",
        "value": 16,
        "JsName": "IGNORED"
      },
      {
        "name": "GIT_CHECKOUT_NOTIFY_ALL",
        "value": 65535,
        "JsName": "ALL"
      }
    ],
    "owner": "Checkout",
    "JsName": "NOTIFY"
  },
  {
    "type": "struct",
    "value": "git_checkout_options",
    "file": "checkout.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "checkout_strategy",
        "cType": "unsigned int",
        "cppFunctionName": "CheckoutStrategy",
        "jsFunctionName": "checkoutStrategy",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "int",
        "name": "disable_filters",
        "cType": "int",
        "cppFunctionName": "DisableFilters",
        "jsFunctionName": "disableFilters",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "dir_mode",
        "cType": "unsigned int",
        "cppFunctionName": "DirMode",
        "jsFunctionName": "dirMode",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "file_mode",
        "cType": "unsigned int",
        "cppFunctionName": "FileMode",
        "jsFunctionName": "fileMode",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "int",
        "name": "file_open_flags",
        "cType": "int",
        "cppFunctionName": "FileOpenFlags",
        "jsFunctionName": "fileOpenFlags",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "notify_flags",
        "cType": "unsigned int",
        "cppFunctionName": "NotifyFlags",
        "jsFunctionName": "notifyFlags",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_checkout_notify_cb",
        "name": "notify_cb",
        "cType": "git_checkout_notify_cb",
        "cppFunctionName": "NotifyCb",
        "jsFunctionName": "notifyCb",
        "cppClassName": "GitCheckoutNotifyCb",
        "jsClassName": "CheckoutNotifyCb",
        "isCallbackFunction": true,
        "args": [
          {
            "name": "why",
            "cType": "git_checkout_notify_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": true
          },
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "baseline",
            "cType": "const git_diff_file *",
            "cppClassName": "GitDiffFile",
            "jsClassName": "DiffFile",
            "isLibgitType": true,
            "isEnum": false
          },
          {
            "name": "target",
            "cType": "const git_diff_file *",
            "cppClassName": "GitDiffFile",
            "jsClassName": "DiffFile",
            "isLibgitType": true,
            "isEnum": false
          },
          {
            "name": "workdir",
            "cType": "const git_diff_file *",
            "cppClassName": "GitDiffFile",
            "jsClassName": "DiffFile",
            "isLibgitType": true,
            "isEnum": false
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "Void",
            "jsClassName": "Void"
          }
        ],
        "returnType": "int",
        "returnNoResults": 1,
        "returnSuccess": 0,
        "returnError": -1
      },
      {
        "type": "void *",
        "name": "notify_payload",
        "cType": "void *",
        "cppFunctionName": "NotifyPayload",
        "jsFunctionName": "notifyPayload",
        "cppClassName": "Void",
        "jsClassName": "Void",
        "isCallbackFunction": false,
        "payloadFor": "notify_cb"
      },
      {
        "type": "git_checkout_progress_cb",
        "name": "progress_cb",
        "cType": "git_checkout_progress_cb",
        "cppFunctionName": "ProgressCb",
        "jsFunctionName": "progressCb",
        "cppClassName": "GitCheckoutProgressCb",
        "jsClassName": "CheckoutProgressCb",
        "isCallbackFunction": true,
        "args": [
          {
            "name": "path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "completed_steps",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number"
          },
          {
            "name": "total_steps",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "Void",
            "jsClassName": "Void"
          }
        ],
        "returnType": "int",
        "returnNoResults": 1,
        "returnSuccess": 0,
        "returnError": -1
      },
      {
        "type": "void *",
        "name": "progress_payload",
        "cType": "void *",
        "cppFunctionName": "ProgressPayload",
        "jsFunctionName": "progressPayload",
        "cppClassName": "Void",
        "jsClassName": "Void",
        "isCallbackFunction": false,
        "payloadFor": "progress_cb"
      },
      {
        "type": "git_strarray",
        "name": "paths",
        "cType": "git_strarray",
        "cppFunctionName": "Paths",
        "jsFunctionName": "paths",
        "cppClassName": "GitStrarray",
        "jsClassName": "Strarray",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      },
      {
        "type": "git_tree *",
        "name": "baseline",
        "cType": "git_tree *",
        "cppFunctionName": "Baseline",
        "jsFunctionName": "baseline",
        "cppClassName": "GitTree",
        "jsClassName": "Tree",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "functions": {
          "git_tree_walk": {
            "ignore": true
          }
        }
      },
      {
        "type": "const char *",
        "name": "target_directory",
        "cType": "const char *",
        "cppFunctionName": "TargetDirectory",
        "jsFunctionName": "targetDirectory",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "ancestor_label",
        "cType": "const char *",
        "cppFunctionName": "AncestorLabel",
        "jsFunctionName": "ancestorLabel",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "our_label",
        "cType": "const char *",
        "cppFunctionName": "OurLabel",
        "jsFunctionName": "ourLabel",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "their_label",
        "cType": "const char *",
        "cppFunctionName": "TheirLabel",
        "jsFunctionName": "theirLabel",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_checkout_head",
        "git_checkout_index",
        "git_checkout_init_options",
        "git_checkout_tree",
        "git_clone_into",
        "git_clone_local_into",
        "git_merge"
      ]
    },
    "typeName": "checkout_options",
    "cType": "git_checkout_options",
    "functions": [],
    "cppClassName": "GitCheckoutOptions",
    "jsClassName": "CheckoutOptions",
    "filename": "checkout_options",
    "isLibgitType": true,
    "dependencies": [
      "../include/diff_file.h",
      "../include/strarray.h",
      "../include/tree.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "checkout_options"
  },
  {
    "typeName": "checkout_strategy",
    "type": "enum",
    "cType": "git_checkout_strategy_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_CHECKOUT_NONE",
        "value": 0,
        "JsName": "NONE"
      },
      {
        "name": "GIT_CHECKOUT_SAFE",
        "value": 1,
        "JsName": "SAFE"
      },
      {
        "name": "GIT_CHECKOUT_SAFE_CREATE",
        "value": 2,
        "JsName": "SAFE_CREATE"
      },
      {
        "name": "GIT_CHECKOUT_FORCE",
        "value": 4,
        "JsName": "FORCE"
      },
      {
        "name": "GIT_CHECKOUT_ALLOW_CONFLICTS",
        "value": 16,
        "JsName": "ALLOW_CONFLICTS"
      },
      {
        "name": "GIT_CHECKOUT_REMOVE_UNTRACKED",
        "value": 32,
        "JsName": "REMOVE_UNTRACKED"
      },
      {
        "name": "GIT_CHECKOUT_REMOVE_IGNORED",
        "value": 64,
        "JsName": "REMOVE_IGNORED"
      },
      {
        "name": "GIT_CHECKOUT_UPDATE_ONLY",
        "value": 128,
        "JsName": "UPDATE_ONLY"
      },
      {
        "name": "GIT_CHECKOUT_DONT_UPDATE_INDEX",
        "value": 256,
        "JsName": "DONT_UPDATE_INDEX"
      },
      {
        "name": "GIT_CHECKOUT_NO_REFRESH",
        "value": 512,
        "JsName": "NO_REFRESH"
      },
      {
        "name": "GIT_CHECKOUT_SKIP_UNMERGED",
        "value": 1024,
        "JsName": "SKIP_UNMERGED"
      },
      {
        "name": "GIT_CHECKOUT_USE_OURS",
        "value": 2048,
        "JsName": "USE_OURS"
      },
      {
        "name": "GIT_CHECKOUT_USE_THEIRS",
        "value": 4096,
        "JsName": "USE_THEIRS"
      },
      {
        "name": "GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH",
        "value": 8192,
        "JsName": "DISABLE_PATHSPEC_MATCH"
      },
      {
        "name": "GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES",
        "value": 262144,
        "JsName": "SKIP_LOCKED_DIRECTORIES"
      },
      {
        "name": "GIT_CHECKOUT_DONT_OVERWRITE_IGNORED",
        "value": 524288,
        "JsName": "DONT_OVERWRITE_IGNORED"
      },
      {
        "name": "GIT_CHECKOUT_CONFLICT_STYLE_MERGE",
        "value": 1048576,
        "JsName": "CONFLICT_STYLE_MERGE"
      },
      {
        "name": "GIT_CHECKOUT_CONFLICT_STYLE_DIFF3",
        "value": 2097152,
        "JsName": "CONFLICT_STYLE_DIFF3"
      },
      {
        "name": "GIT_CHECKOUT_UPDATE_SUBMODULES",
        "value": 65536,
        "JsName": "UPDATE_SUBMODULES"
      },
      {
        "name": "GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED",
        "value": 131072,
        "JsName": "UPDATE_SUBMODULES_IF_CHANGED"
      }
    ],
    "owner": "Checkout",
    "JsName": "STRATEGY"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "cherrypick.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to cherry-pick",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "commit",
            "type": "git_commit *",
            "comment": "the commit to cherry-pick",
            "cType": "git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "cherry_pick_options",
            "type": "const git_cherry_pick_options *",
            "comment": "the cherry-pick options (or null for defaults)",
            "cType": "const git_cherry_pick_options *",
            "cppClassName": "GitCherryPickOptions",
            "jsClassName": "CherryPickOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " zero on success, -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "cherry",
        "cFunctionName": "git_cherry_pick",
        "cppFunctionName": "Pick",
        "jsFunctionName": "pick",
        "cppClassName": "GitCherry"
      },
      {
        "type": "function",
        "file": "cherrypick.h",
        "args": [
          {
            "name": "out",
            "type": "git_index **",
            "comment": "pointer to store the index result in",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository that contains the given commits",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "cherry_pick_commit",
            "type": "git_commit *",
            "comment": "the commit to cherry-pick",
            "cType": "git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "our_commit",
            "type": "git_commit *",
            "comment": "the commit to revert against (eg, HEAD)",
            "cType": "git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "mainline",
            "type": "unsigned int",
            "comment": "the parent of the revert commit, if it is a merge",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "merge_options",
            "type": "const git_merge_options *",
            "comment": "the merge options (or null for defaults)",
            "cType": "const git_merge_options *",
            "cppClassName": "GitMergeOptions",
            "jsClassName": "MergeOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " zero on success, -1 on failure.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "cherry",
        "cFunctionName": "git_cherry_pick_commit",
        "cppFunctionName": "PickCommit",
        "jsFunctionName": "pickCommit",
        "isAsync": true,
        "cppClassName": "GitCherry"
      },
      {
        "type": "function",
        "file": "cherrypick.h",
        "args": [
          {
            "name": "opts",
            "type": "git_cherry_pick_options *",
            "comment": "the `git_cherry_pick_options` struct to initialize",
            "cType": "git_cherry_pick_options *",
            "cppClassName": "GitCherryPickOptions",
            "jsClassName": "CherryPickOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "Version of struct; pass `GIT_CHERRY_PICK_OPTIONS_VERSION`",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "cherry",
        "cFunctionName": "git_cherry_pick_init_options",
        "cppFunctionName": "PickInitOptions",
        "jsFunctionName": "pickInitOptions",
        "cppClassName": "GitCherry"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "cherry",
    "cppClassName": "GitCherry",
    "jsClassName": "Cherry",
    "filename": "cherry",
    "isLibgitType": true,
    "dependencies": [
      "../include/repository.h",
      "../include/commit.h",
      "../include/cherry_pick_options.h",
      "../include/index.h",
      "../include/merge_options.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "cherry"
  },
  {
    "type": "struct",
    "value": "git_cherry_pick_options",
    "file": "cherrypick.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "mainline",
        "cType": "unsigned int",
        "cppFunctionName": "Mainline",
        "jsFunctionName": "mainline",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_merge_options",
        "name": "merge_opts",
        "cType": "git_merge_options",
        "cppFunctionName": "MergeOpts",
        "jsFunctionName": "mergeOpts",
        "cppClassName": "GitMergeOptions",
        "jsClassName": "MergeOptions",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      },
      {
        "type": "git_checkout_options",
        "name": "checkout_opts",
        "cType": "git_checkout_options",
        "cppFunctionName": "CheckoutOpts",
        "jsFunctionName": "checkoutOpts",
        "cppClassName": "GitCheckoutOptions",
        "jsClassName": "CheckoutOptions",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_cherry_pick",
        "git_cherry_pick_init_options"
      ]
    },
    "typeName": "cherry_pick_options",
    "cType": "git_cherry_pick_options",
    "functions": [],
    "cppClassName": "GitCherryPickOptions",
    "jsClassName": "CherryPickOptions",
    "filename": "cherry_pick_options",
    "isLibgitType": true,
    "dependencies": [
      "../include/merge_options.h",
      "../include/checkout_options.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "cherry_pick_options"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "clone.h",
        "args": [
          {
            "name": "out",
            "type": "git_repository **",
            "comment": "pointer that will receive the resulting repository object",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "url",
            "type": "const char *",
            "comment": "the remote repository to clone",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "local_path",
            "type": "const char *",
            "comment": "local directory to clone to",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "options",
            "type": "const git_clone_options *",
            "comment": "configuration options for the clone.  If NULL, the\n        function works as though GIT_OPTIONS_INIT were passed.",
            "cType": "const git_clone_options *",
            "cppClassName": "GitCloneOptions",
            "jsClassName": "CloneOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false,
            "isOptional": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, any non-zero return value from a callback\n         function, or a negative value to indicate an error (use\n         `giterr_last` for a detailed error message)",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "clone",
        "examples": {
          "network/clone.c": [
            "ex/v0.21.2/network/clone.html#git_clone-1"
          ]
        },
        "cFunctionName": "git_clone",
        "cppFunctionName": "Clone",
        "jsFunctionName": "clone",
        "isAsync": true,
        "cppClassName": "GitClone"
      },
      {
        "type": "function",
        "file": "clone.h",
        "args": [
          {
            "name": "opts",
            "type": "git_clone_options *",
            "comment": "The `git_clone_options` struct to initialize",
            "cType": "git_clone_options *",
            "cppClassName": "GitCloneOptions",
            "jsClassName": "CloneOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "Version of struct; pass `GIT_CLONE_OPTIONS_VERSION`",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "clone",
        "cFunctionName": "git_clone_init_options",
        "cppFunctionName": "InitOptions",
        "jsFunctionName": "initOptions",
        "cppClassName": "GitClone"
      },
      {
        "type": "function",
        "file": "clone.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to use",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote repository to clone from",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "co_opts",
            "type": "const git_checkout_options *",
            "comment": "options to use during checkout",
            "cType": "const git_checkout_options *",
            "cppClassName": "GitCheckoutOptions",
            "jsClassName": "CheckoutOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch",
            "type": "const char *",
            "comment": "the branch to checkout after the clone, pass NULL for the\n        remote's default branch",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity used when updating the reflog.",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, any non-zero return value from a callback\n         function, or a negative value to indicate an error (use\n         `giterr_last` for a detailed error message)",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "clone",
        "cFunctionName": "git_clone_into",
        "cppFunctionName": "Into",
        "jsFunctionName": "into",
        "cppClassName": "GitClone"
      },
      {
        "type": "function",
        "file": "clone.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to use",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote repository to clone from",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "co_opts",
            "type": "const git_checkout_options *",
            "comment": "options to use during checkout",
            "cType": "const git_checkout_options *",
            "cppClassName": "GitCheckoutOptions",
            "jsClassName": "CheckoutOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch",
            "type": "const char *",
            "comment": "the branch to checkout after the clone, pass NULL for the\n        remote's default branch",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "link",
            "type": "int",
            "comment": "wether to use hardlinks instead of copying\n objects. This is only possible if both repositories are on the same\n filesystem.",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "the identity used when updating the reflog",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, any non-zero return value from a callback\n         function, or a negative value to indicate an error (use\n         `giterr_last` for a detailed error message)",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "clone",
        "cFunctionName": "git_clone_local_into",
        "cppFunctionName": "LocalInto",
        "jsFunctionName": "localInto",
        "cppClassName": "GitClone"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "clone",
    "cppClassName": "GitClone",
    "jsClassName": "Clone",
    "filename": "clone",
    "isLibgitType": true,
    "dependencies": [
      "../include/repository.h",
      "../include/clone_options.h",
      "../include/remote.h",
      "../include/checkout_options.h",
      "../include/signature.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "clone"
  },
  {
    "typeName": "clone_local",
    "type": "enum",
    "cType": "git_clone_local_t",
    "isMask": false,
    "values": [
      {
        "name": "GIT_CLONE_LOCAL_AUTO",
        "value": 0,
        "JsName": "AUTO"
      },
      {
        "name": "GIT_CLONE_LOCAL",
        "value": 1,
        "JsName": "LOCAL"
      },
      {
        "name": "GIT_CLONE_NO_LOCAL",
        "value": 2,
        "JsName": "NO_LOCAL"
      },
      {
        "name": "GIT_CLONE_LOCAL_NO_LINKS",
        "value": 3,
        "JsName": "NO_LINKS"
      }
    ],
    "owner": "Clone",
    "JsName": "LOCAL"
  },
  {
    "type": "struct",
    "value": "git_clone_options",
    "file": "clone.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_checkout_options",
        "name": "checkout_opts",
        "cType": "git_checkout_options",
        "cppFunctionName": "CheckoutOpts",
        "jsFunctionName": "checkoutOpts",
        "cppClassName": "GitCheckoutOptions",
        "jsClassName": "CheckoutOptions",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      },
      {
        "type": "git_remote_callbacks",
        "name": "remote_callbacks",
        "cType": "git_remote_callbacks",
        "cppFunctionName": "RemoteCallbacks",
        "jsFunctionName": "remoteCallbacks",
        "cppClassName": "GitRemoteCallbacks",
        "jsClassName": "RemoteCallbacks",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "fields": {
          "completion": {
            "ignore": true
          },
          "sideband_progress": {
            "ignore": true
          },
          "transfer_progress": {
            "ignore": true
          },
          "update_tips": {
            "ignore": true
          }
        }
      },
      {
        "type": "int",
        "name": "bare",
        "cType": "int",
        "cppFunctionName": "Bare",
        "jsFunctionName": "bare",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "int",
        "name": "ignore_cert_errors",
        "cType": "int",
        "cppFunctionName": "IgnoreCertErrors",
        "jsFunctionName": "ignoreCertErrors",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_clone_local_t",
        "name": "local",
        "cType": "git_clone_local_t",
        "cppFunctionName": "Local",
        "jsFunctionName": "local",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true,
        "isMask": true
      },
      {
        "type": "const char *",
        "name": "remote_name",
        "cType": "const char *",
        "cppFunctionName": "RemoteName",
        "jsFunctionName": "remoteName",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "checkout_branch",
        "cType": "const char *",
        "cppFunctionName": "CheckoutBranch",
        "jsFunctionName": "checkoutBranch",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "git_signature *",
        "name": "signature",
        "cType": "git_signature *",
        "cppFunctionName": "Signature",
        "jsFunctionName": "signature",
        "cppClassName": "GitSignature",
        "jsClassName": "Signature",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "functions": {
          "git_signature_new": {
            "isAsync": false
          }
        }
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_clone",
        "git_clone_init_options"
      ]
    },
    "typeName": "clone_options",
    "cType": "git_clone_options",
    "functions": [],
    "cppClassName": "GitCloneOptions",
    "jsClassName": "CloneOptions",
    "filename": "clone_options",
    "isLibgitType": true,
    "dependencies": [
      "../include/checkout_options.h",
      "../include/remote_callbacks.h",
      "../include/signature.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "clone_options"
  },
  {
    "type": "class",
    "value": "git_commit",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_branch_create",
        "git_cherry_pick",
        "git_cherry_pick_commit",
        "git_commit_amend",
        "git_commit_author",
        "git_commit_committer",
        "git_commit_create",
        "git_commit_free",
        "git_commit_id",
        "git_commit_lookup",
        "git_commit_lookup_prefix",
        "git_commit_message",
        "git_commit_message_encoding",
        "git_commit_message_raw",
        "git_commit_nth_gen_ancestor",
        "git_commit_owner",
        "git_commit_parent",
        "git_commit_parent_id",
        "git_commit_parentcount",
        "git_commit_raw_header",
        "git_commit_summary",
        "git_commit_time",
        "git_commit_time_offset",
        "git_commit_tree",
        "git_commit_tree_id",
        "git_diff_commit_as_email",
        "git_merge_commits",
        "git_revert",
        "git_revert_commit"
      ]
    },
    "typeName": "commit",
    "cType": "git_commit",
    "functions": [
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "id",
            "type": "git_oid *",
            "comment": null,
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "commit_to_amend",
            "type": "const git_commit *",
            "comment": null,
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "update_ref",
            "type": "const char *",
            "comment": null,
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "author",
            "type": "const git_signature *",
            "comment": null,
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "type": "const git_signature *",
            "comment": null,
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message_encoding",
            "type": "const char *",
            "comment": null,
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message",
            "type": "const char *",
            "comment": null,
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": null,
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "cFunctionName": "git_commit_amend",
        "cppFunctionName": "Amend",
        "jsFunctionName": "amend",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_signature *",
          "comment": " the author of a commit",
          "cType": "const git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_signature_new": {
              "isAsync": false
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_commit_author-6"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_commit_author-19",
            "ex/v0.21.2/general.html#git_commit_author-20"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_author-12",
            "ex/v0.21.2/log.html#git_commit_author-13"
          ]
        },
        "cFunctionName": "git_commit_author",
        "cppFunctionName": "Author",
        "jsFunctionName": "author",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_signature *",
          "comment": " the committer of a commit",
          "cType": "const git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_signature_new": {
              "isAsync": false
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_commit_committer-5"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_commit_committer-18"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_committer-11"
          ]
        },
        "cFunctionName": "git_commit_committer",
        "cppFunctionName": "Committer",
        "jsFunctionName": "committer",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "id",
            "type": "git_oid *",
            "comment": "Pointer in which to store the OID of the newly created commit",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where to store the commit",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "update_ref",
            "type": "const char *",
            "comment": "If not NULL, name of the reference that\n\twill be updated to point to this commit. If the reference\n\tis not direct, it will be resolved to a direct reference.\n\tUse \"HEAD\" to update the HEAD of the current branch and\n\tmake it point to this commit. If the reference doesn't\n\texist yet, it will be created. If it does exist, the first\n\tparent must be the tip of this branch.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false,
            "isOptional": true
          },
          {
            "name": "author",
            "type": "const git_signature *",
            "comment": "Signature with author and author time of commit",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "type": "const git_signature *",
            "comment": "Signature with committer and * commit time of commit",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message_encoding",
            "type": "const char *",
            "comment": "The encoding for the message in the\n  commit, represented with a standard encoding name.\n  E.g. \"UTF-8\". If NULL, no encoding header is written and\n  UTF-8 is assumed.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false,
            "isOptional": true
          },
          {
            "name": "message",
            "type": "const char *",
            "comment": "Full message for this commit",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": "An instance of a `git_tree` object that will\n  be used as the tree for the commit. This tree object must\n  also be owned by the given `repo`.",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "parent_count",
            "type": "size_t",
            "comment": "Number of parents for this commit",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "parents",
            "type": "const git_commit *[]",
            "comment": "Array of `parent_count` pointers to `git_commit`\n  objects that will be used as the parents for this commit. This\n  array may be NULL if `parent_count` is 0 (root commit). All the\n  given commits must be owned by the `repo`.",
            "cType": "const git_commit **",
            "cppClassName": "Array",
            "jsClassName": "Array",
            "isReturn": false,
            "isSelf": false,
            "arrayElementCppClassName": "GitCommit"
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code\n\tThe created commit will be written to the Object Database and\n\tthe given reference will be updated to point to it",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "cFunctionName": "git_commit_create",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "id",
            "type": "git_oid *",
            "comment": null,
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": null,
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "update_ref",
            "type": "const char *",
            "comment": null,
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "author",
            "type": "const git_signature *",
            "comment": null,
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "type": "const git_signature *",
            "comment": null,
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message_encoding",
            "type": "const char *",
            "comment": null,
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message",
            "type": "const char *",
            "comment": null,
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": null,
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "parent_count",
            "type": "size_t",
            "comment": null,
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_commit_create_v-23"
          ],
          "init.c": [
            "ex/v0.21.2/init.html#git_commit_create_v-1"
          ]
        },
        "cFunctionName": "git_commit_create_v",
        "cppFunctionName": "CreateV",
        "jsFunctionName": "createV",
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " object identity for the commit.",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_commit_id-12"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_id-6"
          ]
        },
        "cFunctionName": "git_commit_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "git_commit **",
            "comment": "pointer to the looked up commit",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repo to use when locating the commit.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_commit_lookup-5",
            "ex/v0.21.2/general.html#git_commit_lookup-6",
            "ex/v0.21.2/general.html#git_commit_lookup-7"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_lookup-1"
          ]
        },
        "cFunctionName": "git_commit_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "git_commit **",
            "comment": "pointer to the looked up commit",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repo to use when locating the commit.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "identity of the commit to locate. If the object is\n\t\tan annotated tag it will be peeled back to the commit.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "type": "size_t",
            "comment": "the length of the short identifier",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "cFunctionName": "git_commit_lookup_prefix",
        "cppFunctionName": "LookupPrefix",
        "jsFunctionName": "lookupPrefix",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the message of a commit",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_commit_message-3",
            "ex/v0.21.2/cat-file.html#git_commit_message-4"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_commit_message-13",
            "ex/v0.21.2/general.html#git_commit_message-14",
            "ex/v0.21.2/general.html#git_commit_message-15"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_message-9",
            "ex/v0.21.2/log.html#git_commit_message-10"
          ],
          "tag.c": [
            "ex/v0.21.2/tag.html#git_commit_message-2"
          ]
        },
        "cFunctionName": "git_commit_message",
        "cppFunctionName": "Message",
        "jsFunctionName": "message",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " NULL, or the encoding",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "cFunctionName": "git_commit_message_encoding",
        "cppFunctionName": "MessageEncoding",
        "jsFunctionName": "messageEncoding",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the raw message of a commit",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "cFunctionName": "git_commit_message_raw",
        "cppFunctionName": "MessageRaw",
        "jsFunctionName": "messageRaw",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "ancestor",
            "type": "git_commit **",
            "comment": "Pointer where to store the ancestor commit",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "type": "unsigned int",
            "comment": "the requested generation",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success; GIT_ENOTFOUND if no matching ancestor exists\n or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "cFunctionName": "git_commit_nth_gen_ancestor",
        "cppFunctionName": "NthGenAncestor",
        "jsFunctionName": "nthGenAncestor",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "A previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " Repository that contains this commit.",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_owner-7",
            "ex/v0.21.2/log.html#git_commit_owner-8"
          ]
        },
        "cFunctionName": "git_commit_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "out",
            "type": "git_commit **",
            "comment": "Pointer where to store the parent commit",
            "cType": "git_commit **",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "type": "unsigned int",
            "comment": "the position of the parent (from 0 to `parentcount`)",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_commit_parent-22"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_parent-21",
            "ex/v0.21.2/log.html#git_commit_parent-22"
          ]
        },
        "cFunctionName": "git_commit_parent",
        "cppFunctionName": "Parent",
        "jsFunctionName": "parent",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "type": "unsigned int",
            "comment": "the position of the parent (from 0 to `parentcount`)",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " the id of the parent, NULL on error.",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_commit_parent_id-9"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_parent_id-23"
          ]
        },
        "cFunctionName": "git_commit_parent_id",
        "cppFunctionName": "ParentId",
        "jsFunctionName": "parentId",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "unsigned int",
          "comment": " integer of count of parents",
          "cType": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_commit_parentcount-8"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_commit_parentcount-21"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_parentcount-19",
            "ex/v0.21.2/log.html#git_commit_parentcount-20"
          ]
        },
        "cFunctionName": "git_commit_parentcount",
        "cppFunctionName": "Parentcount",
        "jsFunctionName": "parentcount",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the header text of the commit",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "cFunctionName": "git_commit_raw_header",
        "cppFunctionName": "RawHeader",
        "jsFunctionName": "rawHeader",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the summary of a commit or NULL on error",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "cFunctionName": "git_commit_summary",
        "cppFunctionName": "Summary",
        "jsFunctionName": "summary",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_time_t",
          "comment": " the time of a commit",
          "cType": "git_time_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_commit_time-16",
            "ex/v0.21.2/general.html#git_commit_time-17"
          ]
        },
        "cFunctionName": "git_commit_time",
        "cppFunctionName": "Time",
        "jsFunctionName": "time",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " positive or negative timezone offset, in minutes from UTC",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "cFunctionName": "git_commit_time_offset",
        "cppFunctionName": "TimeOffset",
        "jsFunctionName": "timeOffset",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "tree_out",
            "type": "git_tree **",
            "comment": "pointer where to store the tree object",
            "cType": "git_tree **",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "log.c": [
            "ex/v0.21.2/log.html#git_commit_tree-14",
            "ex/v0.21.2/log.html#git_commit_tree-15",
            "ex/v0.21.2/log.html#git_commit_tree-16",
            "ex/v0.21.2/log.html#git_commit_tree-17",
            "ex/v0.21.2/log.html#git_commit_tree-18"
          ]
        },
        "cFunctionName": "git_commit_tree",
        "cppFunctionName": "Tree",
        "jsFunctionName": "tree",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      },
      {
        "type": "function",
        "file": "commit.h",
        "args": [
          {
            "name": "commit",
            "type": "const git_commit *",
            "comment": "a previously loaded commit.",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " the id of tree pointed to by commit.",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "commit",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_commit_tree_id-7"
          ]
        },
        "cFunctionName": "git_commit_tree_id",
        "cppFunctionName": "TreeId",
        "jsFunctionName": "treeId",
        "isPrototypeMethod": true,
        "cppClassName": "GitCommit"
      }
    ],
    "cppClassName": "GitCommit",
    "jsClassName": "Commit",
    "filename": "commit",
    "isLibgitType": true,
    "dependencies": [
      "../include/oid.h",
      "../include/commit.h",
      "../include/signature.h",
      "../include/tree.h",
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_commit_free",
    "name": "commit"
  },
  {
    "type": "class",
    "value": "git_config",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_config_add_backend",
        "git_config_add_file_ondisk",
        "git_config_delete_entry",
        "git_config_delete_multivar",
        "git_config_foreach",
        "git_config_foreach_match",
        "git_config_free",
        "git_config_get_bool",
        "git_config_get_entry",
        "git_config_get_int32",
        "git_config_get_int64",
        "git_config_get_mapped",
        "git_config_get_multivar_foreach",
        "git_config_get_string",
        "git_config_iterator_glob_new",
        "git_config_iterator_new",
        "git_config_multivar_iterator_new",
        "git_config_new",
        "git_config_open_default",
        "git_config_open_global",
        "git_config_open_level",
        "git_config_open_ondisk",
        "git_config_refresh",
        "git_config_set_bool",
        "git_config_set_int32",
        "git_config_set_int64",
        "git_config_set_multivar",
        "git_config_set_string",
        "git_config_snapshot",
        "git_repository_config",
        "git_repository_config_snapshot"
      ]
    },
    "typeName": "config",
    "cType": "git_config",
    "functions": [
      {
        "type": "function",
        "file": "config.h",
        "args": [
          {
            "name": "cfg",
            "type": "git_config *",
            "comment": "where to look for the variable",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "the variable's name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "value",
            "type": "int64_t",
            "comment": "Long integer value for the variable",
            "cType": "int64_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "config",
        "cFunctionName": "git_config_set_int64",
        "cppFunctionName": "SetInt64",
        "jsFunctionName": "setInt64",
        "isPrototypeMethod": true,
        "cppClassName": "GitConfig"
      },
      {
        "type": "function",
        "file": "config.h",
        "args": [
          {
            "name": "cfg",
            "type": "git_config *",
            "comment": "where to look for the variable",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "the variable's name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "regexp",
            "type": "const char *",
            "comment": "a regular expression to indicate which values to replace",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "value",
            "type": "const char *",
            "comment": "the new value.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "config",
        "cFunctionName": "git_config_set_multivar",
        "cppFunctionName": "SetMultivar",
        "jsFunctionName": "setMultivar",
        "isPrototypeMethod": true,
        "cppClassName": "GitConfig"
      },
      {
        "type": "function",
        "file": "config.h",
        "args": [
          {
            "name": "cfg",
            "type": "git_config *",
            "comment": "where to look for the variable",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "the variable's name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "value",
            "type": "const char *",
            "comment": "the string to store.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "config",
        "cFunctionName": "git_config_set_string",
        "cppFunctionName": "SetString",
        "jsFunctionName": "setString",
        "isPrototypeMethod": true,
        "cppClassName": "GitConfig"
      },
      {
        "type": "function",
        "file": "config.h",
        "args": [
          {
            "name": "out",
            "type": "git_config **",
            "comment": "pointer in which to store the snapshot config object",
            "cType": "git_config **",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "config",
            "type": "git_config *",
            "comment": "configuration to snapshot",
            "cType": "git_config *",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "config",
        "cFunctionName": "git_config_snapshot",
        "cppFunctionName": "Snapshot",
        "jsFunctionName": "snapshot",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitConfig"
      }
    ],
    "cppClassName": "GitConfig",
    "jsClassName": "Config",
    "filename": "config",
    "isLibgitType": true,
    "dependencies": [
      "../include/config.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_config_free",
    "name": "config"
  },
  {
    "typeName": "config_level",
    "type": "enum",
    "cType": "git_config_level_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_CONFIG_LEVEL_SYSTEM",
        "value": 1,
        "JsName": "SYSTEM"
      },
      {
        "name": "GIT_CONFIG_LEVEL_XDG",
        "value": 2,
        "JsName": "XDG"
      },
      {
        "name": "GIT_CONFIG_LEVEL_GLOBAL",
        "value": 3,
        "JsName": "GLOBAL"
      },
      {
        "name": "GIT_CONFIG_LEVEL_LOCAL",
        "value": 4,
        "JsName": "LOCAL"
      },
      {
        "name": "GIT_CONFIG_LEVEL_APP",
        "value": 5,
        "JsName": "APP"
      },
      {
        "name": "GIT_CONFIG_HIGHEST_LEVEL",
        "value": -1,
        "JsName": "HIGHEST_LEVEL"
      }
    ],
    "owner": "Config",
    "JsName": "LEVEL"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "transport.h",
        "args": [
          {
            "name": "out",
            "type": "git_cred **",
            "comment": null,
            "cType": "git_cred **",
            "cppClassName": "GitCred",
            "jsClassName": "Cred",
            "isReturn": true,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 for success or an error code for failure",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "cred",
        "cFunctionName": "git_cred_default_new",
        "cppFunctionName": "DefaultNew",
        "jsFunctionName": "defaultNew",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitCred"
      },
      {
        "type": "function",
        "file": "transport.h",
        "args": [
          {
            "name": "cred",
            "type": "git_cred *",
            "comment": "object to check",
            "cType": "git_cred *",
            "cppClassName": "GitCred",
            "jsClassName": "Cred",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the credential object has non-NULL username, 0 otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "cred",
        "cFunctionName": "git_cred_has_username",
        "cppFunctionName": "HasUsername",
        "jsFunctionName": "hasUsername",
        "isPrototypeMethod": true,
        "cppClassName": "GitCred"
      },
      {
        "type": "function",
        "file": "transport.h",
        "args": [
          {
            "name": "out",
            "type": "git_cred **",
            "comment": "The newly created credential object.",
            "cType": "git_cred **",
            "cppClassName": "GitCred",
            "jsClassName": "Cred",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "username",
            "type": "const char *",
            "comment": "username to use to authenticate",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 for success or an error code for failure",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "cred",
        "cFunctionName": "git_cred_ssh_key_from_agent",
        "cppFunctionName": "SshKeyFromAgent",
        "jsFunctionName": "sshKeyFromAgent",
        "isAsync": false,
        "isConstructorMethod": true,
        "cppClassName": "GitCred"
      },
      {
        "type": "function",
        "file": "transport.h",
        "args": [
          {
            "name": "out",
            "type": "git_cred **",
            "comment": "The newly created credential object.",
            "cType": "git_cred **",
            "cppClassName": "GitCred",
            "jsClassName": "Cred",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "username",
            "type": "const char *",
            "comment": "username to use to authenticate",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "publickey",
            "type": "const char *",
            "comment": "The path to the public key of the credential.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "privatekey",
            "type": "const char *",
            "comment": "The path to the private key of the credential.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "passphrase",
            "type": "const char *",
            "comment": "The passphrase of the credential.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 for success or an error code for failure",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "cred",
        "cFunctionName": "git_cred_ssh_key_new",
        "cppFunctionName": "SshKeyNew",
        "jsFunctionName": "sshKeyNew",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitCred"
      },
      {
        "type": "function",
        "file": "transport.h",
        "args": [
          {
            "name": "out",
            "type": "git_cred **",
            "comment": "The newly created credential object.",
            "cType": "git_cred **",
            "cppClassName": "GitCred",
            "jsClassName": "Cred",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "username",
            "type": "const char *",
            "comment": "The username of the credential.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "password",
            "type": "const char *",
            "comment": "The password of the credential.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 for success or an error code for failure",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "cred",
        "cFunctionName": "git_cred_userpass_plaintext_new",
        "cppFunctionName": "UserpassPlaintextNew",
        "jsFunctionName": "userpassPlaintextNew",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitCred"
      }
    ],
    "type": "class",
    "cType": "git_cred",
    "typeName": "cred",
    "cppClassName": "GitCred",
    "jsClassName": "Cred",
    "filename": "cred",
    "isLibgitType": true,
    "dependencies": [
      "../include/cred.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "cred"
  },
  {
    "type": "class",
    "value": "git_cred_default",
    "file": "transport.h",
    "used": {
      "returns": [],
      "needs": []
    },
    "typeName": "cred_default",
    "cType": "git_cred_default",
    "functions": [],
    "cppClassName": "GitCredDefault",
    "jsClassName": "CredDefault",
    "filename": "cred_default",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "cred_default"
  },
  {
    "type": "class",
    "value": "git_cred_userpass_payload",
    "file": "cred_helpers.h",
    "fields": [
      {
        "type": "char *",
        "name": "username",
        "cType": "char *",
        "cppFunctionName": "Username",
        "jsFunctionName": "username",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "char *",
        "name": "password",
        "cType": "char *",
        "cppFunctionName": "Password",
        "jsFunctionName": "password",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": []
    },
    "typeName": "cred_userpass_payload",
    "cType": "git_cred_userpass_payload",
    "functions": [],
    "cppClassName": "GitCredUserpassPayload",
    "jsClassName": "CredUserpassPayload",
    "filename": "cred_userpass_payload",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "cDependencies": [
      "git2/cred_helpers.h"
    ],
    "name": "cred_userpass_payload"
  },
  {
    "typeName": "credtype",
    "type": "enum",
    "cType": "git_credtype_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_CREDTYPE_USERPASS_PLAINTEXT",
        "value": 1,
        "JsName": "USERPASS_PLAINTEXT"
      },
      {
        "name": "GIT_CREDTYPE_SSH_KEY",
        "value": 2,
        "JsName": "SSH_KEY"
      },
      {
        "name": "GIT_CREDTYPE_SSH_CUSTOM",
        "value": 4,
        "JsName": "SSH_CUSTOM"
      },
      {
        "name": "GIT_CREDTYPE_DEFAULT",
        "value": 8,
        "JsName": "DEFAULT"
      },
      {
        "name": "GIT_CREDTYPE_SSH_INTERACTIVE",
        "value": 16,
        "JsName": "SSH_INTERACTIVE"
      }
    ],
    "owner": "Cred",
    "JsName": "TYPE"
  },
  {
    "typeName": "delta",
    "type": "enum",
    "cType": "git_delta_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_DELTA_UNMODIFIED",
        "value": 0,
        "JsName": "UNMODIFIED"
      },
      {
        "name": "GIT_DELTA_ADDED",
        "value": 1,
        "JsName": "ADDED"
      },
      {
        "name": "GIT_DELTA_DELETED",
        "value": 2,
        "JsName": "DELETED"
      },
      {
        "name": "GIT_DELTA_MODIFIED",
        "value": 3,
        "JsName": "MODIFIED"
      },
      {
        "name": "GIT_DELTA_RENAMED",
        "value": 4,
        "JsName": "RENAMED"
      },
      {
        "name": "GIT_DELTA_COPIED",
        "value": 5,
        "JsName": "COPIED"
      },
      {
        "name": "GIT_DELTA_IGNORED",
        "value": 6,
        "JsName": "IGNORED"
      },
      {
        "name": "GIT_DELTA_UNTRACKED",
        "value": 7,
        "JsName": "UNTRACKED"
      },
      {
        "name": "GIT_DELTA_TYPECHANGE",
        "value": 8,
        "JsName": "TYPECHANGE"
      }
    ],
    "owner": "Enums",
    "JsName": "DELTA"
  },
  {
    "type": "class",
    "value": "git_diff",
    "file": "diff.h",
    "used": {
      "returns": [],
      "needs": [
        "git_diff_find_similar",
        "git_diff_foreach",
        "git_diff_format_email",
        "git_diff_free",
        "git_diff_get_delta",
        "git_diff_get_perfdata",
        "git_diff_get_stats",
        "git_diff_index_to_workdir",
        "git_diff_is_sorted_icase",
        "git_diff_merge",
        "git_diff_num_deltas",
        "git_diff_num_deltas_of_type",
        "git_diff_print",
        "git_diff_tree_to_index",
        "git_diff_tree_to_tree",
        "git_diff_tree_to_workdir",
        "git_diff_tree_to_workdir_with_index",
        "git_patch_from_diff",
        "git_pathspec_match_diff"
      ]
    },
    "typeName": "diff",
    "cType": "git_diff",
    "functions": [
      {
        "type": "function",
        "file": "diff.h",
        "args": [
          {
            "name": "diff",
            "type": "const git_diff *",
            "comment": "Diff list object",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "isLibgitType": true,
            "isEnum": false,
            "cDependencies": [
              "git2/sys/diff.h"
            ],
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "idx",
            "type": "size_t",
            "comment": "Index into diff list",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_diff_delta *",
          "comment": " Pointer to git_diff_delta (or NULL if `idx` out of range)",
          "cType": "const git_diff_delta *",
          "cppClassName": "GitDiffDelta",
          "jsClassName": "DiffDelta",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "diff",
        "cFunctionName": "git_diff_get_delta",
        "cppFunctionName": "GetDelta",
        "jsFunctionName": "getDelta",
        "isPrototypeMethod": true,
        "cppClassName": "GitDiff"
      },
      {
        "type": "function",
        "file": "sys/diff.h",
        "args": [
          {
            "name": "out",
            "type": "git_diff_perfdata *",
            "comment": "Structure to be filled with diff performance data",
            "cType": "git_diff_perfdata *",
            "cppClassName": "GitDiffPerfdata",
            "jsClassName": "DiffPerfdata",
            "isLibgitType": true,
            "isEnum": false,
            "cDependencies": [
              "git2/sys/diff.h"
            ],
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "diff",
            "type": "const git_diff *",
            "comment": "Diff to read performance data from",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "isLibgitType": true,
            "isEnum": false,
            "cDependencies": [
              "git2/sys/diff.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 for success, \n<\n0 for error",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "diff",
        "cFunctionName": "git_diff_get_perfdata",
        "cppFunctionName": "GetPerfdata",
        "jsFunctionName": "getPerfdata",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitDiff"
      },
      {
        "type": "function",
        "file": "diff.h",
        "args": [
          {
            "name": "diff",
            "type": "const git_diff *",
            "comment": "A git_diff generated by one of the above functions",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "isLibgitType": true,
            "isEnum": false,
            "cDependencies": [
              "git2/sys/diff.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " Count of number of deltas in the list",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "diff",
        "examples": {
          "log.c": [
            "ex/v0.21.2/log.html#git_diff_num_deltas-28"
          ]
        },
        "cFunctionName": "git_diff_num_deltas",
        "cppFunctionName": "NumDeltas",
        "jsFunctionName": "numDeltas",
        "isPrototypeMethod": true,
        "cppClassName": "GitDiff"
      },
      {
        "type": "function",
        "file": "diff.h",
        "args": [
          {
            "name": "diff",
            "type": "git_diff **",
            "comment": "Output pointer to a git_diff pointer to be allocated.",
            "cType": "git_diff **",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "isLibgitType": true,
            "isEnum": false,
            "cDependencies": [
              "git2/sys/diff.h"
            ],
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository containing the trees.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_tree",
            "type": "git_tree *",
            "comment": "A git_tree object to diff from, or NULL for empty tree.",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "new_tree",
            "type": "git_tree *",
            "comment": "A git_tree object to diff to, or NULL for empty tree.",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "type": "const git_diff_options *",
            "comment": "Structure with options to influence diff or NULL for defaults.",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false,
            "isOptional": true
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "diff",
        "examples": {
          "diff.c": [
            "ex/v0.21.2/diff.html#git_diff_tree_to_tree-3"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_diff_tree_to_tree-26",
            "ex/v0.21.2/log.html#git_diff_tree_to_tree-27"
          ]
        },
        "cFunctionName": "git_diff_tree_to_tree",
        "cppFunctionName": "TreeToTree",
        "jsFunctionName": "treeToTree",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitDiff"
      }
    ],
    "cppClassName": "GitDiff",
    "jsClassName": "Diff",
    "filename": "diff",
    "isLibgitType": true,
    "dependencies": [
      "../include/diff.h",
      "../include/diff_delta.h",
      "../include/diff_perfdata.h",
      "../include/repository.h",
      "../include/tree.h",
      "../include/diff_options.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_diff_free",
    "cDependencies": [
      "git2/sys/diff.h"
    ],
    "name": "diff"
  },
  {
    "type": "class",
    "value": "git_diff_delta",
    "file": "diff.h",
    "fields": [
      {
        "type": "git_delta_t",
        "name": "status",
        "cType": "git_delta_t",
        "cppFunctionName": "Status",
        "jsFunctionName": "status",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true,
        "isMask": true
      },
      {
        "type": "uint32_t",
        "name": "flags",
        "cType": "uint32_t",
        "cppFunctionName": "Flags",
        "jsFunctionName": "flags",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint16_t",
        "name": "similarity",
        "cType": "uint16_t",
        "cppFunctionName": "Similarity",
        "jsFunctionName": "similarity",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint16_t",
        "name": "nfiles",
        "cType": "uint16_t",
        "cppFunctionName": "Nfiles",
        "jsFunctionName": "nfiles",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_diff_file",
        "name": "old_file",
        "cType": "git_diff_file",
        "cppFunctionName": "OldFile",
        "jsFunctionName": "oldFile",
        "cppClassName": "GitDiffFile",
        "jsClassName": "DiffFile",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      },
      {
        "type": "git_diff_file",
        "name": "new_file",
        "cType": "git_diff_file",
        "cppFunctionName": "NewFile",
        "jsFunctionName": "newFile",
        "cppClassName": "GitDiffFile",
        "jsClassName": "DiffFile",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      }
    ],
    "used": {
      "returns": [
        "git_diff_get_delta",
        "git_patch_get_delta",
        "git_pathspec_match_list_diff_entry"
      ],
      "needs": [
        "git_diff_print_callback__to_buf",
        "git_diff_print_callback__to_file_handle"
      ]
    },
    "typeName": "diff_delta",
    "cType": "git_diff_delta",
    "functions": [],
    "cppClassName": "GitDiffDelta",
    "jsClassName": "DiffDelta",
    "filename": "diff_delta",
    "isLibgitType": true,
    "dependencies": [
      "../include/diff_file.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "diff_delta"
  },
  {
    "type": "class",
    "value": "git_diff_file",
    "file": "diff.h",
    "fields": [
      {
        "type": "git_oid",
        "name": "id",
        "cType": "git_oid",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "cppClassName": "GitOid",
        "jsClassName": "Oid",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "shouldAlloc": true,
        "functions": {
          "git_oid_cpy": {
            "ignore": true
          },
          "git_oid_fmt": {
            "ignore": true
          },
          "git_oid_fromraw": {
            "ignore": true
          },
          "git_oid_fromstr": {
            "jsFunctionName": "fromString",
            "isAsync": false
          },
          "git_oid_fromstrn": {
            "ignore": true
          },
          "git_oid_fromstrp": {
            "ignore": true
          },
          "git_oid_nfmt": {
            "ignore": true
          },
          "git_oid_pathfmt": {
            "ignore": true
          },
          "git_oid_shorten_add": {
            "ignore": true
          },
          "git_oid_shorten_free": {
            "ignore": true
          },
          "git_oid_shorten_new": {
            "ignore": true
          },
          "git_oid_tostr": {
            "ignore": true,
            "jsFunctionName": "toString"
          }
        },
        "fields": {
          "id": {
            "ignore": true
          }
        }
      },
      {
        "type": "const char *",
        "name": "path",
        "cType": "const char *",
        "cppFunctionName": "Path",
        "jsFunctionName": "path",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "git_off_t",
        "name": "size",
        "cType": "git_off_t",
        "cppFunctionName": "Size",
        "jsFunctionName": "size",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true
      },
      {
        "type": "uint32_t",
        "name": "flags",
        "cType": "uint32_t",
        "cppFunctionName": "Flags",
        "jsFunctionName": "flags",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint16_t",
        "name": "mode",
        "cType": "uint16_t",
        "cppFunctionName": "Mode",
        "jsFunctionName": "mode",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": []
    },
    "typeName": "diff_file",
    "cType": "git_diff_file",
    "functions": [],
    "cppClassName": "GitDiffFile",
    "jsClassName": "DiffFile",
    "filename": "diff_file",
    "isLibgitType": true,
    "dependencies": [
      "../include/oid.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "diff_file"
  },
  {
    "typeName": "diff_find",
    "type": "enum",
    "cType": "git_diff_find_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_DIFF_FIND_BY_CONFIG",
        "value": 0,
        "JsName": "BY_CONFIG"
      },
      {
        "name": "GIT_DIFF_FIND_RENAMES",
        "value": 1,
        "JsName": "RENAMES"
      },
      {
        "name": "GIT_DIFF_FIND_RENAMES_FROM_REWRITES",
        "value": 2,
        "JsName": "RENAMES_FROM_REWRITES"
      },
      {
        "name": "GIT_DIFF_FIND_COPIES",
        "value": 4,
        "JsName": "COPIES"
      },
      {
        "name": "GIT_DIFF_FIND_COPIES_FROM_UNMODIFIED",
        "value": 8,
        "JsName": "COPIES_FROM_UNMODIFIED"
      },
      {
        "name": "GIT_DIFF_FIND_REWRITES",
        "value": 16,
        "JsName": "REWRITES"
      },
      {
        "name": "GIT_DIFF_BREAK_REWRITES",
        "value": 32,
        "JsName": "BREAK_REWRITES"
      },
      {
        "name": "GIT_DIFF_FIND_AND_BREAK_REWRITES",
        "value": 48,
        "JsName": "AND_BREAK_REWRITES"
      },
      {
        "name": "GIT_DIFF_FIND_FOR_UNTRACKED",
        "value": 64,
        "JsName": "FOR_UNTRACKED"
      },
      {
        "name": "GIT_DIFF_FIND_ALL",
        "value": 255,
        "JsName": "ALL"
      },
      {
        "name": "GIT_DIFF_FIND_IGNORE_LEADING_WHITESPACE",
        "value": 0,
        "JsName": "IGNORE_LEADING_WHITESPACE"
      },
      {
        "name": "GIT_DIFF_FIND_IGNORE_WHITESPACE",
        "value": 4096,
        "JsName": "IGNORE_WHITESPACE"
      },
      {
        "name": "GIT_DIFF_FIND_DONT_IGNORE_WHITESPACE",
        "value": 8192,
        "JsName": "DONT_IGNORE_WHITESPACE"
      },
      {
        "name": "GIT_DIFF_FIND_EXACT_MATCH_ONLY",
        "value": 16384,
        "JsName": "EXACT_MATCH_ONLY"
      },
      {
        "name": "GIT_DIFF_BREAK_REWRITES_FOR_RENAMES_ONLY",
        "value": 32768,
        "JsName": "BREAK_REWRITES_FOR_RENAMES_ONLY"
      },
      {
        "name": "GIT_DIFF_FIND_REMOVE_UNMODIFIED",
        "value": 65536,
        "JsName": "REMOVE_UNMODIFIED"
      }
    ],
    "owner": "Diff",
    "JsName": "FIND"
  },
  {
    "typeName": "diff_flag",
    "type": "enum",
    "cType": "git_diff_flag_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_DIFF_FLAG_BINARY",
        "value": 1,
        "JsName": "BINARY"
      },
      {
        "name": "GIT_DIFF_FLAG_NOT_BINARY",
        "value": 2,
        "JsName": "NOT_BINARY"
      },
      {
        "name": "GIT_DIFF_FLAG_VALID_ID",
        "value": 4,
        "JsName": "VALID_ID"
      }
    ],
    "owner": "Diff",
    "JsName": "FLAG"
  },
  {
    "typeName": "diff_format",
    "type": "enum",
    "cType": "git_diff_format_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_DIFF_FORMAT_PATCH",
        "value": 1,
        "JsName": "PATCH"
      },
      {
        "name": "GIT_DIFF_FORMAT_PATCH_HEADER",
        "value": 2,
        "JsName": "PATCH_HEADER"
      },
      {
        "name": "GIT_DIFF_FORMAT_RAW",
        "value": 3,
        "JsName": "RAW"
      },
      {
        "name": "GIT_DIFF_FORMAT_NAME_ONLY",
        "value": 4,
        "JsName": "NAME_ONLY"
      },
      {
        "name": "GIT_DIFF_FORMAT_NAME_STATUS",
        "value": 5,
        "JsName": "NAME_STATUS"
      }
    ],
    "owner": "Diff",
    "JsName": "FORMAT"
  },
  {
    "typeName": "diff_format_email_flags",
    "type": "enum",
    "cType": "git_diff_format_email_flags_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_DIFF_FORMAT_EMAIL_NONE",
        "value": 0,
        "JsName": "FORMAT_EMAIL_NONE"
      },
      {
        "name": "GIT_DIFF_FORMAT_EMAIL_EXCLUDE_SUBJECT_PATCH_MARKER",
        "value": 1,
        "JsName": "FORMAT_EMAIL_EXCLUDE_SUBJECT_PATCH_MARKER"
      }
    ],
    "owner": "Diff",
    "JsName": "FORMAT_EMAIL_FLAGS"
  },
  {
    "type": "class",
    "value": "git_diff_hunk",
    "file": "diff.h",
    "used": {
      "returns": [],
      "needs": [
        "git_diff_print_callback__to_buf",
        "git_diff_print_callback__to_file_handle",
        "git_patch_get_hunk"
      ]
    },
    "fields": [
      {
        "name": "old_start",
        "type": "int",
        "cType": "int",
        "cppFunctionName": "OldStart",
        "jsFunctionName": "oldStart",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "old_lines",
        "type": "int",
        "cType": "int",
        "cppFunctionName": "OldLines",
        "jsFunctionName": "oldLines",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "new_start",
        "type": "int",
        "cType": "int",
        "cppFunctionName": "NewStart",
        "jsFunctionName": "newStart",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "new_lines",
        "type": "int",
        "cType": "int",
        "cppFunctionName": "NewLines",
        "jsFunctionName": "newLines",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "header_len",
        "type": "size_t",
        "cType": "size_t",
        "cppFunctionName": "HeaderLen",
        "jsFunctionName": "headerLen",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "header",
        "type": "char *",
        "cType": "char *",
        "cppFunctionName": "Header",
        "jsFunctionName": "header",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      }
    ],
    "typeName": "diff_hunk",
    "cType": "git_diff_hunk",
    "functions": [],
    "cppClassName": "GitDiffHunk",
    "jsClassName": "DiffHunk",
    "filename": "diff_hunk",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "diff_hunk"
  },
  {
    "type": "class",
    "value": "git_diff_line",
    "file": "diff.h",
    "used": {
      "returns": [],
      "needs": [
        "git_diff_print_callback__to_buf",
        "git_diff_print_callback__to_file_handle",
        "git_patch_get_line_in_hunk"
      ]
    },
    "fields": [
      {
        "name": "origin",
        "type": "int",
        "cType": "int",
        "cppFunctionName": "Origin",
        "jsFunctionName": "origin",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "old_lineno",
        "type": "int",
        "cType": "int",
        "cppFunctionName": "OldLineno",
        "jsFunctionName": "oldLineno",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "new_lineno",
        "type": "int",
        "cType": "int",
        "cppFunctionName": "NewLineno",
        "jsFunctionName": "newLineno",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "num_lines",
        "type": "int",
        "cType": "int",
        "cppFunctionName": "NumLines",
        "jsFunctionName": "numLines",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "content_len",
        "type": "size_t",
        "cType": "size_t",
        "cppFunctionName": "ContentLen",
        "jsFunctionName": "contentLen",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "content_offset",
        "type": "git_off_t",
        "cType": "git_off_t",
        "cppFunctionName": "ContentOffset",
        "jsFunctionName": "contentOffset",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true
      },
      {
        "name": "content",
        "type": "const char *",
        "cType": "const char *",
        "cppFunctionName": "Content",
        "jsFunctionName": "content",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      }
    ],
    "typeName": "diff_line",
    "cType": "git_diff_line",
    "functions": [],
    "cppClassName": "GitDiffLine",
    "jsClassName": "DiffLine",
    "filename": "diff_line",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "diff_line"
  },
  {
    "typeName": "diff_line",
    "type": "enum",
    "cType": "git_diff_line_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_DIFF_LINE_CONTEXT",
        "value": 32,
        "JsName": "CONTEXT"
      },
      {
        "name": "GIT_DIFF_LINE_ADDITION",
        "value": 43,
        "JsName": "ADDITION"
      },
      {
        "name": "GIT_DIFF_LINE_DELETION",
        "value": 45,
        "JsName": "DELETION"
      },
      {
        "name": "GIT_DIFF_LINE_CONTEXT_EOFNL",
        "value": 61,
        "JsName": "CONTEXT_EOFNL"
      },
      {
        "name": "GIT_DIFF_LINE_ADD_EOFNL",
        "value": 62,
        "JsName": "ADD_EOFNL"
      },
      {
        "name": "GIT_DIFF_LINE_DEL_EOFNL",
        "value": 60,
        "JsName": "DEL_EOFNL"
      },
      {
        "name": "GIT_DIFF_LINE_FILE_HDR",
        "value": 70,
        "JsName": "FILE_HDR"
      },
      {
        "name": "GIT_DIFF_LINE_HUNK_HDR",
        "value": 72,
        "JsName": "HUNK_HDR"
      },
      {
        "name": "GIT_DIFF_LINE_BINARY",
        "value": 66,
        "JsName": "BINARY"
      }
    ],
    "owner": "Diff",
    "JsName": "LINE"
  },
  {
    "typeName": "diff_option",
    "type": "enum",
    "cType": "git_diff_option_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_DIFF_NORMAL",
        "value": 0,
        "JsName": "NORMAL"
      },
      {
        "name": "GIT_DIFF_REVERSE",
        "value": 1,
        "JsName": "REVERSE"
      },
      {
        "name": "GIT_DIFF_INCLUDE_IGNORED",
        "value": 2,
        "JsName": "INCLUDE_IGNORED"
      },
      {
        "name": "GIT_DIFF_RECURSE_IGNORED_DIRS",
        "value": 4,
        "JsName": "RECURSE_IGNORED_DIRS"
      },
      {
        "name": "GIT_DIFF_INCLUDE_UNTRACKED",
        "value": 8,
        "JsName": "INCLUDE_UNTRACKED"
      },
      {
        "name": "GIT_DIFF_RECURSE_UNTRACKED_DIRS",
        "value": 16,
        "JsName": "RECURSE_UNTRACKED_DIRS"
      },
      {
        "name": "GIT_DIFF_INCLUDE_UNMODIFIED",
        "value": 32,
        "JsName": "INCLUDE_UNMODIFIED"
      },
      {
        "name": "GIT_DIFF_INCLUDE_TYPECHANGE",
        "value": 64,
        "JsName": "INCLUDE_TYPECHANGE"
      },
      {
        "name": "GIT_DIFF_INCLUDE_TYPECHANGE_TREES",
        "value": 128,
        "JsName": "INCLUDE_TYPECHANGE_TREES"
      },
      {
        "name": "GIT_DIFF_IGNORE_FILEMODE",
        "value": 256,
        "JsName": "IGNORE_FILEMODE"
      },
      {
        "name": "GIT_DIFF_IGNORE_SUBMODULES",
        "value": 512,
        "JsName": "IGNORE_SUBMODULES"
      },
      {
        "name": "GIT_DIFF_IGNORE_CASE",
        "value": 1024,
        "JsName": "IGNORE_CASE"
      },
      {
        "name": "GIT_DIFF_DISABLE_PATHSPEC_MATCH",
        "value": 4096,
        "JsName": "DISABLE_PATHSPEC_MATCH"
      },
      {
        "name": "GIT_DIFF_SKIP_BINARY_CHECK",
        "value": 8192,
        "JsName": "SKIP_BINARY_CHECK"
      },
      {
        "name": "GIT_DIFF_ENABLE_FAST_UNTRACKED_DIRS",
        "value": 16384,
        "JsName": "ENABLE_FAST_UNTRACKED_DIRS"
      },
      {
        "name": "GIT_DIFF_UPDATE_INDEX",
        "value": 32768,
        "JsName": "UPDATE_INDEX"
      },
      {
        "name": "GIT_DIFF_FORCE_TEXT",
        "value": 1048576,
        "JsName": "FORCE_TEXT"
      },
      {
        "name": "GIT_DIFF_FORCE_BINARY",
        "value": 2097152,
        "JsName": "FORCE_BINARY"
      },
      {
        "name": "GIT_DIFF_IGNORE_WHITESPACE",
        "value": 4194304,
        "JsName": "IGNORE_WHITESPACE"
      },
      {
        "name": "GIT_DIFF_IGNORE_WHITESPACE_CHANGE",
        "value": 8388608,
        "JsName": "IGNORE_WHITESPACE_CHANGE"
      },
      {
        "name": "GIT_DIFF_IGNORE_WHITESPACE_EOL",
        "value": 16777216,
        "JsName": "IGNORE_WHITESPACE_EOL"
      },
      {
        "name": "GIT_DIFF_SHOW_UNTRACKED_CONTENT",
        "value": 33554432,
        "JsName": "SHOW_UNTRACKED_CONTENT"
      },
      {
        "name": "GIT_DIFF_SHOW_UNMODIFIED",
        "value": 67108864,
        "JsName": "SHOW_UNMODIFIED"
      },
      {
        "name": "GIT_DIFF_PATIENCE",
        "value": 268435456,
        "JsName": "PATIENCE"
      },
      {
        "name": "GIT_DIFF_MINIMAL",
        "value": 536870912,
        "JsName": "MINIMAL"
      },
      {
        "name": "GIT_DIFF_SHOW_BINARY",
        "value": 1073741824,
        "JsName": "SHOW_BINARY"
      }
    ],
    "owner": "Diff",
    "JsName": "OPTION"
  },
  {
    "type": "struct",
    "value": "git_diff_options",
    "file": "diff.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint32_t",
        "name": "flags",
        "cType": "uint32_t",
        "cppFunctionName": "Flags",
        "jsFunctionName": "flags",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_submodule_ignore_t",
        "name": "ignore_submodules",
        "cType": "git_submodule_ignore_t",
        "cppFunctionName": "IgnoreSubmodules",
        "jsFunctionName": "ignoreSubmodules",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true,
        "isMask": true
      },
      {
        "type": "git_strarray",
        "name": "pathspec",
        "cType": "git_strarray",
        "cppFunctionName": "Pathspec",
        "jsFunctionName": "pathspec",
        "cppClassName": "GitStrarray",
        "jsClassName": "Strarray",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      },
      {
        "type": "git_diff_notify_cb",
        "name": "notify_cb",
        "cType": "git_diff_notify_cb",
        "cppFunctionName": "NotifyCb",
        "jsFunctionName": "notifyCb",
        "cppClassName": "GitDiffNotifyCb",
        "jsClassName": "DiffNotifyCb",
        "isCallbackFunction": true,
        "args": [
          {
            "name": "diff_so_far",
            "cType": "const git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "isLibgitType": true,
            "isEnum": false,
            "cDependencies": [
              "git2/sys/diff.h"
            ],
            "functions": {
              "git_diff_blob_to_buffer": {
                "ignore": true
              },
              "git_diff_blobs": {
                "ignore": true
              },
              "git_diff_buffers": {
                "ignore": true
              },
              "git_diff_commit_as_email": {
                "ignore": true
              },
              "git_diff_find_init_options": {
                "ignore": true
              },
              "git_diff_find_similar": {
                "ignore": true
              },
              "git_diff_foreach": {
                "ignore": true
              },
              "git_diff_format_email": {
                "ignore": true
              },
              "git_diff_format_email_init_options": {
                "ignore": true
              },
              "git_diff_free": {
                "ignore": true
              },
              "git_diff_get_stats": {
                "ignore": true
              },
              "git_diff_index_to_workdir": {
                "ignore": true
              },
              "git_diff_init_options": {
                "ignore": true
              },
              "git_diff_is_sorted_icase": {
                "ignore": true
              },
              "git_diff_merge": {
                "ignore": true
              },
              "git_diff_num_deltas_of_type": {
                "ignore": true
              },
              "git_diff_print": {
                "ignore": true
              },
              "git_diff_print_callback__to_buf": {
                "ignore": true
              },
              "git_diff_print_callback__to_file_handle": {
                "ignore": true
              },
              "git_diff_stats_deletions": {
                "ignore": true
              },
              "git_diff_stats_files_changed": {
                "ignore": true
              },
              "git_diff_stats_free": {
                "ignore": true
              },
              "git_diff_stats_insertions": {
                "ignore": true
              },
              "git_diff_stats_to_buf": {
                "ignore": true
              },
              "git_diff_status_char": {
                "ignore": true
              },
              "git_diff_tree_to_index": {
                "ignore": true
              },
              "git_diff_tree_to_tree": {
                "args": {
                  "opts": {
                    "isOptional": true
                  }
                }
              },
              "git_diff_tree_to_workdir": {
                "ignore": true
              },
              "git_diff_tree_to_workdir_with_index": {
                "ignore": true
              }
            }
          },
          {
            "name": "delta_to_add",
            "cType": "git_diff_delta *",
            "cppClassName": "GitDiffDelta",
            "jsClassName": "DiffDelta",
            "isLibgitType": true,
            "isEnum": false
          },
          {
            "name": "matched_pathspec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "Void",
            "jsClassName": "Void"
          }
        ],
        "returnType": "int",
        "returnNoResults": 1,
        "returnSuccess": 0,
        "returnError": -1
      },
      {
        "type": "void *",
        "name": "notify_payload",
        "cType": "void *",
        "cppFunctionName": "NotifyPayload",
        "jsFunctionName": "notifyPayload",
        "cppClassName": "Void",
        "jsClassName": "Void",
        "isCallbackFunction": false,
        "payloadFor": "notify_cb"
      },
      {
        "type": "uint16_t",
        "name": "context_lines",
        "cType": "uint16_t",
        "cppFunctionName": "ContextLines",
        "jsFunctionName": "contextLines",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint16_t",
        "name": "interhunk_lines",
        "cType": "uint16_t",
        "cppFunctionName": "InterhunkLines",
        "jsFunctionName": "interhunkLines",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint16_t",
        "name": "id_abbrev",
        "cType": "uint16_t",
        "cppFunctionName": "IdAbbrev",
        "jsFunctionName": "idAbbrev",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_off_t",
        "name": "max_size",
        "cType": "git_off_t",
        "cppFunctionName": "MaxSize",
        "jsFunctionName": "maxSize",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true
      },
      {
        "type": "const char *",
        "name": "old_prefix",
        "cType": "const char *",
        "cppFunctionName": "OldPrefix",
        "jsFunctionName": "oldPrefix",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "new_prefix",
        "cType": "const char *",
        "cppFunctionName": "NewPrefix",
        "jsFunctionName": "newPrefix",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_diff_blob_to_buffer",
        "git_diff_blobs",
        "git_diff_buffers",
        "git_diff_commit_as_email",
        "git_diff_index_to_workdir",
        "git_diff_init_options",
        "git_diff_tree_to_index",
        "git_diff_tree_to_tree",
        "git_diff_tree_to_workdir",
        "git_diff_tree_to_workdir_with_index",
        "git_patch_from_blob_and_buffer",
        "git_patch_from_blobs",
        "git_patch_from_buffers"
      ]
    },
    "typeName": "diff_options",
    "cType": "git_diff_options",
    "functions": [],
    "cppClassName": "GitDiffOptions",
    "jsClassName": "DiffOptions",
    "filename": "diff_options",
    "isLibgitType": true,
    "dependencies": [
      "../include/strarray.h",
      "../include/diff.h",
      "../include/diff_delta.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "diff_options"
  },
  {
    "type": "class",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "size_t",
        "name": "stat_calls",
        "cType": "size_t",
        "cppFunctionName": "StatCalls",
        "jsFunctionName": "statCalls",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "size_t",
        "name": "oid_calculations",
        "cType": "size_t",
        "cppFunctionName": "OidCalculations",
        "jsFunctionName": "oidCalculations",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "typeName": "diff_perfdata",
    "cType": "git_diff_perfdata",
    "functions": [],
    "cppClassName": "GitDiffPerfdata",
    "jsClassName": "DiffPerfdata",
    "filename": "diff_perfdata",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "cDependencies": [
      "git2/sys/diff.h"
    ],
    "name": "diff_perfdata"
  },
  {
    "type": "class",
    "value": "git_diff_stats",
    "file": "diff.h",
    "used": {
      "returns": [],
      "needs": [
        "git_diff_get_stats",
        "git_diff_stats_deletions",
        "git_diff_stats_files_changed",
        "git_diff_stats_free",
        "git_diff_stats_insertions",
        "git_diff_stats_to_buf"
      ]
    },
    "typeName": "diff_stats",
    "cType": "git_diff_stats",
    "functions": [],
    "cppClassName": "GitDiffStats",
    "jsClassName": "DiffStats",
    "filename": "diff_stats",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "diff_stats"
  },
  {
    "typeName": "diff_stats_format",
    "type": "enum",
    "cType": "git_diff_stats_format_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_DIFF_STATS_NONE",
        "value": 0,
        "JsName": "STATS_NONE"
      },
      {
        "name": "GIT_DIFF_STATS_FULL",
        "value": 1,
        "JsName": "STATS_FULL"
      },
      {
        "name": "GIT_DIFF_STATS_SHORT",
        "value": 2,
        "JsName": "STATS_SHORT"
      },
      {
        "name": "GIT_DIFF_STATS_NUMBER",
        "value": 4,
        "JsName": "STATS_NUMBER"
      },
      {
        "name": "GIT_DIFF_STATS_INCLUDE_SUMMARY",
        "value": 8,
        "JsName": "STATS_INCLUDE_SUMMARY"
      }
    ],
    "owner": "Diff",
    "JsName": "STATS_FORMAT"
  },
  {
    "type": "class",
    "value": "git_error",
    "file": "errors.h",
    "fields": [
      {
        "type": "char *",
        "name": "message",
        "cType": "char *",
        "cppFunctionName": "Message",
        "jsFunctionName": "message",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "int",
        "name": "klass",
        "cType": "int",
        "cppFunctionName": "Klass",
        "jsFunctionName": "klass",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [
        "giterr_last"
      ],
      "needs": [
        "giterr_detach"
      ]
    },
    "typeName": "error",
    "cType": "git_error",
    "functions": [],
    "cppClassName": "GitError",
    "jsClassName": "Error",
    "filename": "error",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "error"
  },
  {
    "typeName": "error",
    "type": "enum",
    "cType": "git_error_t",
    "isMask": false,
    "values": [
      {
        "name": "GITERR_NONE",
        "value": 0,
        "JsName": "GITERR_NONE"
      },
      {
        "name": "GITERR_NOMEMORY",
        "value": 1,
        "JsName": "GITERR_NOMEMORY"
      },
      {
        "name": "GITERR_OS",
        "value": 2,
        "JsName": "GITERR_OS"
      },
      {
        "name": "GITERR_INVALID",
        "value": 3,
        "JsName": "GITERR_INVALID"
      },
      {
        "name": "GITERR_REFERENCE",
        "value": 4,
        "JsName": "GITERR_REFERENCE"
      },
      {
        "name": "GITERR_ZLIB",
        "value": 5,
        "JsName": "GITERR_ZLIB"
      },
      {
        "name": "GITERR_REPOSITORY",
        "value": 6,
        "JsName": "GITERR_REPOSITORY"
      },
      {
        "name": "GITERR_CONFIG",
        "value": 7,
        "JsName": "GITERR_CONFIG"
      },
      {
        "name": "GITERR_REGEX",
        "value": 8,
        "JsName": "GITERR_REGEX"
      },
      {
        "name": "GITERR_ODB",
        "value": 9,
        "JsName": "GITERR_ODB"
      },
      {
        "name": "GITERR_INDEX",
        "value": 10,
        "JsName": "GITERR_INDEX"
      },
      {
        "name": "GITERR_OBJECT",
        "value": 11,
        "JsName": "GITERR_OBJECT"
      },
      {
        "name": "GITERR_NET",
        "value": 12,
        "JsName": "GITERR_NET"
      },
      {
        "name": "GITERR_TAG",
        "value": 13,
        "JsName": "GITERR_TAG"
      },
      {
        "name": "GITERR_TREE",
        "value": 14,
        "JsName": "GITERR_TREE"
      },
      {
        "name": "GITERR_INDEXER",
        "value": 15,
        "JsName": "GITERR_INDEXER"
      },
      {
        "name": "GITERR_SSL",
        "value": 16,
        "JsName": "GITERR_SSL"
      },
      {
        "name": "GITERR_SUBMODULE",
        "value": 17,
        "JsName": "GITERR_SUBMODULE"
      },
      {
        "name": "GITERR_THREAD",
        "value": 18,
        "JsName": "GITERR_THREAD"
      },
      {
        "name": "GITERR_STASH",
        "value": 19,
        "JsName": "GITERR_STASH"
      },
      {
        "name": "GITERR_CHECKOUT",
        "value": 20,
        "JsName": "GITERR_CHECKOUT"
      },
      {
        "name": "GITERR_FETCHHEAD",
        "value": 21,
        "JsName": "GITERR_FETCHHEAD"
      },
      {
        "name": "GITERR_MERGE",
        "value": 22,
        "JsName": "GITERR_MERGE"
      },
      {
        "name": "GITERR_SSH",
        "value": 23,
        "JsName": "GITERR_SSH"
      },
      {
        "name": "GITERR_FILTER",
        "value": 24,
        "JsName": "GITERR_FILTER"
      },
      {
        "name": "GITERR_REVERT",
        "value": 25,
        "JsName": "GITERR_REVERT"
      },
      {
        "name": "GITERR_CALLBACK",
        "value": 26,
        "JsName": "GITERR_CALLBACK"
      },
      {
        "name": "GITERR_CHERRYPICK",
        "value": 27,
        "JsName": "GITERR_CHERRYPICK"
      }
    ],
    "owner": "Error",
    "JsName": "ERROR"
  },
  {
    "typeName": "error_code",
    "type": "enum",
    "cType": "git_error_code",
    "isMask": false,
    "values": [
      {
        "name": "GIT_OK",
        "value": 0,
        "JsName": "OK"
      },
      {
        "name": "GIT_ERROR",
        "value": -1,
        "JsName": "ERROR"
      },
      {
        "name": "GIT_ENOTFOUND",
        "value": -3,
        "JsName": "ENOTFOUND"
      },
      {
        "name": "GIT_EEXISTS",
        "value": -4,
        "JsName": "EEXISTS"
      },
      {
        "name": "GIT_EAMBIGUOUS",
        "value": -5,
        "JsName": "EAMBIGUOUS"
      },
      {
        "name": "GIT_EBUFS",
        "value": -6,
        "JsName": "EBUFS"
      },
      {
        "name": "GIT_EUSER",
        "value": -7,
        "JsName": "EUSER"
      },
      {
        "name": "GIT_EBAREREPO",
        "value": -8,
        "JsName": "EBAREREPO"
      },
      {
        "name": "GIT_EUNBORNBRANCH",
        "value": -9,
        "JsName": "EUNBORNBRANCH"
      },
      {
        "name": "GIT_EUNMERGED",
        "value": -10,
        "JsName": "EUNMERGED"
      },
      {
        "name": "GIT_ENONFASTFORWARD",
        "value": -11,
        "JsName": "ENONFASTFORWARD"
      },
      {
        "name": "GIT_EINVALIDSPEC",
        "value": -12,
        "JsName": "EINVALIDSPEC"
      },
      {
        "name": "GIT_EMERGECONFLICT",
        "value": -13,
        "JsName": "EMERGECONFLICT"
      },
      {
        "name": "GIT_ELOCKED",
        "value": -14,
        "JsName": "ELOCKED"
      },
      {
        "name": "GIT_EMODIFIED",
        "value": -15,
        "JsName": "EMODIFIED"
      },
      {
        "name": "GIT_PASSTHROUGH",
        "value": -30,
        "JsName": "PASSTHROUGH"
      },
      {
        "name": "GIT_ITEROVER",
        "value": -31,
        "JsName": "ITEROVER"
      }
    ],
    "owner": "Error",
    "JsName": "CODE"
  },
  {
    "typeName": "feature",
    "type": "enum",
    "cType": "git_feature_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_FEATURE_THREADS",
        "value": 1,
        "JsName": "THREADS"
      },
      {
        "name": "GIT_FEATURE_HTTPS",
        "value": 2,
        "JsName": "HTTPS"
      },
      {
        "name": "GIT_FEATURE_SSH",
        "value": 4,
        "JsName": "SSH"
      }
    ],
    "owner": "Enums",
    "JsName": "FEATURE"
  },
  {
    "typeName": "filemode",
    "type": "enum",
    "cType": "git_filemode_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_FILEMODE_NEW",
        "value": 0,
        "JsName": "NEW"
      },
      {
        "name": "GIT_FILEMODE_TREE",
        "value": 16384,
        "JsName": "TREE"
      },
      {
        "name": "GIT_FILEMODE_BLOB",
        "value": 33188,
        "JsName": "BLOB"
      },
      {
        "name": "GIT_FILEMODE_BLOB_EXECUTABLE",
        "value": 33261,
        "JsName": "BLOB_EXECUTABLE"
      },
      {
        "name": "GIT_FILEMODE_LINK",
        "value": 40960,
        "JsName": "LINK"
      },
      {
        "name": "GIT_FILEMODE_COMMIT",
        "value": 57344,
        "JsName": "COMMIT"
      }
    ],
    "owner": "Enums",
    "JsName": "FILEMODE"
  },
  {
    "type": "class",
    "value": "git_filter",
    "file": "sys/filter.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "attributes",
        "cType": "const char *",
        "cppFunctionName": "Attributes",
        "jsFunctionName": "attributes",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [
        "git_filter_lookup"
      ],
      "needs": [
        "git_filter_list_push",
        "git_filter_register"
      ]
    },
    "typeName": "filter",
    "cType": "git_filter",
    "functions": [
      {
        "type": "function",
        "file": "sys/filter.h",
        "args": [
          {
            "name": "fl",
            "type": "const git_filter_list *",
            "comment": "A filter list",
            "cType": "const git_filter_list *",
            "cppClassName": "GitFilterList",
            "jsClassName": "FilterList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " The number of filters in the list",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "filter",
        "cFunctionName": "git_filter_list_length",
        "cppFunctionName": "ListLength",
        "jsFunctionName": "listLength",
        "cppClassName": "GitFilter"
      },
      {
        "type": "function",
        "file": "sys/filter.h",
        "args": [
          {
            "name": "out",
            "type": "git_filter_list **",
            "comment": null,
            "cType": "git_filter_list **",
            "cppClassName": "GitFilterList",
            "jsClassName": "FilterList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": null,
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "mode",
            "type": "git_filter_mode_t",
            "comment": null,
            "cType": "git_filter_mode_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": true,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "options",
            "type": "uint32_t",
            "comment": null,
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "filter",
        "cFunctionName": "git_filter_list_new",
        "cppFunctionName": "ListNew",
        "jsFunctionName": "listNew",
        "isAsync": true,
        "cppClassName": "GitFilter"
      },
      {
        "type": "function",
        "file": "sys/filter.h",
        "args": [
          {
            "name": "name",
            "type": "const char *",
            "comment": "The name of the filter",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "git_filter *",
          "comment": " Pointer to the filter object or NULL if not found",
          "cType": "git_filter *",
          "cppClassName": "GitFilter",
          "jsClassName": "Filter",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_filter_list_apply_to_blob": {
              "ignore": true
            },
            "git_filter_list_apply_to_data": {
              "ignore": true
            },
            "git_filter_list_apply_to_file": {
              "ignore": true
            },
            "git_filter_list_free": {
              "ignore": true
            },
            "git_filter_list_load": {
              "ignore": true
            },
            "git_filter_list_push": {
              "ignore": true
            },
            "git_filter_source_filemode": {
              "ignore": true
            },
            "git_filter_source_id": {
              "ignore": true
            },
            "git_filter_source_mode": {
              "ignore": true
            },
            "git_filter_source_options": {
              "ignore": true
            },
            "git_filter_source_path": {
              "ignore": true
            },
            "git_filter_source_repo": {
              "ignore": true
            }
          },
          "fields": {
            "initialize": {
              "ignore": true
            },
            "shutdown": {
              "ignore": true
            },
            "check": {
              "ignore": true
            },
            "apply": {
              "ignore": true
            },
            "cleanup": {
              "ignore": true
            }
          },
          "cDependencies": [
            "git2/sys/filter.h"
          ],
          "isReturn": false,
          "isSelf": true
        },
        "group": "filter",
        "cFunctionName": "git_filter_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "isPrototypeMethod": true,
        "cppClassName": "GitFilter"
      },
      {
        "type": "function",
        "file": "sys/filter.h",
        "args": [
          {
            "name": "name",
            "type": "const char *",
            "comment": "A name by which the filter can be referenced.  Attempting\n \t\t\tto register with an in-use name will return GIT_EEXISTS.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "filter",
            "type": "git_filter *",
            "comment": "The filter definition.  This pointer will be stored as is\n \t\t\tby libgit2 so it must be a durable allocation (either static\n \t\t\tor on the heap).",
            "cType": "git_filter *",
            "cppClassName": "GitFilter",
            "jsClassName": "Filter",
            "isLibgitType": true,
            "isEnum": false,
            "fields": {
              "initialize": {
                "ignore": true
              },
              "shutdown": {
                "ignore": true
              },
              "check": {
                "ignore": true
              },
              "apply": {
                "ignore": true
              },
              "cleanup": {
                "ignore": true
              }
            },
            "cDependencies": [
              "git2/sys/filter.h"
            ],
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "priority",
            "type": "int",
            "comment": "The priority for filter application",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on successful registry, error code \n<\n0 on failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "filter",
        "cFunctionName": "git_filter_register",
        "cppFunctionName": "Register",
        "jsFunctionName": "register",
        "isPrototypeMethod": true,
        "cppClassName": "GitFilter"
      },
      {
        "type": "function",
        "file": "sys/filter.h",
        "args": [
          {
            "name": "name",
            "type": "const char *",
            "comment": "The name under which the filter was registered",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, error code \n<\n0 on failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "filter",
        "cFunctionName": "git_filter_unregister",
        "cppFunctionName": "Unregister",
        "jsFunctionName": "unregister",
        "cppClassName": "GitFilter"
      }
    ],
    "cppClassName": "GitFilter",
    "jsClassName": "Filter",
    "filename": "filter",
    "isLibgitType": true,
    "dependencies": [
      "../include/filter_list.h",
      "../include/repository.h",
      "../include/filter.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "cDependencies": [
      "git2/sys/filter.h"
    ],
    "name": "filter"
  },
  {
    "type": "class",
    "value": "git_filter_list",
    "file": "filter.h",
    "used": {
      "returns": [],
      "needs": [
        "git_filter_list_apply_to_blob",
        "git_filter_list_apply_to_data",
        "git_filter_list_apply_to_file",
        "git_filter_list_free",
        "git_filter_list_length",
        "git_filter_list_load",
        "git_filter_list_new",
        "git_filter_list_push"
      ]
    },
    "typeName": "filter_list",
    "cType": "git_filter_list",
    "functions": [],
    "cppClassName": "GitFilterList",
    "jsClassName": "FilterList",
    "filename": "filter_list",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "filter_list"
  },
  {
    "typeName": "filter_mode",
    "type": "enum",
    "cType": "git_filter_mode_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_FILTER_TO_WORKTREE",
        "value": 0,
        "JsName": "TO_WORKTREE"
      },
      {
        "name": "GIT_FILTER_SMUDGE",
        "value": 0,
        "JsName": "SMUDGE"
      },
      {
        "name": "GIT_FILTER_TO_ODB",
        "value": 1,
        "JsName": "TO_ODB"
      },
      {
        "name": "GIT_FILTER_CLEAN",
        "value": 1,
        "JsName": "CLEAN"
      }
    ],
    "owner": "Filter",
    "JsName": "MODE"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "errors.h",
        "args": [],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "giterr",
        "cFunctionName": "giterr_clear",
        "cppFunctionName": "GiterrClear",
        "jsFunctionName": "errClear",
        "cppClassName": "GitGiterr"
      },
      {
        "type": "function",
        "file": "errors.h",
        "args": [
          {
            "name": "cpy",
            "type": "git_error *",
            "comment": null,
            "cType": "git_error *",
            "cppClassName": "GitError",
            "jsClassName": "Error",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "giterr",
        "cFunctionName": "giterr_detach",
        "cppFunctionName": "GiterrDetach",
        "jsFunctionName": "errDetach",
        "cppClassName": "GitGiterr"
      },
      {
        "type": "function",
        "file": "errors.h",
        "args": [],
        "return": {
          "type": "const git_error *",
          "comment": " A git_error object.",
          "cType": "const git_error *",
          "cppClassName": "GitError",
          "jsClassName": "Error",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "giterr",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#giterr_last-27"
          ],
          "network/clone.c": [
            "ex/v0.21.2/network/clone.html#giterr_last-2"
          ],
          "network/git2.c": [
            "ex/v0.21.2/network/git2.html#giterr_last-1",
            "ex/v0.21.2/network/git2.html#giterr_last-2"
          ]
        },
        "cFunctionName": "giterr_last",
        "cppFunctionName": "GiterrLast",
        "jsFunctionName": "errLast",
        "cppClassName": "GitGiterr"
      },
      {
        "type": "function",
        "file": "errors.h",
        "args": [],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "giterr",
        "cFunctionName": "giterr_set_oom",
        "cppFunctionName": "GiterrSetOom",
        "jsFunctionName": "errSetOom",
        "cppClassName": "GitGiterr"
      },
      {
        "type": "function",
        "file": "errors.h",
        "args": [
          {
            "name": "error_class",
            "type": "int",
            "comment": "One of the `git_error_t` enum above describing the\n                    general subsystem that is responsible for the error.",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "string",
            "type": "const char *",
            "comment": "The formatted error message to keep",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "giterr",
        "cFunctionName": "giterr_set_str",
        "cppFunctionName": "GiterrSetStr",
        "jsFunctionName": "errSetStr",
        "cppClassName": "GitGiterr"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "giterr",
    "cppClassName": "GitGiterr",
    "jsClassName": "Giterr",
    "filename": "giterr",
    "isLibgitType": true,
    "dependencies": [
      "../include/error.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "giterr"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "graph.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": null,
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "commit",
            "type": "const git_oid *",
            "comment": "a previously loaded commit.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ancestor",
            "type": "const git_oid *",
            "comment": "a potential ancestor commit.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the given commit is a descendant of the potential ancestor,\n 0 if not, error code otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "graph",
        "cFunctionName": "git_graph_descendant_of",
        "cppFunctionName": "DescendantOf",
        "jsFunctionName": "descendantOf",
        "cppClassName": "GitGraph"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "graph",
    "cppClassName": "GitGraph",
    "jsClassName": "Graph",
    "filename": "graph",
    "isLibgitType": true,
    "dependencies": [
      "../include/repository.h",
      "../include/oid.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "graph"
  },
  {
    "typeName": "idxentry_extended_flag",
    "type": "enum",
    "cType": "git_idxentry_extended_flag_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_IDXENTRY_INTENT_TO_ADD",
        "value": 8192,
        "JsName": "IDXENTRY_INTENT_TO_ADD"
      },
      {
        "name": "GIT_IDXENTRY_SKIP_WORKTREE",
        "value": 16384,
        "JsName": "IDXENTRY_SKIP_WORKTREE"
      },
      {
        "name": "GIT_IDXENTRY_EXTENDED2",
        "value": 32768,
        "JsName": "IDXENTRY_EXTENDED2"
      },
      {
        "name": "GIT_IDXENTRY_EXTENDED_FLAGS",
        "value": 24576,
        "JsName": "S"
      },
      {
        "name": "GIT_IDXENTRY_UPDATE",
        "value": 1,
        "JsName": "IDXENTRY_UPDATE"
      },
      {
        "name": "GIT_IDXENTRY_REMOVE",
        "value": 2,
        "JsName": "IDXENTRY_REMOVE"
      },
      {
        "name": "GIT_IDXENTRY_UPTODATE",
        "value": 4,
        "JsName": "IDXENTRY_UPTODATE"
      },
      {
        "name": "GIT_IDXENTRY_ADDED",
        "value": 8,
        "JsName": "IDXENTRY_ADDED"
      },
      {
        "name": "GIT_IDXENTRY_HASHED",
        "value": 16,
        "JsName": "IDXENTRY_HASHED"
      },
      {
        "name": "GIT_IDXENTRY_UNHASHED",
        "value": 32,
        "JsName": "IDXENTRY_UNHASHED"
      },
      {
        "name": "GIT_IDXENTRY_WT_REMOVE",
        "value": 64,
        "JsName": "IDXENTRY_WT_REMOVE"
      },
      {
        "name": "GIT_IDXENTRY_CONFLICTED",
        "value": 128,
        "JsName": "IDXENTRY_CONFLICTED"
      },
      {
        "name": "GIT_IDXENTRY_UNPACKED",
        "value": 256,
        "JsName": "IDXENTRY_UNPACKED"
      },
      {
        "name": "GIT_IDXENTRY_NEW_SKIP_WORKTREE",
        "value": 512,
        "JsName": "IDXENTRY_NEW_SKIP_WORKTREE"
      }
    ],
    "owner": "Enums",
    "JsName": "IDXENTRY_EXTENDED_FLAG"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "ignore.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository to add ignore rules to.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "rules",
            "type": "const char *",
            "comment": "Text of rules, a la the contents of a .gitignore file.\n              It is okay to have multiple rules in the text; if so,\n              each rule should be terminated with a newline.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "ignore",
        "cFunctionName": "git_ignore_add_rule",
        "cppFunctionName": "AddRule",
        "jsFunctionName": "addRule",
        "cppClassName": "GitIgnore"
      },
      {
        "type": "function",
        "file": "ignore.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository to remove ignore rules from.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "ignore",
        "cFunctionName": "git_ignore_clear_internal_rules",
        "cppFunctionName": "ClearInternalRules",
        "jsFunctionName": "clearInternalRules",
        "cppClassName": "GitIgnore"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "ignore",
    "cppClassName": "GitIgnore",
    "jsClassName": "Ignore",
    "filename": "ignore",
    "isLibgitType": true,
    "dependencies": [
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "ignore"
  },
  {
    "type": "class",
    "value": "git_index",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_checkout_index",
        "git_cherry_pick_commit",
        "git_diff_index_to_workdir",
        "git_diff_tree_to_index",
        "git_index_add",
        "git_index_add_all",
        "git_index_add_bypath",
        "git_index_caps",
        "git_index_clear",
        "git_index_conflict_add",
        "git_index_conflict_cleanup",
        "git_index_conflict_get",
        "git_index_conflict_iterator_new",
        "git_index_conflict_remove",
        "git_index_entrycount",
        "git_index_find",
        "git_index_free",
        "git_index_get_byindex",
        "git_index_get_bypath",
        "git_index_has_conflicts",
        "git_index_new",
        "git_index_open",
        "git_index_owner",
        "git_index_path",
        "git_index_read",
        "git_index_read_tree",
        "git_index_remove",
        "git_index_remove_all",
        "git_index_remove_bypath",
        "git_index_remove_directory",
        "git_index_set_caps",
        "git_index_update_all",
        "git_index_write",
        "git_index_write_tree",
        "git_index_write_tree_to",
        "git_merge_commits",
        "git_merge_trees",
        "git_pathspec_match_index",
        "git_repository_index",
        "git_revert_commit"
      ]
    },
    "typeName": "index",
    "cType": "git_index",
    "functions": [
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "source_entry",
            "type": "const git_index_entry *",
            "comment": "new entry object",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "isLibgitType": true,
            "isEnum": false,
            "ignore": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_add",
        "cppFunctionName": "Add",
        "jsFunctionName": "add",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "filename to add",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_add_bypath",
        "cppFunctionName": "AddBypath",
        "jsFunctionName": "addByPath",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "const git_index *",
            "comment": "An existing index object",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " A combination of GIT_INDEXCAP values",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_caps",
        "cppFunctionName": "Caps",
        "jsFunctionName": "caps",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, error code \n<\n 0 on failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_clear",
        "cppFunctionName": "Clear",
        "jsFunctionName": "clear",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "ancestor_entry",
            "type": "const git_index_entry *",
            "comment": "the entry data for the ancestor of the conflict",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "isLibgitType": true,
            "isEnum": false,
            "ignore": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "our_entry",
            "type": "const git_index_entry *",
            "comment": "the entry data for our side of the merge conflict",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "isLibgitType": true,
            "isEnum": false,
            "ignore": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "their_entry",
            "type": "const git_index_entry *",
            "comment": "the entry data for their side of the merge conflict",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "isLibgitType": true,
            "isEnum": false,
            "ignore": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_conflict_add",
        "cppFunctionName": "ConflictAdd",
        "jsFunctionName": "conflictAdd",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_conflict_cleanup",
        "cppFunctionName": "ConflictCleanup",
        "jsFunctionName": "conflictCleanup",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "path to remove conflicts for",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_conflict_remove",
        "cppFunctionName": "ConflictRemove",
        "jsFunctionName": "conflictRemove",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_index_entry *",
            "comment": "The entry",
            "cType": "const git_index_entry *",
            "cppClassName": "GitIndexEntry",
            "jsClassName": "IndexEntry",
            "isLibgitType": true,
            "isEnum": false,
            "ignore": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " the stage number",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_entry_stage",
        "cppFunctionName": "EntryStage",
        "jsFunctionName": "entryStage",
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "const git_index *",
            "comment": "an existing index object",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " integer of count of current entries",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_index_entrycount-29"
          ]
        },
        "cFunctionName": "git_index_entrycount",
        "cppFunctionName": "Entrycount",
        "jsFunctionName": "size",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "type": "size_t",
            "comment": "the position of the entry",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_index_entry *",
          "comment": " a pointer to the entry; NULL if out of bounds",
          "cType": "const git_index_entry *",
          "cppClassName": "GitIndexEntry",
          "jsClassName": "IndexEntry",
          "isLibgitType": true,
          "isEnum": false,
          "ignore": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_index_get_byindex-30"
          ]
        },
        "cFunctionName": "git_index_get_byindex",
        "cppFunctionName": "GetByindex",
        "jsFunctionName": "entry",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "path to search",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "stage",
            "type": "int",
            "comment": "stage to search",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_index_entry *",
          "comment": " a pointer to the entry; NULL if it was not found",
          "cType": "const git_index_entry *",
          "cppClassName": "GitIndexEntry",
          "jsClassName": "IndexEntry",
          "isLibgitType": true,
          "isEnum": false,
          "ignore": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_get_bypath",
        "cppFunctionName": "GetBypath",
        "jsFunctionName": "getBypath",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "const git_index *",
            "comment": null,
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if at least one conflict is found, 0 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_has_conflicts",
        "cppFunctionName": "HasConflicts",
        "jsFunctionName": "hasConflicts",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "out",
            "type": "git_index **",
            "comment": "the pointer for the new index",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "index_path",
            "type": "const char *",
            "comment": "the path to the index file in disk",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_open",
        "cppFunctionName": "Open",
        "jsFunctionName": "open",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "const git_index *",
            "comment": "The index",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " A pointer to the repository",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "const git_index *",
            "comment": "an existing index object",
            "cType": "const git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " path to index file or NULL for in-memory index",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_path",
        "cppFunctionName": "Path",
        "jsFunctionName": "path",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "force",
            "type": "int",
            "comment": "if true, always reload, vs. only read if file has changed",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false,
            "isOptional": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_read",
        "cppFunctionName": "Read",
        "jsFunctionName": "read",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": "tree to read",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_read_tree",
        "cppFunctionName": "ReadTree",
        "jsFunctionName": "readTree",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "path to search",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "stage",
            "type": "int",
            "comment": "stage to search",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_remove",
        "cppFunctionName": "Remove",
        "jsFunctionName": "remove",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "filename to remove",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_remove_bypath",
        "cppFunctionName": "RemoveBypath",
        "jsFunctionName": "removeByPath",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "dir",
            "type": "const char *",
            "comment": "container directory path",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "stage",
            "type": "int",
            "comment": "stage to search",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_remove_directory",
        "cppFunctionName": "RemoveDirectory",
        "jsFunctionName": "removeDirectory",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "An existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "caps",
            "type": "int",
            "comment": "A combination of GIT_INDEXCAP values",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, -1 on failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_set_caps",
        "cppFunctionName": "SetCaps",
        "jsFunctionName": "setCaps",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "index",
            "type": "git_index *",
            "comment": "an existing index object",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "cFunctionName": "git_index_write",
        "cppFunctionName": "Write",
        "jsFunctionName": "write",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      },
      {
        "type": "function",
        "file": "index.h",
        "args": [
          {
            "name": "out",
            "type": "git_oid *",
            "comment": "Pointer where to store the OID of the written tree",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "index",
            "type": "git_index *",
            "comment": "Index to write",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EUNMERGED when the index is not clean\n or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "index",
        "examples": {
          "init.c": [
            "ex/v0.21.2/init.html#git_index_write_tree-3"
          ]
        },
        "cFunctionName": "git_index_write_tree",
        "cppFunctionName": "WriteTree",
        "jsFunctionName": "writeTree",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitIndex"
      }
    ],
    "cppClassName": "GitIndex",
    "jsClassName": "Index",
    "filename": "index",
    "isLibgitType": true,
    "dependencies": [
      "../include/index.h",
      "../include/index_entry.h",
      "../include/repository.h",
      "../include/tree.h",
      "../include/oid.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_index_free",
    "name": "index"
  },
  {
    "typeName": "index_add_option",
    "type": "enum",
    "cType": "git_index_add_option_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_INDEX_ADD_DEFAULT",
        "value": 0,
        "JsName": "ADD_DEFAULT"
      },
      {
        "name": "GIT_INDEX_ADD_FORCE",
        "value": 1,
        "JsName": "ADD_FORCE"
      },
      {
        "name": "GIT_INDEX_ADD_DISABLE_PATHSPEC_MATCH",
        "value": 2,
        "JsName": "ADD_DISABLE_PATHSPEC_MATCH"
      },
      {
        "name": "GIT_INDEX_ADD_CHECK_PATHSPEC",
        "value": 4,
        "JsName": "ADD_CHECK_PATHSPEC"
      }
    ],
    "owner": "Index",
    "JsName": "ADD_OPTION"
  },
  {
    "type": "class",
    "value": "git_index_conflict_iterator",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_index_conflict_iterator_free",
        "git_index_conflict_iterator_new",
        "git_index_conflict_next"
      ]
    },
    "typeName": "index_conflict_iterator",
    "cType": "git_index_conflict_iterator",
    "functions": [],
    "cppClassName": "GitIndexConflictIterator",
    "jsClassName": "IndexConflictIterator",
    "filename": "index_conflict_iterator",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "index_conflict_iterator"
  },
  {
    "type": "class",
    "value": "git_index_entry",
    "file": "index.h",
    "fields": [
      {
        "type": "git_index_time",
        "name": "ctime",
        "cType": "git_index_time",
        "cppFunctionName": "Ctime",
        "jsFunctionName": "ctime",
        "cppClassName": "GitIndexTime",
        "jsClassName": "IndexTime",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      },
      {
        "type": "git_index_time",
        "name": "mtime",
        "cType": "git_index_time",
        "cppFunctionName": "Mtime",
        "jsFunctionName": "mtime",
        "cppClassName": "GitIndexTime",
        "jsClassName": "IndexTime",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      },
      {
        "type": "unsigned int",
        "name": "dev",
        "cType": "unsigned int",
        "cppFunctionName": "Dev",
        "jsFunctionName": "dev",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "ino",
        "cType": "unsigned int",
        "cppFunctionName": "Ino",
        "jsFunctionName": "ino",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "mode",
        "cType": "unsigned int",
        "cppFunctionName": "Mode",
        "jsFunctionName": "mode",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "uid",
        "cType": "unsigned int",
        "cppFunctionName": "Uid",
        "jsFunctionName": "uid",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "gid",
        "cType": "unsigned int",
        "cppFunctionName": "Gid",
        "jsFunctionName": "gid",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_off_t",
        "name": "file_size",
        "cType": "git_off_t",
        "cppFunctionName": "FileSize",
        "jsFunctionName": "fileSize",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true
      },
      {
        "type": "git_oid",
        "name": "id",
        "cType": "git_oid",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "cppClassName": "GitOid",
        "jsClassName": "Oid",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "shouldAlloc": true,
        "functions": {
          "git_oid_cpy": {
            "ignore": true
          },
          "git_oid_fmt": {
            "ignore": true
          },
          "git_oid_fromraw": {
            "ignore": true
          },
          "git_oid_fromstr": {
            "jsFunctionName": "fromString",
            "isAsync": false
          },
          "git_oid_fromstrn": {
            "ignore": true
          },
          "git_oid_fromstrp": {
            "ignore": true
          },
          "git_oid_nfmt": {
            "ignore": true
          },
          "git_oid_pathfmt": {
            "ignore": true
          },
          "git_oid_shorten_add": {
            "ignore": true
          },
          "git_oid_shorten_free": {
            "ignore": true
          },
          "git_oid_shorten_new": {
            "ignore": true
          },
          "git_oid_tostr": {
            "ignore": true,
            "jsFunctionName": "toString"
          }
        },
        "fields": {
          "id": {
            "ignore": true
          }
        }
      },
      {
        "type": "unsigned short",
        "name": "flags",
        "cType": "unsigned short",
        "cppFunctionName": "Flags",
        "jsFunctionName": "flags",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned short",
        "name": "flags_extended",
        "cType": "unsigned short",
        "cppFunctionName": "FlagsExtended",
        "jsFunctionName": "flagsExtended",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "path",
        "cType": "const char *",
        "cppFunctionName": "Path",
        "jsFunctionName": "path",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [
        "git_index_get_byindex",
        "git_index_get_bypath"
      ],
      "needs": [
        "git_index_add",
        "git_index_conflict_add",
        "git_index_conflict_get",
        "git_index_conflict_next",
        "git_index_entry_stage",
        "git_merge_file_from_index"
      ]
    },
    "typeName": "index_entry",
    "cType": "git_index_entry",
    "functions": [],
    "cppClassName": "GitIndexEntry",
    "jsClassName": "IndexEntry",
    "filename": "index_entry",
    "isLibgitType": true,
    "dependencies": [
      "../include/index_time.h",
      "../include/oid.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "ignore": false,
    "name": "index_entry"
  },
  {
    "type": "class",
    "value": "git_index_time",
    "file": "index.h",
    "fields": [
      {
        "type": "git_time_t",
        "name": "seconds",
        "cType": "git_time_t",
        "cppFunctionName": "Seconds",
        "jsFunctionName": "seconds",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true
      },
      {
        "type": "unsigned int",
        "name": "nanoseconds",
        "cType": "unsigned int",
        "cppFunctionName": "Nanoseconds",
        "jsFunctionName": "nanoseconds",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": []
    },
    "typeName": "index_time",
    "cType": "git_index_time",
    "functions": [],
    "cppClassName": "GitIndexTime",
    "jsClassName": "IndexTime",
    "filename": "index_time",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "index_time"
  },
  {
    "typeName": "indexcap",
    "type": "enum",
    "cType": "git_indexcap_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_INDEXCAP_IGNORE_CASE",
        "value": 1,
        "JsName": "IGNORE_CASE"
      },
      {
        "name": "GIT_INDEXCAP_NO_FILEMODE",
        "value": 2,
        "JsName": "NO_FILEMODE"
      },
      {
        "name": "GIT_INDEXCAP_NO_SYMLINKS",
        "value": 4,
        "JsName": "NO_SYMLINKS"
      },
      {
        "name": "GIT_INDEXCAP_FROM_OWNER",
        "value": -1,
        "JsName": "FROM_OWNER"
      }
    ],
    "owner": "Index",
    "JsName": "CAP"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "indexer.h",
        "args": [
          {
            "name": "idx",
            "type": "git_indexer *",
            "comment": "the indexer",
            "cType": "git_indexer *",
            "cppClassName": "GitIndexer",
            "jsClassName": "Indexer",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "stats",
            "type": "git_transfer_progress *",
            "comment": null,
            "cType": "git_transfer_progress *",
            "cppClassName": "GitTransferProgress",
            "jsClassName": "TransferProgress",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "indexer",
        "examples": {
          "network/index-pack.c": [
            "ex/v0.21.2/network/index-pack.html#git_indexer_commit-3"
          ]
        },
        "cFunctionName": "git_indexer_commit",
        "cppFunctionName": "Commit",
        "jsFunctionName": "commit",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndexer"
      },
      {
        "type": "function",
        "file": "indexer.h",
        "args": [
          {
            "name": "idx",
            "type": "const git_indexer *",
            "comment": "the indexer instance",
            "cType": "const git_indexer *",
            "cppClassName": "GitIndexer",
            "jsClassName": "Indexer",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": null,
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "indexer",
        "examples": {
          "network/index-pack.c": [
            "ex/v0.21.2/network/index-pack.html#git_indexer_hash-4"
          ]
        },
        "cFunctionName": "git_indexer_hash",
        "cppFunctionName": "Hash",
        "jsFunctionName": "hash",
        "isPrototypeMethod": true,
        "cppClassName": "GitIndexer"
      }
    ],
    "type": "class",
    "cType": "git_indexer",
    "typeName": "indexer",
    "cppClassName": "GitIndexer",
    "jsClassName": "Indexer",
    "filename": "indexer",
    "isLibgitType": true,
    "dependencies": [
      "../include/indexer.h",
      "../include/transfer_progress.h",
      "../include/oid.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "freeFunctionName": "git_indexer_free",
    "name": "indexer"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "common.h",
        "args": [],
        "return": {
          "type": "int",
          "comment": " A combination of GIT_FEATURE_* values.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "libgit2",
        "cFunctionName": "git_libgit2_features",
        "cppFunctionName": "Features",
        "jsFunctionName": "features",
        "cppClassName": "GitLibgit2"
      },
      {
        "type": "function",
        "file": "common.h",
        "args": [
          {
            "name": "option",
            "type": "int",
            "comment": "Option key",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 on failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "libgit2",
        "cFunctionName": "git_libgit2_opts",
        "cppFunctionName": "Opts",
        "jsFunctionName": "opts",
        "cppClassName": "GitLibgit2"
      },
      {
        "type": "function",
        "file": "common.h",
        "args": [
          {
            "name": "major",
            "type": "int *",
            "comment": "Store the major version number",
            "cType": "int *",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "minor",
            "type": "int *",
            "comment": "Store the minor version number",
            "cType": "int *",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "rev",
            "type": "int *",
            "comment": "Store the revision (patch) number",
            "cType": "int *",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "libgit2",
        "cFunctionName": "git_libgit2_version",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "GitLibgit2"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "libgit2",
    "cppClassName": "GitLibgit2",
    "jsClassName": "Libgit2",
    "filename": "libgit2",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "libgit2"
  },
  {
    "functions": [],
    "type": "class",
    "cType": null,
    "typeName": "mempack",
    "cppClassName": "GitMempack",
    "jsClassName": "Mempack",
    "filename": "mempack",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "mempack"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "merge.h",
        "args": [
          {
            "name": "out",
            "type": "git_index **",
            "comment": "pointer to store the index result in",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository that contains the given trees",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "our_commit",
            "type": "const git_commit *",
            "comment": "the commit that reflects the destination tree",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "their_commit",
            "type": "const git_commit *",
            "comment": "the commit to merge in to `our_commit`",
            "cType": "const git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "type": "const git_merge_options *",
            "comment": "the merge tree options (or null for defaults)",
            "cType": "const git_merge_options *",
            "cppClassName": "GitMergeOptions",
            "jsClassName": "MergeOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success or error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "merge",
        "cFunctionName": "git_merge_commits",
        "cppFunctionName": "Commits",
        "jsFunctionName": "commits",
        "isAsync": true,
        "cppClassName": "GitMerge"
      },
      {
        "type": "function",
        "file": "merge.h",
        "args": [
          {
            "name": "opts",
            "type": "git_merge_file_input *",
            "comment": "the `git_merge_file_input` instance to initialize.",
            "cType": "git_merge_file_input *",
            "cppClassName": "GitMergeFileInput",
            "jsClassName": "MergeFileInput",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "the version of the struct; you should pass\n        `GIT_MERGE_FILE_INPUT_VERSION` here.",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "merge",
        "cFunctionName": "git_merge_file_init_input",
        "cppFunctionName": "FileInitInput",
        "jsFunctionName": "fileInitInput",
        "cppClassName": "GitMerge"
      },
      {
        "type": "function",
        "file": "merge.h",
        "args": [
          {
            "name": "head",
            "type": "git_merge_head *",
            "comment": "merge head to free",
            "cType": "git_merge_head *",
            "cppClassName": "GitMergeHead",
            "jsClassName": "MergeHead",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "merge",
        "cFunctionName": "git_merge_head_free",
        "cppFunctionName": "HeadFree",
        "jsFunctionName": "headFree",
        "cppClassName": "GitMerge"
      },
      {
        "type": "function",
        "file": "merge.h",
        "args": [
          {
            "name": "out",
            "type": "git_merge_head **",
            "comment": "pointer to store the git_merge_head result in",
            "cType": "git_merge_head **",
            "cppClassName": "GitMergeHead",
            "jsClassName": "MergeHead",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository that contains the given commit",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "branch_name",
            "type": "const char *",
            "comment": "name of the (remote) branch",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "remote_url",
            "type": "const char *",
            "comment": "url of the remote",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "oid",
            "type": "const git_oid *",
            "comment": "the commit object id to use as a merge input",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success or error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "merge",
        "cFunctionName": "git_merge_head_from_fetchhead",
        "cppFunctionName": "HeadFromFetchhead",
        "jsFunctionName": "headFromFetchhead",
        "isAsync": true,
        "cppClassName": "GitMerge"
      },
      {
        "type": "function",
        "file": "merge.h",
        "args": [
          {
            "name": "out",
            "type": "git_merge_head **",
            "comment": "pointer to store the git_merge_head result in",
            "cType": "git_merge_head **",
            "cppClassName": "GitMergeHead",
            "jsClassName": "MergeHead",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository that contains the given commit",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "the commit object id to use as a merge input",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success or error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "merge",
        "cFunctionName": "git_merge_head_from_id",
        "cppFunctionName": "HeadFromId",
        "jsFunctionName": "headFromId",
        "isAsync": true,
        "cppClassName": "GitMerge"
      },
      {
        "type": "function",
        "file": "merge.h",
        "args": [
          {
            "name": "out",
            "type": "git_merge_head **",
            "comment": "pointer to store the git_merge_head result in",
            "cType": "git_merge_head **",
            "cppClassName": "GitMergeHead",
            "jsClassName": "MergeHead",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository that contains the given reference",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "reference to use as a merge input",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success or error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "merge",
        "cFunctionName": "git_merge_head_from_ref",
        "cppFunctionName": "HeadFromRef",
        "jsFunctionName": "headFromRef",
        "isAsync": true,
        "cppClassName": "GitMerge"
      },
      {
        "type": "function",
        "file": "merge.h",
        "args": [
          {
            "name": "head",
            "type": "const git_merge_head *",
            "comment": "the given merge head",
            "cType": "const git_merge_head *",
            "cppClassName": "GitMergeHead",
            "jsClassName": "MergeHead",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " commit id",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "merge",
        "cFunctionName": "git_merge_head_id",
        "cppFunctionName": "HeadId",
        "jsFunctionName": "headId",
        "cppClassName": "GitMerge"
      },
      {
        "type": "function",
        "file": "merge.h",
        "args": [
          {
            "name": "opts",
            "type": "git_merge_options *",
            "comment": "the `git_merge_options` instance to initialize.",
            "cType": "git_merge_options *",
            "cppClassName": "GitMergeOptions",
            "jsClassName": "MergeOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "the version of the struct; you should pass\n        `GIT_MERGE_OPTIONS_VERSION` here.",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "merge",
        "cFunctionName": "git_merge_init_options",
        "cppFunctionName": "InitOptions",
        "jsFunctionName": "initOptions",
        "cppClassName": "GitMerge"
      },
      {
        "type": "function",
        "file": "merge.h",
        "args": [
          {
            "name": "out",
            "type": "git_index **",
            "comment": "pointer to store the index result in",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository that contains the given trees",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ancestor_tree",
            "type": "const git_tree *",
            "comment": "the common ancestor between the trees (or null if none)",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "our_tree",
            "type": "const git_tree *",
            "comment": "the tree that reflects the destination tree",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "their_tree",
            "type": "const git_tree *",
            "comment": "the tree to merge in to `our_tree`",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "type": "const git_merge_options *",
            "comment": "the merge tree options (or null for defaults)",
            "cType": "const git_merge_options *",
            "cppClassName": "GitMergeOptions",
            "jsClassName": "MergeOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success or error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "merge",
        "cFunctionName": "git_merge_trees",
        "cppFunctionName": "Trees",
        "jsFunctionName": "trees",
        "isAsync": true,
        "cppClassName": "GitMerge"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "merge",
    "cppClassName": "GitMerge",
    "jsClassName": "Merge",
    "filename": "merge",
    "isLibgitType": true,
    "dependencies": [
      "../include/index.h",
      "../include/repository.h",
      "../include/commit.h",
      "../include/merge_options.h",
      "../include/merge_file_input.h",
      "../include/merge_head.h",
      "../include/oid.h",
      "../include/reference.h",
      "../include/tree.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "merge"
  },
  {
    "typeName": "merge_analysis",
    "type": "enum",
    "cType": "git_merge_analysis_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_MERGE_ANALYSIS_NONE",
        "value": 0,
        "JsName": "NONE"
      },
      {
        "name": "GIT_MERGE_ANALYSIS_NORMAL",
        "value": 1,
        "JsName": "NORMAL"
      },
      {
        "name": "GIT_MERGE_ANALYSIS_UP_TO_DATE",
        "value": 2,
        "JsName": "UP_TO_DATE"
      },
      {
        "name": "GIT_MERGE_ANALYSIS_FASTFORWARD",
        "value": 4,
        "JsName": "FASTFORWARD"
      },
      {
        "name": "GIT_MERGE_ANALYSIS_UNBORN",
        "value": 8,
        "JsName": "UNBORN"
      }
    ],
    "owner": "Merge",
    "JsName": "ANALYSIS"
  },
  {
    "typeName": "merge_file_favor",
    "type": "enum",
    "cType": "git_merge_file_favor_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_MERGE_FILE_FAVOR_NORMAL",
        "value": 0,
        "JsName": "NORMAL"
      },
      {
        "name": "GIT_MERGE_FILE_FAVOR_OURS",
        "value": 1,
        "JsName": "OURS"
      },
      {
        "name": "GIT_MERGE_FILE_FAVOR_THEIRS",
        "value": 2,
        "JsName": "THEIRS"
      },
      {
        "name": "GIT_MERGE_FILE_FAVOR_UNION",
        "value": 3,
        "JsName": "UNION"
      }
    ],
    "owner": "Merge",
    "JsName": "FILE_FAVOR"
  },
  {
    "type": "struct",
    "value": "git_merge_file_input",
    "file": "merge.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "ptr",
        "cType": "const char *",
        "cppFunctionName": "Ptr",
        "jsFunctionName": "ptr",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "size_t",
        "name": "size",
        "cType": "size_t",
        "cppFunctionName": "Size",
        "jsFunctionName": "size",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "path",
        "cType": "const char *",
        "cppFunctionName": "Path",
        "jsFunctionName": "path",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "mode",
        "cType": "unsigned int",
        "cppFunctionName": "Mode",
        "jsFunctionName": "mode",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_merge_file",
        "git_merge_file_init_input"
      ]
    },
    "typeName": "merge_file_input",
    "cType": "git_merge_file_input",
    "functions": [],
    "cppClassName": "GitMergeFileInput",
    "jsClassName": "MergeFileInput",
    "filename": "merge_file_input",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "merge_file_input"
  },
  {
    "type": "class",
    "value": "git_merge_head",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_merge",
        "git_merge_analysis",
        "git_merge_head_free",
        "git_merge_head_from_fetchhead",
        "git_merge_head_from_id",
        "git_merge_head_from_ref",
        "git_merge_head_id"
      ]
    },
    "typeName": "merge_head",
    "cType": "git_merge_head",
    "functions": [],
    "cppClassName": "GitMergeHead",
    "jsClassName": "MergeHead",
    "filename": "merge_head",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "merge_head"
  },
  {
    "type": "struct",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_merge_tree_flag_t",
        "name": "flags",
        "cType": "git_merge_tree_flag_t",
        "cppFunctionName": "Flags",
        "jsFunctionName": "flags",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true,
        "isMask": true
      },
      {
        "type": "unsigned int",
        "name": "rename_threshold",
        "cType": "unsigned int",
        "cppFunctionName": "RenameThreshold",
        "jsFunctionName": "renameThreshold",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "target_limit",
        "cType": "unsigned int",
        "cppFunctionName": "TargetLimit",
        "jsFunctionName": "targetLimit",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_merge_file_favor_t",
        "name": "file_favor",
        "cType": "git_merge_file_favor_t",
        "cppFunctionName": "FileFavor",
        "jsFunctionName": "fileFavor",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true,
        "isMask": true
      }
    ],
    "used": {
      "needs": [
        "git_merge_init_options"
      ]
    },
    "typeName": "merge_options",
    "cType": "git_merge_options",
    "functions": [],
    "cppClassName": "GitMergeOptions",
    "jsClassName": "MergeOptions",
    "filename": "merge_options",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "merge_options"
  },
  {
    "type": "class",
    "value": "git_merge_result",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": []
    },
    "typeName": "merge_result",
    "cType": "git_merge_result",
    "functions": [],
    "cppClassName": "GitMergeResult",
    "jsClassName": "MergeResult",
    "filename": "merge_result",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "merge_result"
  },
  {
    "typeName": "merge_tree_flag",
    "type": "enum",
    "cType": "git_merge_tree_flag_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_MERGE_TREE_FIND_RENAMES",
        "value": 1,
        "JsName": "TREE_FIND_RENAMES"
      }
    ],
    "owner": "Merge",
    "JsName": "TREE_FLAG"
  },
  {
    "functions": [],
    "type": "class",
    "cType": null,
    "typeName": "message",
    "cppClassName": "GitMessage",
    "jsClassName": "Message",
    "filename": "message",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "message"
  },
  {
    "type": "class",
    "value": "git_note",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_note_free",
        "git_note_id",
        "git_note_message",
        "git_note_read"
      ]
    },
    "typeName": "note",
    "cType": "git_note",
    "functions": [
      {
        "type": "function",
        "file": "notes.h",
        "args": [
          {
            "name": "out",
            "type": "git_oid *",
            "comment": "pointer to store the OID (optional); NULL in case of error",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository where to store the note",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "author",
            "type": "const git_signature *",
            "comment": "signature of the notes commit author",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "type": "const git_signature *",
            "comment": "signature of the notes commit committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "notes_ref",
            "type": "const char *",
            "comment": "canonical name of the reference to use (optional);\n\t\t\t\t\tdefaults to \"refs/notes/commits\"",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "oid",
            "type": "const git_oid *",
            "comment": "OID of the git object to decorate",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "note",
            "type": "const char *",
            "comment": "Content of the note to add for object oid",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing note",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "note",
        "cFunctionName": "git_note_create",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "isAsync": true,
        "cppClassName": "GitNote"
      },
      {
        "type": "function",
        "file": "notes.h",
        "args": [
          {
            "name": "out",
            "type": "const char **",
            "comment": "Pointer to the default notes reference",
            "cType": "const char **",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The Git repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "note",
        "cFunctionName": "git_note_default_ref",
        "cppFunctionName": "DefaultRef",
        "jsFunctionName": "defaultRef",
        "isAsync": true,
        "cppClassName": "GitNote"
      },
      {
        "type": "function",
        "file": "notes.h",
        "args": [
          {
            "name": "note",
            "type": "const git_note *",
            "comment": "the note",
            "cType": "const git_note *",
            "cppClassName": "GitNote",
            "jsClassName": "Note",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " the note object's id",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "note",
        "cFunctionName": "git_note_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "isPrototypeMethod": true,
        "cppClassName": "GitNote"
      },
      {
        "type": "function",
        "file": "notes.h",
        "args": [
          {
            "name": "it",
            "type": "git_note_iterator *",
            "comment": "pointer to the iterator",
            "cType": "git_note_iterator *",
            "cppClassName": "GitNoteIterator",
            "jsClassName": "NoteIterator",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "note",
        "cFunctionName": "git_note_iterator_free",
        "cppFunctionName": "IteratorFree",
        "jsFunctionName": "iteratorFree",
        "cppClassName": "GitNote"
      },
      {
        "type": "function",
        "file": "notes.h",
        "args": [
          {
            "name": "out",
            "type": "git_note_iterator **",
            "comment": "pointer to the iterator",
            "cType": "git_note_iterator **",
            "cppClassName": "GitNoteIterator",
            "jsClassName": "NoteIterator",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository where to look up the note",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "notes_ref",
            "type": "const char *",
            "comment": "canonical name of the reference to use (optional); defaults to\n                  \"refs/notes/commits\"",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "note",
        "cFunctionName": "git_note_iterator_new",
        "cppFunctionName": "IteratorNew",
        "jsFunctionName": "iteratorNew",
        "isAsync": true,
        "cppClassName": "GitNote"
      },
      {
        "type": "function",
        "file": "notes.h",
        "args": [
          {
            "name": "note",
            "type": "const git_note *",
            "comment": "the note",
            "cType": "const git_note *",
            "cppClassName": "GitNote",
            "jsClassName": "Note",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the note message",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "note",
        "cFunctionName": "git_note_message",
        "cppFunctionName": "Message",
        "jsFunctionName": "message",
        "isPrototypeMethod": true,
        "cppClassName": "GitNote"
      },
      {
        "type": "function",
        "file": "notes.h",
        "args": [
          {
            "name": "note_id",
            "type": "git_oid *",
            "comment": "id of blob containing the message",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "annotated_id",
            "type": "git_oid *",
            "comment": "id of the git object being annotated",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "it",
            "type": "git_note_iterator *",
            "comment": "pointer to the iterator",
            "cType": "git_note_iterator *",
            "cppClassName": "GitNoteIterator",
            "jsClassName": "NoteIterator",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 (no error), GIT_ITEROVER (iteration is done) or an error code\n         (negative value)",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "note",
        "cFunctionName": "git_note_next",
        "cppFunctionName": "Next",
        "jsFunctionName": "next",
        "cppClassName": "GitNote"
      },
      {
        "type": "function",
        "file": "notes.h",
        "args": [
          {
            "name": "out",
            "type": "git_note **",
            "comment": "pointer to the read note; NULL in case of error",
            "cType": "git_note **",
            "cppClassName": "GitNote",
            "jsClassName": "Note",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository where to look up the note",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "notes_ref",
            "type": "const char *",
            "comment": "canonical name of the reference to use (optional); defaults to\n                  \"refs/notes/commits\"",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "oid",
            "type": "const git_oid *",
            "comment": "OID of the git object to read the note from",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "note",
        "cFunctionName": "git_note_read",
        "cppFunctionName": "Read",
        "jsFunctionName": "read",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitNote"
      },
      {
        "type": "function",
        "file": "notes.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository where the note lives",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "notes_ref",
            "type": "const char *",
            "comment": "canonical name of the reference to use (optional);\n\t\t\t\t\tdefaults to \"refs/notes/commits\"",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "author",
            "type": "const git_signature *",
            "comment": "signature of the notes commit author",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "type": "const git_signature *",
            "comment": "signature of the notes commit committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "oid",
            "type": "const git_oid *",
            "comment": "OID of the git object to remove the note from",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "note",
        "cFunctionName": "git_note_remove",
        "cppFunctionName": "Remove",
        "jsFunctionName": "remove",
        "cppClassName": "GitNote"
      }
    ],
    "cppClassName": "GitNote",
    "jsClassName": "Note",
    "filename": "note",
    "isLibgitType": true,
    "dependencies": [
      "../include/oid.h",
      "../include/repository.h",
      "../include/signature.h",
      "../include/note.h",
      "../include/note_iterator.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_note_free",
    "name": "note"
  },
  {
    "type": "class",
    "value": "git_note_iterator",
    "file": "notes.h",
    "used": {
      "returns": [],
      "needs": [
        "git_note_iterator_free",
        "git_note_iterator_new",
        "git_note_next"
      ]
    },
    "typeName": "note_iterator",
    "cType": "git_note_iterator",
    "functions": [],
    "cppClassName": "GitNoteIterator",
    "jsClassName": "NoteIterator",
    "filename": "note_iterator",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "note_iterator"
  },
  {
    "type": "class",
    "value": "git_object",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_checkout_tree",
        "git_object_dup",
        "git_object_free",
        "git_object_id",
        "git_object_lookup",
        "git_object_lookup_bypath",
        "git_object_lookup_prefix",
        "git_object_owner",
        "git_object_peel",
        "git_object_short_id",
        "git_object_type",
        "git_reference_peel",
        "git_revparse_ext",
        "git_revparse_single",
        "git_tag_annotation_create",
        "git_tag_create",
        "git_tag_create_lightweight",
        "git_tag_peel",
        "git_tag_target",
        "git_tree_entry_to_object"
      ]
    },
    "typeName": "object",
    "cType": "git_object",
    "functions": [
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "type",
            "type": "git_otype",
            "comment": "object type to get its size",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " size in bytes of the object",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "cFunctionName": "git_object__size",
        "cppFunctionName": "Size",
        "jsFunctionName": "size",
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "dest",
            "type": "git_object **",
            "comment": "Pointer to store the copy of the object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "source",
            "type": "git_object *",
            "comment": "Original object to copy",
            "cType": "git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "cFunctionName": "git_object_dup",
        "cppFunctionName": "Dup",
        "jsFunctionName": "dup",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "obj",
            "type": "const git_object *",
            "comment": "the repository object",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " the SHA1 id",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_object_id-8",
            "ex/v0.21.2/blame.html#git_object_id-9",
            "ex/v0.21.2/blame.html#git_object_id-10",
            "ex/v0.21.2/blame.html#git_object_id-11"
          ],
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_object_id-10",
            "ex/v0.21.2/cat-file.html#git_object_id-11"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_object_id-32",
            "ex/v0.21.2/log.html#git_object_id-33",
            "ex/v0.21.2/log.html#git_object_id-34",
            "ex/v0.21.2/log.html#git_object_id-35"
          ],
          "rev-parse.c": [
            "ex/v0.21.2/rev-parse.html#git_object_id-2",
            "ex/v0.21.2/rev-parse.html#git_object_id-3",
            "ex/v0.21.2/rev-parse.html#git_object_id-4",
            "ex/v0.21.2/rev-parse.html#git_object_id-5",
            "ex/v0.21.2/rev-parse.html#git_object_id-6"
          ]
        },
        "cFunctionName": "git_object_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "isPrototypeMethod": true,
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "object",
            "type": "git_object **",
            "comment": "pointer to the looked-up object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to look up the object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "the unique identifier for the object",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "type": "git_otype",
            "comment": "the type of the object",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "examples": {
          "log.c": [
            "ex/v0.21.2/log.html#git_object_lookup-31"
          ]
        },
        "cFunctionName": "git_object_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "out",
            "type": "git_object **",
            "comment": "buffer that receives a pointer to the object (which must be freed\n            by the caller)",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "treeish",
            "type": "const git_object *",
            "comment": "root object that can be peeled to a tree",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "relative path from the root object to the desired object",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "type": "git_otype",
            "comment": "type of object desired",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "cFunctionName": "git_object_lookup_bypath",
        "cppFunctionName": "LookupBypath",
        "jsFunctionName": "lookupBypath",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "object_out",
            "type": "git_object **",
            "comment": "pointer where to store the looked-up object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to look up the object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "a short identifier for the object",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "type": "size_t",
            "comment": "the length of the short identifier",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "type": "git_otype",
            "comment": "the type of the object",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "cFunctionName": "git_object_lookup_prefix",
        "cppFunctionName": "LookupPrefix",
        "jsFunctionName": "lookupPrefix",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "obj",
            "type": "const git_object *",
            "comment": "the object",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " the repository who owns this object",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "cFunctionName": "git_object_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "isPrototypeMethod": true,
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "peeled",
            "type": "git_object **",
            "comment": "Pointer to the peeled git_object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "object",
            "type": "const git_object *",
            "comment": "The object to be processed",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "target_type",
            "type": "git_otype",
            "comment": "The type of the requested object (GIT_OBJ_COMMIT,\n GIT_OBJ_TAG, GIT_OBJ_TREE, GIT_OBJ_BLOB or GIT_OBJ_ANY).",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EAMBIGUOUS, GIT_ENOTFOUND or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "cFunctionName": "git_object_peel",
        "cppFunctionName": "Peel",
        "jsFunctionName": "peel",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "out",
            "type": "git_buf *",
            "comment": "Buffer to write string into",
            "cType": "git_buf *",
            "cppClassName": "GitBuf",
            "jsClassName": "Buf",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false,
            "shouldAlloc": true
          },
          {
            "name": "obj",
            "type": "const git_object *",
            "comment": "The object to get an ID for",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 for error",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "examples": {
          "tag.c": [
            "ex/v0.21.2/tag.html#git_object_short_id-3"
          ]
        },
        "cFunctionName": "git_object_short_id",
        "cppFunctionName": "ShortId",
        "jsFunctionName": "shortId",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "str",
            "type": "const char *",
            "comment": "the string to convert.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "git_otype",
          "comment": " the corresponding git_otype.",
          "cType": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "cFunctionName": "git_object_string2type",
        "cppFunctionName": "String2type",
        "jsFunctionName": "string2type",
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "obj",
            "type": "const git_object *",
            "comment": "the repository object",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_otype",
          "comment": " the object's type",
          "cType": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_object_type-12",
            "ex/v0.21.2/cat-file.html#git_object_type-13",
            "ex/v0.21.2/cat-file.html#git_object_type-14"
          ],
          "tag.c": [
            "ex/v0.21.2/tag.html#git_object_type-4"
          ]
        },
        "cFunctionName": "git_object_type",
        "cppFunctionName": "Type",
        "jsFunctionName": "type",
        "isPrototypeMethod": true,
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "type",
            "type": "git_otype",
            "comment": "object type to convert.",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the corresponding string representation.",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_object_type2string-16",
            "ex/v0.21.2/cat-file.html#git_object_type2string-17",
            "ex/v0.21.2/cat-file.html#git_object_type2string-18",
            "ex/v0.21.2/cat-file.html#git_object_type2string-19"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_object_type2string-32"
          ]
        },
        "cFunctionName": "git_object_type2string",
        "cppFunctionName": "Type2string",
        "jsFunctionName": "type2string",
        "cppClassName": "GitObject"
      },
      {
        "type": "function",
        "file": "object.h",
        "args": [
          {
            "name": "type",
            "type": "git_otype",
            "comment": "object type to test.",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " true if the type represents a valid loose object type,\n false otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "object",
        "cFunctionName": "git_object_typeisloose",
        "cppFunctionName": "Typeisloose",
        "jsFunctionName": "typeisloose",
        "cppClassName": "GitObject"
      }
    ],
    "cppClassName": "GitObject",
    "jsClassName": "Object",
    "filename": "object",
    "isLibgitType": true,
    "dependencies": [
      "../include/object.h",
      "../include/oid.h",
      "../include/repository.h",
      "../include/buf.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_object_free",
    "name": "object"
  },
  {
    "type": "class",
    "value": "git_odb",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_indexer_new",
        "git_odb_add_alternate",
        "git_odb_add_backend",
        "git_odb_add_disk_alternate",
        "git_odb_exists",
        "git_odb_exists_prefix",
        "git_odb_foreach",
        "git_odb_free",
        "git_odb_get_backend",
        "git_odb_new",
        "git_odb_num_backends",
        "git_odb_open",
        "git_odb_open_rstream",
        "git_odb_open_wstream",
        "git_odb_read",
        "git_odb_read_header",
        "git_odb_read_prefix",
        "git_odb_refresh",
        "git_odb_write",
        "git_odb_write_pack",
        "git_repository_odb",
        "git_repository_wrap_odb"
      ]
    },
    "typeName": "odb",
    "cType": "git_odb",
    "functions": [
      {
        "type": "function",
        "file": "odb.h",
        "args": [
          {
            "name": "odb",
            "type": "git_odb *",
            "comment": "database to add the backend to",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "path to the objects folder for the alternate",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success; error code otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "odb",
        "cFunctionName": "git_odb_add_disk_alternate",
        "cppFunctionName": "AddDiskAlternate",
        "jsFunctionName": "addDiskAlternate",
        "isPrototypeMethod": true,
        "cppClassName": "GitOdb"
      },
      {
        "type": "function",
        "file": "odb.h",
        "args": [
          {
            "name": "out",
            "type": "git_odb **",
            "comment": "location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed.",
            "cType": "git_odb **",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "objects_dir",
            "type": "const char *",
            "comment": "path of the backends' \"objects\" directory.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "odb",
        "cFunctionName": "git_odb_open",
        "cppFunctionName": "Open",
        "jsFunctionName": "open",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitOdb"
      },
      {
        "type": "function",
        "file": "odb.h",
        "args": [
          {
            "name": "out",
            "type": "git_odb_object **",
            "comment": "pointer where to store the read object",
            "cType": "git_odb_object **",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "db",
            "type": "git_odb *",
            "comment": "database to search for the object in.",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "identity of the object to read.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " - 0 if the object was read;\n - GIT_ENOTFOUND if the object is not in the database.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "odb",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_odb_read-21"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_odb_read-33"
          ]
        },
        "cFunctionName": "git_odb_read",
        "cppFunctionName": "Read",
        "jsFunctionName": "read",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitOdb"
      },
      {
        "type": "function",
        "file": "odb.h",
        "args": [
          {
            "name": "out",
            "type": "git_oid *",
            "comment": "pointer to store the OID result of the write",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "odb",
            "type": "git_odb *",
            "comment": "object database where to store the object",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "data",
            "type": "const void *",
            "comment": "buffer with the data to store",
            "cType": "const void *",
            "cppClassName": "Wrapper",
            "jsClassName": "Buffer",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "type": "size_t",
            "comment": "size of the buffer",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "type",
            "type": "git_otype",
            "comment": "type of the data to store",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "odb",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_odb_write-34"
          ]
        },
        "cFunctionName": "git_odb_write",
        "cppFunctionName": "Write",
        "jsFunctionName": "write",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitOdb"
      }
    ],
    "cppClassName": "GitOdb",
    "jsClassName": "Odb",
    "filename": "odb",
    "isLibgitType": true,
    "dependencies": [
      "../include/odb.h",
      "../include/odb_object.h",
      "../include/oid.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_odb_free",
    "name": "odb"
  },
  {
    "type": "class",
    "value": "git_odb_object",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_odb_object_data",
        "git_odb_object_dup",
        "git_odb_object_free",
        "git_odb_object_id",
        "git_odb_object_size",
        "git_odb_object_type",
        "git_odb_read",
        "git_odb_read_prefix"
      ]
    },
    "typeName": "odb_object",
    "cType": "git_odb_object",
    "functions": [
      {
        "type": "function",
        "file": "odb.h",
        "args": [
          {
            "name": "object",
            "type": "git_odb_object *",
            "comment": "the object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const void *",
          "comment": " a pointer to the data",
          "cType": "const void *",
          "cppClassName": "Wrapper",
          "jsClassName": "Buffer",
          "isReturn": false,
          "isSelf": false
        },
        "group": "odb",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_odb_object_data-36"
          ]
        },
        "cFunctionName": "git_odb_object_data",
        "cppFunctionName": "Data",
        "jsFunctionName": "data",
        "isPrototypeMethod": true,
        "cppClassName": "GitOdbObject"
      },
      {
        "type": "function",
        "file": "odb.h",
        "args": [
          {
            "name": "dest",
            "type": "git_odb_object **",
            "comment": "pointer where to store the copy",
            "cType": "git_odb_object **",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "source",
            "type": "git_odb_object *",
            "comment": "object to copy",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "odb",
        "cFunctionName": "git_odb_object_dup",
        "cppFunctionName": "Dup",
        "jsFunctionName": "dup",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitOdbObject"
      },
      {
        "type": "function",
        "file": "odb.h",
        "args": [
          {
            "name": "object",
            "type": "git_odb_object *",
            "comment": "the object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " a pointer to the OID",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "odb",
        "cFunctionName": "git_odb_object_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "isPrototypeMethod": true,
        "cppClassName": "GitOdbObject"
      },
      {
        "type": "function",
        "file": "odb.h",
        "args": [
          {
            "name": "object",
            "type": "git_odb_object *",
            "comment": "the object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " the size",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "odb",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_odb_object_size-23"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_odb_object_size-37"
          ]
        },
        "cFunctionName": "git_odb_object_size",
        "cppFunctionName": "Size",
        "jsFunctionName": "size",
        "isPrototypeMethod": true,
        "cppClassName": "GitOdbObject"
      },
      {
        "type": "function",
        "file": "odb.h",
        "args": [
          {
            "name": "object",
            "type": "git_odb_object *",
            "comment": "the object",
            "cType": "git_odb_object *",
            "cppClassName": "GitOdbObject",
            "jsClassName": "OdbObject",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_otype",
          "comment": " the type",
          "cType": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "odb",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_odb_object_type-38"
          ]
        },
        "cFunctionName": "git_odb_object_type",
        "cppFunctionName": "Type",
        "jsFunctionName": "type",
        "isPrototypeMethod": true,
        "cppClassName": "GitOdbObject"
      }
    ],
    "cppClassName": "GitOdbObject",
    "jsClassName": "OdbObject",
    "filename": "odb_object",
    "isLibgitType": true,
    "dependencies": [
      "../include/wrapper.h",
      "node_buffer.h",
      "../include/odb_object.h",
      "../include/oid.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_odb_object_free",
    "name": "odb_object"
  },
  {
    "typeName": "odb_stream",
    "type": "enum",
    "cType": "git_odb_stream_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_STREAM_RDONLY",
        "value": 2,
        "JsName": "RDONLY"
      },
      {
        "name": "GIT_STREAM_WRONLY",
        "value": 4,
        "JsName": "WRONLY"
      },
      {
        "name": "GIT_STREAM_RW",
        "value": 6,
        "JsName": "RW"
      }
    ],
    "owner": "Odb",
    "JsName": "STREAM"
  },
  {
    "type": "class",
    "value": "git_oid",
    "file": "oid.h",
    "fields": [],
    "used": {
      "returns": [
        "git_blob_id",
        "git_commit_id",
        "git_commit_parent_id",
        "git_commit_tree_id",
        "git_filter_source_id",
        "git_indexer_hash",
        "git_merge_head_id",
        "git_note_id",
        "git_object_id",
        "git_odb_object_id",
        "git_packbuilder_hash",
        "git_reference_target",
        "git_reference_target_peel",
        "git_reflog_entry_id_new",
        "git_reflog_entry_id_old",
        "git_submodule_head_id",
        "git_submodule_index_id",
        "git_submodule_wd_id",
        "git_tag_id",
        "git_tag_target_id",
        "git_tree_entry_id",
        "git_tree_id"
      ],
      "needs": [
        "git_blob_create_frombuffer",
        "git_blob_create_fromchunks",
        "git_blob_create_fromdisk",
        "git_blob_create_fromworkdir",
        "git_blob_lookup",
        "git_blob_lookup_prefix",
        "git_commit_amend",
        "git_commit_create",
        "git_commit_create_from_callback",
        "git_commit_create_from_ids",
        "git_commit_create_v",
        "git_commit_lookup",
        "git_commit_lookup_prefix",
        "git_graph_ahead_behind",
        "git_graph_descendant_of",
        "git_index_write_tree",
        "git_index_write_tree_to",
        "git_merge_base",
        "git_merge_base_many",
        "git_merge_base_octopus",
        "git_merge_head_from_fetchhead",
        "git_merge_head_from_id",
        "git_note_create",
        "git_note_next",
        "git_note_read",
        "git_note_remove",
        "git_object_lookup",
        "git_object_lookup_prefix",
        "git_odb_exists",
        "git_odb_exists_prefix",
        "git_odb_hash",
        "git_odb_hashfile",
        "git_odb_open_rstream",
        "git_odb_read",
        "git_odb_read_header",
        "git_odb_read_prefix",
        "git_odb_stream_finalize_write",
        "git_odb_write",
        "git_oid_allocfmt",
        "git_oid_cmp",
        "git_oid_cpy",
        "git_oid_equal",
        "git_oid_fmt",
        "git_oid_fromraw",
        "git_oid_fromstr",
        "git_oid_fromstrn",
        "git_oid_fromstrp",
        "git_oid_iszero",
        "git_oid_ncmp",
        "git_oid_nfmt",
        "git_oid_pathfmt",
        "git_oid_strcmp",
        "git_oid_streq",
        "git_oid_tostr",
        "git_packbuilder_insert",
        "git_packbuilder_insert_commit",
        "git_packbuilder_insert_tree",
        "git_reference__alloc",
        "git_reference_create",
        "git_reference_create_matching",
        "git_reference_name_to_id",
        "git_reference_set_target",
        "git_reflog_append",
        "git_repository_hashfile",
        "git_repository_set_head_detached",
        "git_revwalk_hide",
        "git_revwalk_next",
        "git_revwalk_push",
        "git_tag_annotation_create",
        "git_tag_create",
        "git_tag_create_frombuffer",
        "git_tag_create_lightweight",
        "git_tag_lookup",
        "git_tag_lookup_prefix",
        "git_tree_entry_byid",
        "git_tree_lookup",
        "git_tree_lookup_prefix",
        "git_treebuilder_insert",
        "git_treebuilder_write"
      ]
    },
    "typeName": "oid",
    "cType": "git_oid",
    "functions": [
      {
        "type": "function",
        "file": "oid.h",
        "args": [
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "the oid structure to format",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "char *",
          "comment": " the c-string; NULL if memory is exhausted. Caller must\n\t\t\tdeallocate the string with git__free().",
          "cType": "char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "oid",
        "cFunctionName": "git_oid_allocfmt",
        "cppFunctionName": "Allocfmt",
        "jsFunctionName": "allocfmt",
        "isPrototypeMethod": true,
        "cppClassName": "GitOid"
      },
      {
        "type": "function",
        "file": "oid.h",
        "args": [
          {
            "name": "a",
            "type": "const git_oid *",
            "comment": "first oid structure.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "b",
            "type": "const git_oid *",
            "comment": "second oid structure.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " \n<\n0, 0, >0 if a \n<\n b, a == b, a > b.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "oid",
        "cFunctionName": "git_oid_cmp",
        "cppFunctionName": "Cmp",
        "jsFunctionName": "cmp",
        "isPrototypeMethod": true,
        "cppClassName": "GitOid"
      },
      {
        "type": "function",
        "file": "oid.h",
        "args": [
          {
            "name": "a",
            "type": "const git_oid *",
            "comment": "first oid structure.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "b",
            "type": "const git_oid *",
            "comment": "second oid structure.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " true if equal, false otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "oid",
        "cFunctionName": "git_oid_equal",
        "cppFunctionName": "Equal",
        "jsFunctionName": "equal",
        "isPrototypeMethod": true,
        "cppClassName": "GitOid"
      },
      {
        "type": "function",
        "file": "oid.h",
        "args": [
          {
            "name": "out",
            "type": "git_oid *",
            "comment": "oid structure the result is written into.",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "str",
            "type": "const char *",
            "comment": "input hex string; must be pointing at the start of\n\t\tthe hex sequence and have at least the number of bytes\n\t\tneeded for an oid encoded in hex (40 bytes).",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "oid",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_oid_fromstr-39",
            "ex/v0.21.2/general.html#git_oid_fromstr-40",
            "ex/v0.21.2/general.html#git_oid_fromstr-41",
            "ex/v0.21.2/general.html#git_oid_fromstr-42",
            "ex/v0.21.2/general.html#git_oid_fromstr-43",
            "ex/v0.21.2/general.html#git_oid_fromstr-44",
            "ex/v0.21.2/general.html#git_oid_fromstr-45",
            "ex/v0.21.2/general.html#git_oid_fromstr-46"
          ]
        },
        "cFunctionName": "git_oid_fromstr",
        "cppFunctionName": "Fromstr",
        "jsFunctionName": "fromString",
        "isAsync": false,
        "isConstructorMethod": true,
        "cppClassName": "GitOid"
      },
      {
        "type": "function",
        "file": "oid.h",
        "args": [
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": null,
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if all zeros, 0 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "oid",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_oid_iszero-21"
          ],
          "network/fetch.c": [
            "ex/v0.21.2/network/fetch.html#git_oid_iszero-3"
          ]
        },
        "cFunctionName": "git_oid_iszero",
        "cppFunctionName": "Iszero",
        "jsFunctionName": "iszero",
        "isPrototypeMethod": true,
        "cppClassName": "GitOid"
      },
      {
        "type": "function",
        "file": "oid.h",
        "args": [
          {
            "name": "a",
            "type": "const git_oid *",
            "comment": "first oid structure.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "b",
            "type": "const git_oid *",
            "comment": "second oid structure.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "len",
            "type": "size_t",
            "comment": "the number of hex chars to compare",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 in case of a match",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "oid",
        "cFunctionName": "git_oid_ncmp",
        "cppFunctionName": "Ncmp",
        "jsFunctionName": "ncmp",
        "isPrototypeMethod": true,
        "cppClassName": "GitOid"
      },
      {
        "type": "function",
        "file": "oid.h",
        "args": [
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "oid structure.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "str",
            "type": "const char *",
            "comment": "input hex string of an object id.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " -1 if str is not valid, \n<\n0 if id sorts before str,\n         0 if id matches str, >0 if id sorts after str.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "oid",
        "cFunctionName": "git_oid_strcmp",
        "cppFunctionName": "Strcmp",
        "jsFunctionName": "strcmp",
        "isPrototypeMethod": true,
        "cppClassName": "GitOid"
      },
      {
        "type": "function",
        "file": "oid.h",
        "args": [
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "oid structure.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "str",
            "type": "const char *",
            "comment": "input hex string of an object id.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 in case of a match, -1 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "oid",
        "cFunctionName": "git_oid_streq",
        "cppFunctionName": "Streq",
        "jsFunctionName": "streq",
        "isPrototypeMethod": true,
        "cppClassName": "GitOid"
      }
    ],
    "cppClassName": "GitOid",
    "jsClassName": "Oid",
    "filename": "oid",
    "isLibgitType": true,
    "dependencies": [
      "../include/oid.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "shouldAlloc": true,
    "name": "oid"
  },
  {
    "type": "class",
    "value": "git_oid_shorten",
    "file": "oid.h",
    "used": {
      "returns": [
        "git_oid_shorten_new"
      ],
      "needs": [
        "git_oid_shorten_add",
        "git_oid_shorten_free"
      ]
    },
    "typeName": "oid_shorten",
    "cType": "git_oid_shorten",
    "functions": [],
    "cppClassName": "GitOidShorten",
    "jsClassName": "OidShorten",
    "filename": "oid_shorten",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "oid_shorten"
  },
  {
    "typeName": "otype",
    "type": "enum",
    "cType": "git_otype",
    "isMask": false,
    "values": [
      {
        "name": "GIT_OBJ_ANY",
        "value": -2,
        "JsName": "OBJ_ANY"
      },
      {
        "name": "GIT_OBJ_BAD",
        "value": -1,
        "JsName": "OBJ_BAD"
      },
      {
        "name": "GIT_OBJ__EXT1",
        "value": 0,
        "JsName": "OBJ__EXT1"
      },
      {
        "name": "GIT_OBJ_COMMIT",
        "value": 1,
        "JsName": "OBJ_COMMIT"
      },
      {
        "name": "GIT_OBJ_TREE",
        "value": 2,
        "JsName": "OBJ_TREE"
      },
      {
        "name": "GIT_OBJ_BLOB",
        "value": 3,
        "JsName": "OBJ_BLOB"
      },
      {
        "name": "GIT_OBJ_TAG",
        "value": 4,
        "JsName": "OBJ_TAG"
      },
      {
        "name": "GIT_OBJ__EXT2",
        "value": 5,
        "JsName": "OBJ__EXT2"
      },
      {
        "name": "GIT_OBJ_OFS_DELTA",
        "value": 6,
        "JsName": "OBJ_OFS_DELTA"
      },
      {
        "name": "GIT_OBJ_REF_DELTA",
        "value": 7,
        "JsName": "OBJ_REF_DELTA"
      }
    ],
    "owner": "Enums",
    "JsName": "OTYPE"
  },
  {
    "type": "class",
    "value": "git_packbuilder",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_packbuilder_foreach",
        "git_packbuilder_free",
        "git_packbuilder_hash",
        "git_packbuilder_insert",
        "git_packbuilder_insert_commit",
        "git_packbuilder_insert_tree",
        "git_packbuilder_new",
        "git_packbuilder_object_count",
        "git_packbuilder_set_callbacks",
        "git_packbuilder_set_threads",
        "git_packbuilder_write",
        "git_packbuilder_written"
      ]
    },
    "typeName": "packbuilder",
    "cType": "git_packbuilder",
    "functions": [
      {
        "type": "function",
        "file": "pack.h",
        "args": [
          {
            "name": "pb",
            "type": "git_packbuilder *",
            "comment": "The packbuilder object",
            "cType": "git_packbuilder *",
            "cppClassName": "GitPackbuilder",
            "jsClassName": "Packbuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": null,
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "packbuilder",
        "cFunctionName": "git_packbuilder_hash",
        "cppFunctionName": "Hash",
        "jsFunctionName": "hash",
        "isPrototypeMethod": true,
        "cppClassName": "GitPackbuilder"
      },
      {
        "type": "function",
        "file": "pack.h",
        "args": [
          {
            "name": "pb",
            "type": "git_packbuilder *",
            "comment": "The packbuilder",
            "cType": "git_packbuilder *",
            "cppClassName": "GitPackbuilder",
            "jsClassName": "Packbuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "The oid of the commit",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "The name; might be NULL",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "packbuilder",
        "cFunctionName": "git_packbuilder_insert",
        "cppFunctionName": "Insert",
        "jsFunctionName": "insert",
        "isPrototypeMethod": true,
        "cppClassName": "GitPackbuilder"
      },
      {
        "type": "function",
        "file": "pack.h",
        "args": [
          {
            "name": "pb",
            "type": "git_packbuilder *",
            "comment": "The packbuilder",
            "cType": "git_packbuilder *",
            "cppClassName": "GitPackbuilder",
            "jsClassName": "Packbuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "The oid of the commit",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "packbuilder",
        "cFunctionName": "git_packbuilder_insert_commit",
        "cppFunctionName": "InsertCommit",
        "jsFunctionName": "insertCommit",
        "isPrototypeMethod": true,
        "cppClassName": "GitPackbuilder"
      },
      {
        "type": "function",
        "file": "pack.h",
        "args": [
          {
            "name": "pb",
            "type": "git_packbuilder *",
            "comment": "The packbuilder",
            "cType": "git_packbuilder *",
            "cppClassName": "GitPackbuilder",
            "jsClassName": "Packbuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "The oid of the root tree",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "packbuilder",
        "cFunctionName": "git_packbuilder_insert_tree",
        "cppFunctionName": "InsertTree",
        "jsFunctionName": "insertTree",
        "isPrototypeMethod": true,
        "cppClassName": "GitPackbuilder"
      },
      {
        "type": "function",
        "file": "pack.h",
        "args": [
          {
            "name": "pb",
            "type": "git_packbuilder *",
            "comment": "the packbuilder",
            "cType": "git_packbuilder *",
            "cppClassName": "GitPackbuilder",
            "jsClassName": "Packbuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "uint32_t",
          "comment": " the number of objects in the packfile",
          "cType": "uint32_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "packbuilder",
        "cFunctionName": "git_packbuilder_object_count",
        "cppFunctionName": "ObjectCount",
        "jsFunctionName": "objectCount",
        "isPrototypeMethod": true,
        "cppClassName": "GitPackbuilder"
      },
      {
        "type": "function",
        "file": "pack.h",
        "args": [
          {
            "name": "pb",
            "type": "git_packbuilder *",
            "comment": "The packbuilder",
            "cType": "git_packbuilder *",
            "cppClassName": "GitPackbuilder",
            "jsClassName": "Packbuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "type": "unsigned int",
            "comment": "Number of threads to spawn",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "unsigned int",
          "comment": " number of actual threads to be used",
          "cType": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "packbuilder",
        "cFunctionName": "git_packbuilder_set_threads",
        "cppFunctionName": "SetThreads",
        "jsFunctionName": "setThreads",
        "isPrototypeMethod": true,
        "cppClassName": "GitPackbuilder"
      },
      {
        "type": "function",
        "file": "pack.h",
        "args": [
          {
            "name": "pb",
            "type": "git_packbuilder *",
            "comment": "the packbuilder",
            "cType": "git_packbuilder *",
            "cppClassName": "GitPackbuilder",
            "jsClassName": "Packbuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "uint32_t",
          "comment": " the number of objects which have already been written",
          "cType": "uint32_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "packbuilder",
        "cFunctionName": "git_packbuilder_written",
        "cppFunctionName": "Written",
        "jsFunctionName": "written",
        "isPrototypeMethod": true,
        "cppClassName": "GitPackbuilder"
      }
    ],
    "cppClassName": "GitPackbuilder",
    "jsClassName": "Packbuilder",
    "filename": "packbuilder",
    "isLibgitType": true,
    "dependencies": [
      "../include/packbuilder.h",
      "../include/oid.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_packbuilder_free",
    "name": "packbuilder"
  },
  {
    "typeName": "packbuilder_stage",
    "type": "enum",
    "cType": "git_packbuilder_stage_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_PACKBUILDER_ADDING_OBJECTS",
        "value": 0,
        "JsName": "ADDING_OBJECTS"
      },
      {
        "name": "GIT_PACKBUILDER_DELTAFICATION",
        "value": 1,
        "JsName": "DELTAFICATION"
      }
    ],
    "owner": "Packbuilder",
    "JsName": "STAGE"
  },
  {
    "type": "class",
    "value": "git_patch",
    "file": "patch.h",
    "used": {
      "returns": [],
      "needs": [
        "git_patch_free",
        "git_patch_from_blob_and_buffer",
        "git_patch_from_blobs",
        "git_patch_from_buffers",
        "git_patch_from_diff",
        "git_patch_get_delta",
        "git_patch_get_hunk",
        "git_patch_get_line_in_hunk",
        "git_patch_line_stats",
        "git_patch_num_hunks",
        "git_patch_num_lines_in_hunk",
        "git_patch_print",
        "git_patch_size",
        "git_patch_to_buf"
      ]
    },
    "typeName": "patch",
    "cType": "git_patch",
    "functions": [
      {
        "type": "function",
        "file": "patch.h",
        "args": [
          {
            "name": "out",
            "type": "git_patch **",
            "comment": "The generated patch; NULL on error",
            "cType": "git_patch **",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "old_blob",
            "type": "const git_blob *",
            "comment": "Blob for old side of diff, or NULL for empty blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_as_path",
            "type": "const char *",
            "comment": "Treat old blob as if it had this filename; can be NULL",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer",
            "type": "const char *",
            "comment": "Raw data for new side of diff, or NULL for empty",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer_len",
            "type": "size_t",
            "comment": "Length of raw data for new side of diff",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer_as_path",
            "type": "const char *",
            "comment": "Treat buffer as if it had this filename; can be NULL",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "type": "const git_diff_options *",
            "comment": "Options for diff, or NULL for default options",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success or error code \n<\n 0",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "patch",
        "cFunctionName": "git_patch_from_blob_and_buffer",
        "cppFunctionName": "FromBlobAndBuffer",
        "jsFunctionName": "fromBlobAndBuffer",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitPatch"
      },
      {
        "type": "function",
        "file": "patch.h",
        "args": [
          {
            "name": "out",
            "type": "git_patch **",
            "comment": "The generated patch; NULL on error",
            "cType": "git_patch **",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "old_blob",
            "type": "const git_blob *",
            "comment": "Blob for old side of diff, or NULL for empty blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_as_path",
            "type": "const char *",
            "comment": "Treat old blob as if it had this filename; can be NULL",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "new_blob",
            "type": "const git_blob *",
            "comment": "Blob for new side of diff, or NULL for empty blob",
            "cType": "const git_blob *",
            "cppClassName": "GitBlob",
            "jsClassName": "Blob",
            "isLibgitType": true,
            "isEnum": false,
            "dependencies": [
              "../include/wrapper.h",
              "node_buffer.h"
            ],
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "new_as_path",
            "type": "const char *",
            "comment": "Treat new blob as if it had this filename; can be NULL",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "type": "const git_diff_options *",
            "comment": "Options for diff, or NULL for default options",
            "cType": "const git_diff_options *",
            "cppClassName": "GitDiffOptions",
            "jsClassName": "DiffOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success or error code \n<\n 0",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "patch",
        "cFunctionName": "git_patch_from_blobs",
        "cppFunctionName": "FromBlobs",
        "jsFunctionName": "fromBlobs",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitPatch"
      },
      {
        "type": "function",
        "file": "patch.h",
        "args": [
          {
            "name": "out",
            "type": "git_patch **",
            "comment": "Output parameter for the delta patch object",
            "cType": "git_patch **",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "diff",
            "type": "git_diff *",
            "comment": "Diff list object",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "isLibgitType": true,
            "isEnum": false,
            "cDependencies": [
              "git2/sys/diff.h"
            ],
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "idx",
            "type": "size_t",
            "comment": "Index into diff list",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, other value \n<\n 0 on error",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "patch",
        "cFunctionName": "git_patch_from_diff",
        "cppFunctionName": "FromDiff",
        "jsFunctionName": "fromDiff",
        "isAsync": false,
        "isConstructorMethod": true,
        "cppClassName": "GitPatch"
      },
      {
        "type": "function",
        "file": "patch.h",
        "args": [
          {
            "name": "patch",
            "type": "const git_patch *",
            "comment": null,
            "cType": "const git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_diff_delta *",
          "comment": null,
          "cType": "const git_diff_delta *",
          "cppClassName": "GitDiffDelta",
          "jsClassName": "DiffDelta",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "patch",
        "cFunctionName": "git_patch_get_delta",
        "cppFunctionName": "GetDelta",
        "jsFunctionName": "getDelta",
        "isPrototypeMethod": true,
        "cppClassName": "GitPatch"
      },
      {
        "type": "function",
        "file": "patch.h",
        "args": [
          {
            "name": "out",
            "type": "const git_diff_hunk **",
            "comment": "Output pointer to git_diff_hunk of hunk",
            "cType": "const git_diff_hunk **",
            "cppClassName": "GitDiffHunk",
            "jsClassName": "DiffHunk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false,
            "returnName": "hunk"
          },
          {
            "name": "lines_in_hunk",
            "type": "size_t *",
            "comment": "Output count of total lines in this hunk",
            "cType": "size_t *",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "patch",
            "type": "git_patch *",
            "comment": "Input pointer to patch object",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "hunk_idx",
            "type": "size_t",
            "comment": "Input index of hunk to get information about",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND if hunk_idx out of range, \n<\n0 on error",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "patch",
        "cFunctionName": "git_patch_get_hunk",
        "cppFunctionName": "GetHunk",
        "jsFunctionName": "getHunk",
        "isAsync": false,
        "isPrototypeMethod": true,
        "cppClassName": "GitPatch"
      },
      {
        "type": "function",
        "file": "patch.h",
        "args": [
          {
            "name": "out",
            "type": "const git_diff_line **",
            "comment": "The git_diff_line data for this line",
            "cType": "const git_diff_line **",
            "cppClassName": "GitDiffLine",
            "jsClassName": "DiffLine",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "patch",
            "type": "git_patch *",
            "comment": "The patch to look in",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "hunk_idx",
            "type": "size_t",
            "comment": "The index of the hunk",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "line_of_hunk",
            "type": "size_t",
            "comment": "The index of the line in the hunk",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 on failure",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "patch",
        "cFunctionName": "git_patch_get_line_in_hunk",
        "cppFunctionName": "GetLineInHunk",
        "jsFunctionName": "getLineInHunk",
        "isAsync": false,
        "isPrototypeMethod": true,
        "cppClassName": "GitPatch"
      },
      {
        "type": "function",
        "file": "patch.h",
        "args": [
          {
            "name": "patch",
            "type": "const git_patch *",
            "comment": null,
            "cType": "const git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "size_t",
          "comment": null,
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "patch",
        "cFunctionName": "git_patch_num_hunks",
        "cppFunctionName": "NumHunks",
        "jsFunctionName": "numHunks",
        "isPrototypeMethod": true,
        "cppClassName": "GitPatch"
      },
      {
        "type": "function",
        "file": "patch.h",
        "args": [
          {
            "name": "patch",
            "type": "const git_patch *",
            "comment": "The git_patch object",
            "cType": "const git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "hunk_idx",
            "type": "size_t",
            "comment": "Index of the hunk",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Number of lines in hunk or -1 if invalid hunk index",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "patch",
        "cFunctionName": "git_patch_num_lines_in_hunk",
        "cppFunctionName": "NumLinesInHunk",
        "jsFunctionName": "numLinesInHunk",
        "isPrototypeMethod": true,
        "cppClassName": "GitPatch"
      },
      {
        "type": "function",
        "file": "patch.h",
        "args": [
          {
            "name": "patch",
            "type": "git_patch *",
            "comment": "A git_patch representing changes to one file",
            "cType": "git_patch *",
            "cppClassName": "GitPatch",
            "jsClassName": "Patch",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "include_context",
            "type": "int",
            "comment": "Include context lines in size if non-zero",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "include_hunk_headers",
            "type": "int",
            "comment": "Include hunk header lines if non-zero",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "include_file_headers",
            "type": "int",
            "comment": "Include file header lines if non-zero",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " The number of bytes of data",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "patch",
        "cFunctionName": "git_patch_size",
        "cppFunctionName": "Size",
        "jsFunctionName": "size",
        "isPrototypeMethod": true,
        "cppClassName": "GitPatch"
      }
    ],
    "cppClassName": "GitPatch",
    "jsClassName": "Patch",
    "filename": "patch",
    "isLibgitType": true,
    "dependencies": [
      "../include/patch.h",
      "../include/blob.h",
      "../include/diff_options.h",
      "../include/diff.h",
      "../include/diff_delta.h",
      "../include/diff_hunk.h",
      "../include/diff_line.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_patch_free",
    "name": "patch"
  },
  {
    "type": "class",
    "value": "git_pathspec",
    "file": "pathspec.h",
    "used": {
      "returns": [],
      "needs": [
        "git_pathspec_free",
        "git_pathspec_match_diff",
        "git_pathspec_match_index",
        "git_pathspec_match_tree",
        "git_pathspec_match_workdir",
        "git_pathspec_matches_path",
        "git_pathspec_new"
      ]
    },
    "typeName": "pathspec",
    "cType": "git_pathspec",
    "functions": [
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "out",
            "type": "git_pathspec_match_list **",
            "comment": "Output list of matches; pass NULL to just get return value",
            "cType": "git_pathspec_match_list **",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "diff",
            "type": "git_diff *",
            "comment": "A generated diff list",
            "cType": "git_diff *",
            "cppClassName": "GitDiff",
            "jsClassName": "Diff",
            "isLibgitType": true,
            "isEnum": false,
            "cDependencies": [
              "git2/sys/diff.h"
            ],
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "type": "uint32_t",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ps",
            "type": "git_pathspec *",
            "comment": "Pathspec to be matched",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, -1 on error, GIT_ENOTFOUND if no matches and\n         the GIT_PATHSPEC_NO_MATCH_ERROR flag is used",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_match_diff",
        "cppFunctionName": "MatchDiff",
        "jsFunctionName": "matchDiff",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "out",
            "type": "git_pathspec_match_list **",
            "comment": "Output list of matches; pass NULL to just get return value",
            "cType": "git_pathspec_match_list **",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "index",
            "type": "git_index *",
            "comment": "The index to match against",
            "cType": "git_index *",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "type": "uint32_t",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ps",
            "type": "git_pathspec *",
            "comment": "Pathspec to be matched",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, -1 on error, GIT_ENOTFOUND if no matches and\n         the GIT_PATHSPEC_NO_MATCH_ERROR flag is used",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_match_index",
        "cppFunctionName": "MatchIndex",
        "jsFunctionName": "matchIndex",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "m",
            "type": "const git_pathspec_match_list *",
            "comment": "The git_pathspec_match_list object",
            "cType": "const git_pathspec_match_list *",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "pos",
            "type": "size_t",
            "comment": "The index into the list",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_diff_delta *",
          "comment": " The filename of the match",
          "cType": "const git_diff_delta *",
          "cppClassName": "GitDiffDelta",
          "jsClassName": "DiffDelta",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_match_list_diff_entry",
        "cppFunctionName": "MatchListDiffEntry",
        "jsFunctionName": "matchListDiffEntry",
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "m",
            "type": "const git_pathspec_match_list *",
            "comment": "The git_pathspec_match_list object",
            "cType": "const git_pathspec_match_list *",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "pos",
            "type": "size_t",
            "comment": "The index into the list",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " The filename of the match",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_match_list_entry",
        "cppFunctionName": "MatchListEntry",
        "jsFunctionName": "matchListEntry",
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "m",
            "type": "const git_pathspec_match_list *",
            "comment": "The git_pathspec_match_list object",
            "cType": "const git_pathspec_match_list *",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " Number of items in match list",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_match_list_entrycount",
        "cppFunctionName": "MatchListEntrycount",
        "jsFunctionName": "matchListEntrycount",
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "m",
            "type": "const git_pathspec_match_list *",
            "comment": "The git_pathspec_match_list object",
            "cType": "const git_pathspec_match_list *",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "pos",
            "type": "size_t",
            "comment": "The index into the failed items",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " The pathspec pattern that didn't match anything",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_match_list_failed_entry",
        "cppFunctionName": "MatchListFailedEntry",
        "jsFunctionName": "matchListFailedEntry",
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "m",
            "type": "const git_pathspec_match_list *",
            "comment": "The git_pathspec_match_list object",
            "cType": "const git_pathspec_match_list *",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " Number of items in original pathspec that had no matches",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_match_list_failed_entrycount",
        "cppFunctionName": "MatchListFailedEntrycount",
        "jsFunctionName": "matchListFailedEntrycount",
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "m",
            "type": "git_pathspec_match_list *",
            "comment": "The git_pathspec_match_list to be freed",
            "cType": "git_pathspec_match_list *",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_match_list_free",
        "cppFunctionName": "MatchListFree",
        "jsFunctionName": "matchListFree",
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "out",
            "type": "git_pathspec_match_list **",
            "comment": "Output list of matches; pass NULL to just get return value",
            "cType": "git_pathspec_match_list **",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "tree",
            "type": "git_tree *",
            "comment": "The root-level tree to match against",
            "cType": "git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "type": "uint32_t",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ps",
            "type": "git_pathspec *",
            "comment": "Pathspec to be matched",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, -1 on error, GIT_ENOTFOUND if no matches and\n         the GIT_PATHSPEC_NO_MATCH_ERROR flag is used",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "examples": {
          "log.c": [
            "ex/v0.21.2/log.html#git_pathspec_match_tree-41"
          ]
        },
        "cFunctionName": "git_pathspec_match_tree",
        "cppFunctionName": "MatchTree",
        "jsFunctionName": "matchTree",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "out",
            "type": "git_pathspec_match_list **",
            "comment": "Output list of matches; pass NULL to just get return value",
            "cType": "git_pathspec_match_list **",
            "cppClassName": "GitPathspecMatchList",
            "jsClassName": "PathspecMatchList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository in which to match; bare repo is an error",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "type": "uint32_t",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ps",
            "type": "git_pathspec *",
            "comment": "Pathspec to be matched",
            "cType": "git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, -1 on error, GIT_ENOTFOUND if no matches and\n         the GIT_PATHSPEC_NO_MATCH_ERROR flag was given",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_match_workdir",
        "cppFunctionName": "MatchWorkdir",
        "jsFunctionName": "matchWorkdir",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitPathspec"
      },
      {
        "type": "function",
        "file": "pathspec.h",
        "args": [
          {
            "name": "ps",
            "type": "const git_pathspec *",
            "comment": "The compiled pathspec",
            "cType": "const git_pathspec *",
            "cppClassName": "GitPathspec",
            "jsClassName": "Pathspec",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "flags",
            "type": "uint32_t",
            "comment": "Combination of git_pathspec_flag_t options to control match",
            "cType": "uint32_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "The pathname to attempt to match",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 is path matches spec, 0 if it does not",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "pathspec",
        "cFunctionName": "git_pathspec_matches_path",
        "cppFunctionName": "MatchesPath",
        "jsFunctionName": "matchesPath",
        "isPrototypeMethod": true,
        "cppClassName": "GitPathspec"
      }
    ],
    "cppClassName": "GitPathspec",
    "jsClassName": "Pathspec",
    "filename": "pathspec",
    "isLibgitType": true,
    "dependencies": [
      "../include/pathspec_match_list.h",
      "../include/diff.h",
      "../include/pathspec.h",
      "../include/index.h",
      "../include/diff_delta.h",
      "../include/tree.h",
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_pathspec_free",
    "name": "pathspec"
  },
  {
    "typeName": "pathspec_flag",
    "type": "enum",
    "cType": "git_pathspec_flag_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_PATHSPEC_DEFAULT",
        "value": 0,
        "JsName": "DEFAULT"
      },
      {
        "name": "GIT_PATHSPEC_IGNORE_CASE",
        "value": 1,
        "JsName": "IGNORE_CASE"
      },
      {
        "name": "GIT_PATHSPEC_USE_CASE",
        "value": 2,
        "JsName": "USE_CASE"
      },
      {
        "name": "GIT_PATHSPEC_NO_GLOB",
        "value": 4,
        "JsName": "NO_GLOB"
      },
      {
        "name": "GIT_PATHSPEC_NO_MATCH_ERROR",
        "value": 8,
        "JsName": "NO_MATCH_ERROR"
      },
      {
        "name": "GIT_PATHSPEC_FIND_FAILURES",
        "value": 16,
        "JsName": "FIND_FAILURES"
      },
      {
        "name": "GIT_PATHSPEC_FAILURES_ONLY",
        "value": 32,
        "JsName": "FAILURES_ONLY"
      }
    ],
    "owner": "Pathspec",
    "JsName": "FLAG"
  },
  {
    "type": "class",
    "value": "git_pathspec_match_list",
    "file": "pathspec.h",
    "used": {
      "returns": [],
      "needs": [
        "git_pathspec_match_diff",
        "git_pathspec_match_index",
        "git_pathspec_match_list_diff_entry",
        "git_pathspec_match_list_entry",
        "git_pathspec_match_list_entrycount",
        "git_pathspec_match_list_failed_entry",
        "git_pathspec_match_list_failed_entrycount",
        "git_pathspec_match_list_free",
        "git_pathspec_match_tree",
        "git_pathspec_match_workdir"
      ]
    },
    "typeName": "pathspec_match_list",
    "cType": "git_pathspec_match_list",
    "functions": [],
    "cppClassName": "GitPathspecMatchList",
    "jsClassName": "PathspecMatchList",
    "filename": "pathspec_match_list",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "pathspec_match_list"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "push.h",
        "args": [
          {
            "name": "push",
            "type": "git_push *",
            "comment": "The push object",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refspec",
            "type": "const char *",
            "comment": "Refspec string",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "push",
        "cFunctionName": "git_push_add_refspec",
        "cppFunctionName": "AddRefspec",
        "jsFunctionName": "addRefspec",
        "isPrototypeMethod": true,
        "cppClassName": "GitPush"
      },
      {
        "type": "function",
        "file": "push.h",
        "args": [
          {
            "name": "push",
            "type": "git_push *",
            "comment": "The push object",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "push",
        "cFunctionName": "git_push_finish",
        "cppFunctionName": "Finish",
        "jsFunctionName": "finish",
        "isPrototypeMethod": true,
        "cppClassName": "GitPush"
      },
      {
        "type": "function",
        "file": "push.h",
        "args": [
          {
            "name": "opts",
            "type": "git_push_options *",
            "comment": "the `git_push_options` instance to initialize.",
            "cType": "git_push_options *",
            "cppClassName": "GitPushOptions",
            "jsClassName": "PushOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "the version of the struct; you should pass\n        `GIT_PUSH_OPTIONS_VERSION` here.",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "push",
        "cFunctionName": "git_push_init_options",
        "cppFunctionName": "InitOptions",
        "jsFunctionName": "initOptions",
        "cppClassName": "GitPush"
      },
      {
        "type": "function",
        "file": "push.h",
        "args": [
          {
            "name": "push",
            "type": "git_push *",
            "comment": "The push object",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "opts",
            "type": "const git_push_options *",
            "comment": "The options to set on the push object",
            "cType": "const git_push_options *",
            "cppClassName": "GitPushOptions",
            "jsClassName": "PushOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "push",
        "cFunctionName": "git_push_set_options",
        "cppFunctionName": "SetOptions",
        "jsFunctionName": "setOptions",
        "isPrototypeMethod": true,
        "cppClassName": "GitPush"
      },
      {
        "type": "function",
        "file": "push.h",
        "args": [
          {
            "name": "push",
            "type": "const git_push *",
            "comment": "The push object",
            "cType": "const git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " true if remote side successfully unpacked, false otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "push",
        "cFunctionName": "git_push_unpack_ok",
        "cppFunctionName": "UnpackOk",
        "jsFunctionName": "unpackOk",
        "isPrototypeMethod": true,
        "cppClassName": "GitPush"
      },
      {
        "type": "function",
        "file": "push.h",
        "args": [
          {
            "name": "push",
            "type": "git_push *",
            "comment": "The push object",
            "cType": "git_push *",
            "cppClassName": "GitPush",
            "jsClassName": "Push",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity to use when updating reflogs",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "reflog_message",
            "type": "const char *",
            "comment": "The message to insert into the reflogs. If NULL, the\n                       default is \"update by push\".",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "push",
        "cFunctionName": "git_push_update_tips",
        "cppFunctionName": "UpdateTips",
        "jsFunctionName": "updateTips",
        "isPrototypeMethod": true,
        "cppClassName": "GitPush"
      }
    ],
    "type": "class",
    "cType": "git_push",
    "typeName": "push",
    "cppClassName": "GitPush",
    "jsClassName": "Push",
    "filename": "push",
    "isLibgitType": true,
    "dependencies": [
      "../include/push.h",
      "../include/push_options.h",
      "../include/signature.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "freeFunctionName": "git_push_free",
    "name": "push"
  },
  {
    "type": "struct",
    "value": "git_push_options",
    "file": "push.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "pb_parallelism",
        "cType": "unsigned int",
        "cppFunctionName": "PbParallelism",
        "jsFunctionName": "pbParallelism",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_push_init_options",
        "git_push_set_options"
      ]
    },
    "typeName": "push_options",
    "cType": "git_push_options",
    "functions": [],
    "cppClassName": "GitPushOptions",
    "jsClassName": "PushOptions",
    "filename": "push_options",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "push_options"
  },
  {
    "typeName": "ref",
    "type": "enum",
    "cType": "git_ref_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_REF_INVALID",
        "value": 0,
        "JsName": "INVALID"
      },
      {
        "name": "GIT_REF_OID",
        "value": 1,
        "JsName": "OID"
      },
      {
        "name": "GIT_REF_SYMBOLIC",
        "value": 2,
        "JsName": "SYMBOLIC"
      },
      {
        "name": "GIT_REF_LISTALL",
        "value": 3,
        "JsName": "LISTALL"
      }
    ],
    "owner": "Enums",
    "JsName": "REF"
  },
  {
    "type": "class",
    "value": "git_refdb",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_refdb_compress",
        "git_refdb_free",
        "git_refdb_new",
        "git_refdb_open",
        "git_refdb_set_backend",
        "git_repository_refdb"
      ]
    },
    "typeName": "refdb",
    "cType": "git_refdb",
    "functions": [
      {
        "type": "function",
        "file": "refdb.h",
        "args": [
          {
            "name": "refdb",
            "type": "git_refdb *",
            "comment": null,
            "cType": "git_refdb *",
            "cppClassName": "GitRefdb",
            "jsClassName": "Refdb",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "refdb",
        "cFunctionName": "git_refdb_compress",
        "cppFunctionName": "Compress",
        "jsFunctionName": "compress",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefdb"
      },
      {
        "type": "function",
        "file": "refdb.h",
        "args": [
          {
            "name": "out",
            "type": "git_refdb **",
            "comment": "location to store the database pointer, if opened.\n\t\t\tSet to NULL if the open failed.",
            "cType": "git_refdb **",
            "cppClassName": "GitRefdb",
            "jsClassName": "Refdb",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "refdb",
        "cFunctionName": "git_refdb_open",
        "cppFunctionName": "Open",
        "jsFunctionName": "open",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRefdb"
      }
    ],
    "cppClassName": "GitRefdb",
    "jsClassName": "Refdb",
    "filename": "refdb",
    "isLibgitType": true,
    "dependencies": [
      "../include/refdb.h",
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_refdb_free",
    "name": "refdb"
  },
  {
    "type": "class",
    "value": "git_reference",
    "file": "types.h",
    "used": {
      "returns": [
        "git_reference__alloc",
        "git_reference__alloc_symbolic"
      ],
      "needs": [
        "git_branch_create",
        "git_branch_delete",
        "git_branch_is_head",
        "git_branch_lookup",
        "git_branch_move",
        "git_branch_name",
        "git_branch_next",
        "git_branch_set_upstream",
        "git_branch_upstream",
        "git_merge_head_from_ref",
        "git_reference_cmp",
        "git_reference_create",
        "git_reference_create_matching",
        "git_reference_delete",
        "git_reference_dwim",
        "git_reference_free",
        "git_reference_is_branch",
        "git_reference_is_note",
        "git_reference_is_remote",
        "git_reference_is_tag",
        "git_reference_lookup",
        "git_reference_name",
        "git_reference_next",
        "git_reference_owner",
        "git_reference_peel",
        "git_reference_rename",
        "git_reference_resolve",
        "git_reference_set_target",
        "git_reference_shorthand",
        "git_reference_symbolic_create",
        "git_reference_symbolic_create_matching",
        "git_reference_symbolic_set_target",
        "git_reference_symbolic_target",
        "git_reference_target",
        "git_reference_target_peel",
        "git_reference_type",
        "git_repository_head",
        "git_revparse_ext"
      ]
    },
    "typeName": "reference",
    "cType": "git_reference",
    "functions": [
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref1",
            "type": "const git_reference *",
            "comment": "The first git_reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "ref2",
            "type": "const git_reference *",
            "comment": "The second git_reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 if the same, else a stable but meaningless ordering.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_cmp",
        "cppFunctionName": "Cmp",
        "jsFunctionName": "cmp",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "Pointer to the newly created reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where that reference will live",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "The name of the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "The object id pointed to by the reference.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing references",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EEXISTS, GIT_EINVALIDSPEC or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_create",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "Pointer to the newly created reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where that reference will live",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "The name of the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "The object id pointed to by the reference.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing references",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "current_id",
            "type": "const git_oid *",
            "comment": "The expected value of the reference at the time of update",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EMODIFIED if the value of the reference\n has changed, GIT_EEXISTS, GIT_EINVALIDSPEC or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_create_matching",
        "cppFunctionName": "CreateMatching",
        "jsFunctionName": "createMatching",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "git_reference *",
            "comment": "The reference to remove",
            "cType": "git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, GIT_EMODIFIED or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_delete",
        "cppFunctionName": "Delete",
        "jsFunctionName": "delete",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "pointer in which to store the reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository in which to look",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "shorthand",
            "type": "const char *",
            "comment": "the short name for the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_dwim",
        "cppFunctionName": "Dwim",
        "jsFunctionName": "dwim",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "refname",
            "type": "const char *",
            "comment": "the reference's name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_ensure_log",
        "cppFunctionName": "EnsureLog",
        "jsFunctionName": "ensureLog",
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "refname",
            "type": "const char *",
            "comment": "the reference's name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 when no reflog can be found, 1 when it exists;\n otherwise an error code.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_has_log",
        "cppFunctionName": "HasLog",
        "jsFunctionName": "hasLog",
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "A git reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 when the reference lives in the refs/heads\n namespace; 0 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_is_branch",
        "cppFunctionName": "IsBranch",
        "jsFunctionName": "isBranch",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "A git reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 when the reference lives in the refs/notes\n namespace; 0 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_is_note",
        "cppFunctionName": "IsNote",
        "jsFunctionName": "isNote",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "A git reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 when the reference lives in the refs/remotes\n namespace; 0 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_is_remote",
        "cppFunctionName": "IsRemote",
        "jsFunctionName": "isRemote",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "A git reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 when the reference lives in the refs/tags\n namespace; 0 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_is_tag",
        "cppFunctionName": "IsTag",
        "jsFunctionName": "isTag",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "refname",
            "type": "const char *",
            "comment": "name to be checked.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the reference name is acceptable; 0 if it isn't",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_is_valid_name",
        "cppFunctionName": "IsValidName",
        "jsFunctionName": "isValidName",
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "array",
            "type": "git_strarray *",
            "comment": "Pointer to a git_strarray structure where\n\t\tthe reference names will be stored",
            "cType": "git_strarray *",
            "cppClassName": "Array",
            "jsClassName": "Array",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false,
            "shouldAlloc": true,
            "size": "count",
            "key": "strings"
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where to find the refs",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_reference_list-56"
          ]
        },
        "cFunctionName": "git_reference_list",
        "cppFunctionName": "List",
        "jsFunctionName": "list",
        "isAsync": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "pointer to the looked-up reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to look up the reference",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "the long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND, GIT_EINVALIDSPEC or an error code.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_reference_lookup-52"
          ]
        },
        "cFunctionName": "git_reference_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "The reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the full name for the ref",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_name",
        "cppFunctionName": "Name",
        "jsFunctionName": "name",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_oid *",
            "comment": "Pointer to oid to be filled in",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository in which to look up the reference",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "The long name for the reference (e.g. HEAD, refs/heads/master, refs/tags/v0.1.0, ...)",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND, GIT_EINVALIDSPEC or an error code.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_name_to_id",
        "cppFunctionName": "NameToId",
        "jsFunctionName": "nameToId",
        "isAsync": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "buffer_out",
            "type": "char *",
            "comment": "User allocated buffer to store normalized name",
            "cType": "char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer_size",
            "type": "size_t",
            "comment": "Size of buffer_out",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "Reference name to be checked.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "type": "unsigned int",
            "comment": "Flags to constrain name validation rules - see the\n              GIT_REF_FORMAT constants above.",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EBUFS if buffer is too small, GIT_EINVALIDSPEC\n or an error code.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_normalize_name",
        "cppFunctionName": "NormalizeName",
        "jsFunctionName": "normalizeName",
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "The reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " a pointer to the repo",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_object **",
            "comment": "Pointer to the peeled git_object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "ref",
            "type": "git_reference *",
            "comment": "The reference to be processed",
            "cType": "git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "type",
            "type": "git_otype",
            "comment": "The type of the requested object (GIT_OBJ_COMMIT,\n GIT_OBJ_TAG, GIT_OBJ_TREE, GIT_OBJ_BLOB or GIT_OBJ_ANY).",
            "cType": "git_otype",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EAMBIGUOUS, GIT_ENOTFOUND or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_peel",
        "cppFunctionName": "Peel",
        "jsFunctionName": "peel",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": null,
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "The reference to remove",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_remove",
        "cppFunctionName": "Remove",
        "jsFunctionName": "remove",
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "new_ref",
            "type": "git_reference **",
            "comment": null,
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "ref",
            "type": "git_reference *",
            "comment": "The reference to rename",
            "cType": "git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "new_name",
            "type": "const char *",
            "comment": "The new name for the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite an existing reference",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_rename",
        "cppFunctionName": "Rename",
        "jsFunctionName": "rename",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "Pointer to the peeled reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "The reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_resolve",
        "cppFunctionName": "Resolve",
        "jsFunctionName": "resolve",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "Pointer to the newly created reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "ref",
            "type": "git_reference *",
            "comment": "The reference",
            "cType": "git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "The new target OID for the reference",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EMODIFIED if the value of the reference\n has changed since it was read, or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_set_target",
        "cppFunctionName": "SetTarget",
        "jsFunctionName": "setTarget",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "a reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the human-readable version of the name",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "examples": {
          "status.c": [
            "ex/v0.21.2/status.html#git_reference_shorthand-2"
          ]
        },
        "cFunctionName": "git_reference_shorthand",
        "cppFunctionName": "Shorthand",
        "jsFunctionName": "shorthand",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "Pointer to the newly created reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where that reference will live",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "The name of the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "type": "const char *",
            "comment": "The target of the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing references",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EEXISTS, GIT_EINVALIDSPEC or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_symbolic_create",
        "cppFunctionName": "SymbolicCreate",
        "jsFunctionName": "symbolicCreate",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "Pointer to the newly created reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where that reference will live",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "The name of the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "type": "const char *",
            "comment": "The target of the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing references",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "current_value",
            "type": "const char *",
            "comment": "The expected value of the reference when updating",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EEXISTS, GIT_EINVALIDSPEC, GIT_EMODIFIED or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_symbolic_create_matching",
        "cppFunctionName": "SymbolicCreateMatching",
        "jsFunctionName": "symbolicCreateMatching",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "Pointer to the newly created reference",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "ref",
            "type": "git_reference *",
            "comment": "The reference",
            "cType": "git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "target",
            "type": "const char *",
            "comment": "The new target for the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EINVALIDSPEC or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_symbolic_set_target",
        "cppFunctionName": "SymbolicSetTarget",
        "jsFunctionName": "symbolicSetTarget",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "The reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " a pointer to the name if available, NULL otherwise",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_reference_symbolic_target-54"
          ]
        },
        "cFunctionName": "git_reference_symbolic_target",
        "cppFunctionName": "SymbolicTarget",
        "jsFunctionName": "symbolicTarget",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "The reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " a pointer to the oid if available, NULL otherwise",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_reference_target-53"
          ]
        },
        "cFunctionName": "git_reference_target",
        "cppFunctionName": "Target",
        "jsFunctionName": "target",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "The reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " a pointer to the oid if available, NULL otherwise",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "cFunctionName": "git_reference_target_peel",
        "cppFunctionName": "TargetPeel",
        "jsFunctionName": "targetPeel",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      },
      {
        "type": "function",
        "file": "refs.h",
        "args": [
          {
            "name": "ref",
            "type": "const git_reference *",
            "comment": "The reference",
            "cType": "const git_reference *",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_ref_t",
          "comment": " the type",
          "cType": "git_ref_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "reference",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_reference_type-55"
          ]
        },
        "cFunctionName": "git_reference_type",
        "cppFunctionName": "Type",
        "jsFunctionName": "type",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefs"
      }
    ],
    "cppClassName": "GitRefs",
    "jsClassName": "Refs",
    "filename": "reference",
    "isLibgitType": true,
    "dependencies": [
      "../include/reference.h",
      "../include/repository.h",
      "../include/oid.h",
      "../include/signature.h",
      "../include/strarray.h",
      "../include/object.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_reference_free",
    "name": "reference"
  },
  {
    "type": "class",
    "value": "git_reflog",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_reflog_append",
        "git_reflog_drop",
        "git_reflog_entry_byindex",
        "git_reflog_entrycount",
        "git_reflog_free",
        "git_reflog_read",
        "git_reflog_write"
      ]
    },
    "typeName": "reflog",
    "cType": "git_reflog",
    "functions": [
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "reflog",
            "type": "git_reflog *",
            "comment": "an existing reflog object",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "the OID the reference is now pointing to",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "committer",
            "type": "const git_signature *",
            "comment": "the signature of the committer",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "msg",
            "type": "const char *",
            "comment": "the reflog message",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_append",
        "cppFunctionName": "Append",
        "jsFunctionName": "append",
        "isPrototypeMethod": true,
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "the reflog to delete",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_delete",
        "cppFunctionName": "Delete",
        "jsFunctionName": "delete",
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "reflog",
            "type": "git_reflog *",
            "comment": "a previously loaded reflog.",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "idx",
            "type": "size_t",
            "comment": "the position of the entry to remove. Should be greater than or\n equal to 0 (zero) and less than `git_reflog_entrycount()`.",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "rewrite_previous_entry",
            "type": "int",
            "comment": "1 to rewrite the history; 0 otherwise.",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND if the entry doesn't exist\n or an error code.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_drop",
        "cppFunctionName": "Drop",
        "jsFunctionName": "drop",
        "isPrototypeMethod": true,
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "reflog",
            "type": "git_reflog *",
            "comment": "a previously loaded reflog",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "idx",
            "type": "size_t",
            "comment": "the position of the entry to lookup. Should be greater than or\n equal to 0 (zero) and less than `git_reflog_entrycount()`.",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_reflog_entry *",
          "comment": " the entry; NULL if not found",
          "cType": "const git_reflog_entry *",
          "cppClassName": "GitReflogEntry",
          "jsClassName": "ReflogEntry",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_entry_byindex",
        "cppFunctionName": "EntryByindex",
        "jsFunctionName": "entryByindex",
        "isPrototypeMethod": true,
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_reflog_entry *",
            "comment": "a reflog entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "GitReflogEntry",
            "jsClassName": "ReflogEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_signature *",
          "comment": " the committer",
          "cType": "const git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_signature_new": {
              "isAsync": false
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_entry_committer",
        "cppFunctionName": "EntryCommitter",
        "jsFunctionName": "entryCommitter",
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_reflog_entry *",
            "comment": "a reflog entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "GitReflogEntry",
            "jsClassName": "ReflogEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " the new oid at this time",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_entry_id_new",
        "cppFunctionName": "EntryIdNew",
        "jsFunctionName": "entryIdNew",
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_reflog_entry *",
            "comment": "a reflog entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "GitReflogEntry",
            "jsClassName": "ReflogEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " the old oid",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_entry_id_old",
        "cppFunctionName": "EntryIdOld",
        "jsFunctionName": "entryIdOld",
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_reflog_entry *",
            "comment": "a reflog entry",
            "cType": "const git_reflog_entry *",
            "cppClassName": "GitReflogEntry",
            "jsClassName": "ReflogEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the log msg",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_entry_message",
        "cppFunctionName": "EntryMessage",
        "jsFunctionName": "entryMessage",
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "reflog",
            "type": "git_reflog *",
            "comment": "the previously loaded reflog",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " the number of log entries",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_entrycount",
        "cppFunctionName": "Entrycount",
        "jsFunctionName": "entrycount",
        "isPrototypeMethod": true,
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "out",
            "type": "git_reflog **",
            "comment": "pointer to reflog",
            "cType": "git_reflog **",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repostiory",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "reference to look up",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_read",
        "cppFunctionName": "Read",
        "jsFunctionName": "read",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "old_name",
            "type": "const char *",
            "comment": "the old name of the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "the new name of the reference",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EINVALIDSPEC or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_rename",
        "cppFunctionName": "Rename",
        "jsFunctionName": "rename",
        "cppClassName": "GitReflog"
      },
      {
        "type": "function",
        "file": "reflog.h",
        "args": [
          {
            "name": "reflog",
            "type": "git_reflog *",
            "comment": "an existing reflog object",
            "cType": "git_reflog *",
            "cppClassName": "GitReflog",
            "jsClassName": "Reflog",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "reflog",
        "cFunctionName": "git_reflog_write",
        "cppFunctionName": "Write",
        "jsFunctionName": "write",
        "isPrototypeMethod": true,
        "cppClassName": "GitReflog"
      }
    ],
    "cppClassName": "GitReflog",
    "jsClassName": "Reflog",
    "filename": "reflog",
    "isLibgitType": true,
    "dependencies": [
      "../include/reflog.h",
      "../include/oid.h",
      "../include/signature.h",
      "../include/repository.h",
      "../include/reflog_entry.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_reflog_free",
    "name": "reflog"
  },
  {
    "type": "class",
    "value": "git_reflog_entry",
    "file": "types.h",
    "used": {
      "returns": [
        "git_reflog_entry_byindex"
      ],
      "needs": [
        "git_reflog_entry_committer",
        "git_reflog_entry_id_new",
        "git_reflog_entry_id_old",
        "git_reflog_entry_message"
      ]
    },
    "typeName": "reflog_entry",
    "cType": "git_reflog_entry",
    "functions": [],
    "cppClassName": "GitReflogEntry",
    "jsClassName": "ReflogEntry",
    "filename": "reflog_entry",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "reflog_entry"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "refspec.h",
        "args": [
          {
            "name": "spec",
            "type": "const git_refspec *",
            "comment": "refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_direction",
          "comment": " GIT_DIRECTION_FETCH or GIT_DIRECTION_PUSH",
          "cType": "git_direction",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "refspec",
        "cFunctionName": "git_refspec_direction",
        "cppFunctionName": "Direction",
        "jsFunctionName": "direction",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefspec"
      },
      {
        "type": "function",
        "file": "refspec.h",
        "args": [
          {
            "name": "refspec",
            "type": "const git_refspec *",
            "comment": "the refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the refspec's destination specifier",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "refspec",
        "cFunctionName": "git_refspec_dst",
        "cppFunctionName": "Dst",
        "jsFunctionName": "dst",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefspec"
      },
      {
        "type": "function",
        "file": "refspec.h",
        "args": [
          {
            "name": "refspec",
            "type": "const git_refspec *",
            "comment": "the refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refname",
            "type": "const char *",
            "comment": "the name of the reference to check",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the refspec matches, 0 otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "refspec",
        "cFunctionName": "git_refspec_dst_matches",
        "cppFunctionName": "DstMatches",
        "jsFunctionName": "dstMatches",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefspec"
      },
      {
        "type": "function",
        "file": "refspec.h",
        "args": [
          {
            "name": "refspec",
            "type": "const git_refspec *",
            "comment": "the refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if force update has been set, 0 otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "refspec",
        "cFunctionName": "git_refspec_force",
        "cppFunctionName": "Force",
        "jsFunctionName": "force",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefspec"
      },
      {
        "type": "function",
        "file": "refspec.h",
        "args": [
          {
            "name": "refspec",
            "type": "const git_refspec *",
            "comment": "the refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the refspec's source specifier",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "refspec",
        "cFunctionName": "git_refspec_src",
        "cppFunctionName": "Src",
        "jsFunctionName": "src",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefspec"
      },
      {
        "type": "function",
        "file": "refspec.h",
        "args": [
          {
            "name": "refspec",
            "type": "const git_refspec *",
            "comment": "the refspec",
            "cType": "const git_refspec *",
            "cppClassName": "GitRefspec",
            "jsClassName": "Refspec",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refname",
            "type": "const char *",
            "comment": "the name of the reference to check",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the refspec matches, 0 otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "refspec",
        "cFunctionName": "git_refspec_src_matches",
        "cppFunctionName": "SrcMatches",
        "jsFunctionName": "srcMatches",
        "isPrototypeMethod": true,
        "cppClassName": "GitRefspec"
      }
    ],
    "type": "class",
    "cType": "git_refspec",
    "typeName": "refspec",
    "cppClassName": "GitRefspec",
    "jsClassName": "Refspec",
    "filename": "refspec",
    "isLibgitType": true,
    "dependencies": [
      "../include/refspec.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "refspec"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refspec",
            "type": "const char *",
            "comment": "the new fetch refspec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error value",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_add_fetch",
        "cppFunctionName": "AddFetch",
        "jsFunctionName": "addFetch",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refspec",
            "type": "const char *",
            "comment": "the new push refspec",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error value",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_add_push",
        "cppFunctionName": "AddPush",
        "jsFunctionName": "addPush",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "const git_remote *",
            "comment": "the remote to query",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_remote_autotag_option_t",
          "comment": " the auto-follow setting",
          "cType": "git_remote_autotag_option_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_autotag",
        "cppFunctionName": "Autotag",
        "jsFunctionName": "autotag",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to configure",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "check",
            "type": "int",
            "comment": "whether to check the server's certificate (defaults to yes)",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_check_cert",
        "cppFunctionName": "CheckCert",
        "jsFunctionName": "checkCert",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_clear_refspecs",
        "cppFunctionName": "ClearRefspecs",
        "jsFunctionName": "clearRefspecs",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to connect to",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "direction",
            "type": "git_direction",
            "comment": "GIT_DIRECTION_FETCH if you want to fetch or\n GIT_DIRECTION_PUSH if you want to push",
            "cType": "git_direction",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "examples": {
          "network/fetch.c": [
            "ex/v0.21.2/network/fetch.html#git_remote_connect-6"
          ],
          "network/ls-remote.c": [
            "ex/v0.21.2/network/ls-remote.html#git_remote_connect-4"
          ]
        },
        "cFunctionName": "git_remote_connect",
        "cppFunctionName": "Connect",
        "jsFunctionName": "connect",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "const git_remote *",
            "comment": "the remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if it's connected, 0 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_connected",
        "cppFunctionName": "Connected",
        "jsFunctionName": "connected",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "out",
            "type": "git_remote **",
            "comment": "the resulting remote",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository in which to create the remote",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "the remote's name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "url",
            "type": "const char *",
            "comment": "the remote's url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_create",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "out",
            "type": "git_remote **",
            "comment": "pointer to the new remote object",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the associated repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "url",
            "type": "const char *",
            "comment": "the remote repository's URL",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "fetch",
            "type": "const char *",
            "comment": "the fetch refspec to use for this remote.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "examples": {
          "network/fetch.c": [
            "ex/v0.21.2/network/fetch.html#git_remote_create_anonymous-4"
          ],
          "network/ls-remote.c": [
            "ex/v0.21.2/network/ls-remote.html#git_remote_create_anonymous-2"
          ]
        },
        "cFunctionName": "git_remote_create_anonymous",
        "cppFunctionName": "CreateAnonymous",
        "jsFunctionName": "createAnonymous",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "out",
            "type": "git_remote **",
            "comment": "the resulting remote",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository in which to create the remote",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "the remote's name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "url",
            "type": "const char *",
            "comment": "the remote's url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "fetch",
            "type": "const char *",
            "comment": "the remote fetch value",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, GIT_EINVALIDSPEC, GIT_EEXISTS or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_create_with_fetchspec",
        "cppFunctionName": "CreateWithFetchspec",
        "jsFunctionName": "createWithFetchspec",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "A valid remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or an error code.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_delete",
        "cppFunctionName": "Delete",
        "jsFunctionName": "delete",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to disconnect from",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "examples": {
          "network/fetch.c": [
            "ex/v0.21.2/network/fetch.html#git_remote_disconnect-8"
          ]
        },
        "cFunctionName": "git_remote_disconnect",
        "cppFunctionName": "Disconnect",
        "jsFunctionName": "disconnect",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": null,
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "examples": {
          "network/fetch.c": [
            "ex/v0.21.2/network/fetch.html#git_remote_download-7"
          ]
        },
        "cFunctionName": "git_remote_download",
        "cppFunctionName": "Download",
        "jsFunctionName": "download",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "dest",
            "type": "git_remote **",
            "comment": "pointer where to store the copy",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "source",
            "type": "git_remote *",
            "comment": "object to copy",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_dup",
        "cppFunctionName": "Dup",
        "jsFunctionName": "dup",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to fetch from",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity to use when updating reflogs",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "reflog_message",
            "type": "const char *",
            "comment": "The message to insert into the reflogs. If NULL, the\n\t\t\t\t\t\t\t\t default is \"fetch\"",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_fetch",
        "cppFunctionName": "Fetch",
        "jsFunctionName": "fetch",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "const git_remote *",
            "comment": "the remote to query",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "n",
            "type": "size_t",
            "comment": "the refspec to get",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_refspec *",
          "comment": " the nth refspec",
          "cType": "const git_refspec *",
          "cppClassName": "GitRefspec",
          "jsClassName": "Refspec",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_get_refspec",
        "cppFunctionName": "GetRefspec",
        "jsFunctionName": "getRefspec",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "opts",
            "type": "git_remote_callbacks *",
            "comment": "the `git_remote_callbacks` struct to initialize",
            "cType": "git_remote_callbacks *",
            "cppClassName": "GitRemoteCallbacks",
            "jsClassName": "RemoteCallbacks",
            "isLibgitType": true,
            "isEnum": false,
            "fields": {
              "completion": {
                "ignore": true
              },
              "sideband_progress": {
                "ignore": true
              },
              "transfer_progress": {
                "ignore": true
              },
              "update_tips": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "Version of struct; pass `GIT_REMOTE_CALLBACKS_VERSION`",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_init_callbacks",
        "cppFunctionName": "InitCallbacks",
        "jsFunctionName": "initCallbacks",
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote_name",
            "type": "const char *",
            "comment": "name to be checked.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the reference name is acceptable; 0 if it isn't",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_is_valid_name",
        "cppFunctionName": "IsValidName",
        "jsFunctionName": "isValidName",
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "out",
            "type": "git_strarray *",
            "comment": "a string array which receives the names of the remotes",
            "cType": "git_strarray *",
            "cppClassName": "GitStrarray",
            "jsClassName": "Strarray",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false,
            "shouldAlloc": true
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to query",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_list",
        "cppFunctionName": "List",
        "jsFunctionName": "list",
        "isAsync": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "out",
            "type": "git_remote **",
            "comment": "pointer to the new remote object",
            "cType": "git_remote **",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the associated repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "the remote's name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, GIT_ENOTFOUND, GIT_EINVALIDSPEC or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "examples": {
          "network/fetch.c": [
            "ex/v0.21.2/network/fetch.html#git_remote_load-5"
          ],
          "network/ls-remote.c": [
            "ex/v0.21.2/network/ls-remote.html#git_remote_load-3"
          ]
        },
        "cFunctionName": "git_remote_load",
        "cppFunctionName": "Load",
        "jsFunctionName": "load",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "const git_remote *",
            "comment": "the remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " a pointer to the name or NULL for in-memory remotes",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_name",
        "cppFunctionName": "Name",
        "jsFunctionName": "name",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "const git_remote *",
            "comment": "the remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " a pointer to the repository",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "const git_remote *",
            "comment": "the remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " a pointer to the url or NULL if no special url for pushing is set",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_pushurl",
        "cppFunctionName": "Pushurl",
        "jsFunctionName": "pushurl",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "const git_remote *",
            "comment": "the remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " the amount of refspecs configured in this remote",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_refspec_count",
        "cppFunctionName": "RefspecCount",
        "jsFunctionName": "refspecCount",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "const git_remote *",
            "comment": "the remote to save to config",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, GIT_EINVALIDSPEC or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_save",
        "cppFunctionName": "Save",
        "jsFunctionName": "save",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to configure",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "value",
            "type": "git_remote_autotag_option_t",
            "comment": "a GIT_REMOTE_DOWNLOAD_TAGS value",
            "cType": "git_remote_autotag_option_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_set_autotag",
        "cppFunctionName": "SetAutotag",
        "jsFunctionName": "setAutotag",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to configure",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "callbacks",
            "type": "const git_remote_callbacks *",
            "comment": "a pointer to the user's callback settings",
            "cType": "const git_remote_callbacks *",
            "cppClassName": "GitRemoteCallbacks",
            "jsClassName": "RemoteCallbacks",
            "isLibgitType": true,
            "isEnum": false,
            "fields": {
              "completion": {
                "ignore": true
              },
              "sideband_progress": {
                "ignore": true
              },
              "transfer_progress": {
                "ignore": true
              },
              "update_tips": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "examples": {
          "network/fetch.c": [
            "ex/v0.21.2/network/fetch.html#git_remote_set_callbacks-12"
          ],
          "network/ls-remote.c": [
            "ex/v0.21.2/network/ls-remote.html#git_remote_set_callbacks-7"
          ]
        },
        "cFunctionName": "git_remote_set_callbacks",
        "cppFunctionName": "SetCallbacks",
        "jsFunctionName": "setCallbacks",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to modify",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "array",
            "type": "git_strarray *",
            "comment": "the new list of fetch resfpecs",
            "cType": "git_strarray *",
            "cppClassName": "GitStrarray",
            "jsClassName": "Strarray",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_set_fetch_refspecs",
        "cppFunctionName": "SetFetchRefspecs",
        "jsFunctionName": "setFetchRefspecs",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to modify",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "array",
            "type": "git_strarray *",
            "comment": "the new list of push resfpecs",
            "cType": "git_strarray *",
            "cppClassName": "GitStrarray",
            "jsClassName": "Strarray",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_set_push_refspecs",
        "cppFunctionName": "SetPushRefspecs",
        "jsFunctionName": "setPushRefspecs",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "url",
            "type": "const char *",
            "comment": "the url to set or NULL to clear the pushurl",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error value",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_set_pushurl",
        "cppFunctionName": "SetPushurl",
        "jsFunctionName": "setPushurl",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to configure",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "transport",
            "type": "git_transport *",
            "comment": "the transport object for the remote to use",
            "cType": "git_transport *",
            "cppClassName": "GitTransport",
            "jsClassName": "Transport",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_set_transport",
        "cppFunctionName": "SetTransport",
        "jsFunctionName": "setTransport",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to configure",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "value",
            "type": "int",
            "comment": "0 to disable updating FETCH_HEAD",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_set_update_fetchhead",
        "cppFunctionName": "SetUpdateFetchhead",
        "jsFunctionName": "setUpdateFetchhead",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "url",
            "type": "const char *",
            "comment": "the url to set",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error value",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_set_url",
        "cppFunctionName": "SetUrl",
        "jsFunctionName": "setUrl",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": null,
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_transfer_progress *",
          "comment": null,
          "cType": "const git_transfer_progress *",
          "cppClassName": "GitTransferProgress",
          "jsClassName": "TransferProgress",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "examples": {
          "network/fetch.c": [
            "ex/v0.21.2/network/fetch.html#git_remote_stats-13"
          ]
        },
        "cFunctionName": "git_remote_stats",
        "cppFunctionName": "Stats",
        "jsFunctionName": "stats",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_stop",
        "cppFunctionName": "Stop",
        "jsFunctionName": "stop",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "url",
            "type": "const char *",
            "comment": "the url to check",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the url is supported, 0 otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_supported_url",
        "cppFunctionName": "SupportedUrl",
        "jsFunctionName": "supportedUrl",
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to query",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " the update FETCH_HEAD setting",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_update_fetchhead",
        "cppFunctionName": "UpdateFetchhead",
        "jsFunctionName": "updateFetchhead",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "git_remote *",
            "comment": "the remote to update",
            "cType": "git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity to use when updating reflogs",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "reflog_message",
            "type": "const char *",
            "comment": "The message to insert into the reflogs. If NULL, the\n                       default is \"fetch \n<name\n>\", where \n<name\n> is the name of\n                       the remote (or its url, for in-memory remotes).",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "examples": {
          "network/fetch.c": [
            "ex/v0.21.2/network/fetch.html#git_remote_update_tips-11"
          ]
        },
        "cFunctionName": "git_remote_update_tips",
        "cppFunctionName": "UpdateTips",
        "jsFunctionName": "updateTips",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "remote",
            "type": "const git_remote *",
            "comment": "the remote",
            "cType": "const git_remote *",
            "cppClassName": "GitRemote",
            "jsClassName": "Remote",
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " a pointer to the url",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_url",
        "cppFunctionName": "Url",
        "jsFunctionName": "url",
        "isPrototypeMethod": true,
        "cppClassName": "GitRemote"
      },
      {
        "type": "function",
        "file": "remote.h",
        "args": [
          {
            "name": "url",
            "type": "const char *",
            "comment": "the url to check",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the url is valid, 0 otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "remote",
        "cFunctionName": "git_remote_valid_url",
        "cppFunctionName": "ValidUrl",
        "jsFunctionName": "validUrl",
        "cppClassName": "GitRemote"
      }
    ],
    "type": "class",
    "cType": "git_remote",
    "typeName": "remote",
    "cppClassName": "GitRemote",
    "jsClassName": "Remote",
    "filename": "remote",
    "isLibgitType": true,
    "dependencies": [
      "../include/remote.h",
      "../include/repository.h",
      "../include/signature.h",
      "../include/refspec.h",
      "../include/remote_callbacks.h",
      "../include/strarray.h",
      "../include/transport.h",
      "../include/transfer_progress.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "freeFunctionName": "git_remote_free",
    "name": "remote"
  },
  {
    "type": "struct",
    "value": "git_remote_callbacks",
    "file": "remote.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_cred_acquire_cb",
        "name": "credentials",
        "cType": "git_cred_acquire_cb",
        "cppFunctionName": "Credentials",
        "jsFunctionName": "credentials",
        "cppClassName": "GitCredAcquireCb",
        "jsClassName": "CredAcquireCb",
        "isCallbackFunction": true,
        "args": [
          {
            "name": "cred",
            "cType": "git_cred **",
            "isReturn": true,
            "cppClassName": "GitCred",
            "jsClassName": "Cred"
          },
          {
            "name": "url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "username_from_url",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String"
          },
          {
            "name": "allowed_types",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number"
          },
          {
            "name": "payload",
            "cType": "void *",
            "cppClassName": "Void",
            "jsClassName": "Void"
          }
        ],
        "returnType": "int",
        "returnNoResults": 1,
        "returnSuccess": 0,
        "returnError": -1
      },
      {
        "type": "void *",
        "name": "payload",
        "cType": "void *",
        "cppFunctionName": "Payload",
        "jsFunctionName": "payload",
        "cppClassName": "Void",
        "jsClassName": "Void",
        "isCallbackFunction": false,
        "payloadFor": "*"
      }
    ],
    "used": {
      "returns": [
        "git_remote_get_callbacks"
      ],
      "needs": [
        "git_remote_init_callbacks",
        "git_remote_set_callbacks"
      ]
    },
    "typeName": "remote_callbacks",
    "cType": "git_remote_callbacks",
    "functions": [],
    "cppClassName": "GitRemoteCallbacks",
    "jsClassName": "RemoteCallbacks",
    "filename": "remote_callbacks",
    "isLibgitType": true,
    "dependencies": [
      "../include/cred.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "remote_callbacks"
  },
  {
    "typeName": "remote_completion_type",
    "type": "enum",
    "cType": "git_remote_completion_type",
    "isMask": false,
    "values": [
      {
        "name": "GIT_REMOTE_COMPLETION_DOWNLOAD",
        "value": 0,
        "JsName": "COMPLETION_DOWNLOAD"
      },
      {
        "name": "GIT_REMOTE_COMPLETION_INDEXING",
        "value": 1,
        "JsName": "COMPLETION_INDEXING"
      },
      {
        "name": "GIT_REMOTE_COMPLETION_ERROR",
        "value": 2,
        "JsName": "COMPLETION_ERROR"
      }
    ],
    "owner": "Remote",
    "JsName": "COMPLETION_TYPE"
  },
  {
    "type": "class",
    "value": "git_repository",
    "file": "types.h",
    "used": {
      "returns": [
        "git_blob_owner",
        "git_commit_owner",
        "git_filter_source_repo",
        "git_index_owner",
        "git_object_owner",
        "git_reference_owner",
        "git_remote_owner",
        "git_revwalk_repository",
        "git_submodule_owner",
        "git_tag_owner",
        "git_tree_owner"
      ],
      "needs": [
        "git_attr_add_macro",
        "git_attr_cache_flush",
        "git_attr_foreach",
        "git_attr_get",
        "git_attr_get_many",
        "git_blame_file",
        "git_blob_create_frombuffer",
        "git_blob_create_fromchunks",
        "git_blob_create_fromdisk",
        "git_blob_create_fromworkdir",
        "git_blob_lookup",
        "git_blob_lookup_prefix",
        "git_branch_create",
        "git_branch_iterator_new",
        "git_branch_lookup",
        "git_checkout_head",
        "git_checkout_index",
        "git_checkout_tree",
        "git_cherry_pick",
        "git_cherry_pick_commit",
        "git_clone",
        "git_clone_into",
        "git_clone_local_into",
        "git_commit_create",
        "git_commit_create_from_callback",
        "git_commit_create_from_ids",
        "git_commit_create_v",
        "git_commit_lookup",
        "git_commit_lookup_prefix",
        "git_diff_commit_as_email",
        "git_diff_index_to_workdir",
        "git_diff_tree_to_index",
        "git_diff_tree_to_tree",
        "git_diff_tree_to_workdir",
        "git_diff_tree_to_workdir_with_index",
        "git_filter_list_apply_to_file",
        "git_filter_list_load",
        "git_filter_list_new",
        "git_graph_ahead_behind",
        "git_graph_descendant_of",
        "git_ignore_add_rule",
        "git_ignore_clear_internal_rules",
        "git_ignore_path_is_ignored",
        "git_index_write_tree_to",
        "git_merge",
        "git_merge_analysis",
        "git_merge_base",
        "git_merge_base_many",
        "git_merge_base_octopus",
        "git_merge_commits",
        "git_merge_file_from_index",
        "git_merge_head_from_fetchhead",
        "git_merge_head_from_id",
        "git_merge_head_from_ref",
        "git_merge_trees",
        "git_note_create",
        "git_note_default_ref",
        "git_note_foreach",
        "git_note_iterator_new",
        "git_note_read",
        "git_note_remove",
        "git_object_lookup",
        "git_object_lookup_prefix",
        "git_packbuilder_new",
        "git_pathspec_match_workdir",
        "git_refdb_backend_fs",
        "git_refdb_new",
        "git_refdb_open",
        "git_reference_create",
        "git_reference_create_matching",
        "git_reference_dwim",
        "git_reference_ensure_log",
        "git_reference_foreach",
        "git_reference_foreach_glob",
        "git_reference_foreach_name",
        "git_reference_has_log",
        "git_reference_iterator_glob_new",
        "git_reference_iterator_new",
        "git_reference_list",
        "git_reference_lookup",
        "git_reference_name_to_id",
        "git_reference_remove",
        "git_reference_symbolic_create",
        "git_reference_symbolic_create_matching",
        "git_reflog_delete",
        "git_reflog_read",
        "git_reflog_rename",
        "git_remote_create",
        "git_remote_create_anonymous",
        "git_remote_create_with_fetchspec",
        "git_remote_list",
        "git_remote_load",
        "git_repository_config",
        "git_repository_config_snapshot",
        "git_repository_detach_head",
        "git_repository_fetchhead_foreach",
        "git_repository_free",
        "git_repository_get_namespace",
        "git_repository_hashfile",
        "git_repository_head",
        "git_repository_head_detached",
        "git_repository_head_unborn",
        "git_repository_index",
        "git_repository_init",
        "git_repository_init_ext",
        "git_repository_is_bare",
        "git_repository_is_empty",
        "git_repository_is_shallow",
        "git_repository_mergehead_foreach",
        "git_repository_message",
        "git_repository_message_remove",
        "git_repository_odb",
        "git_repository_open",
        "git_repository_open_bare",
        "git_repository_open_ext",
        "git_repository_path",
        "git_repository_refdb",
        "git_repository_set_head",
        "git_repository_set_head_detached",
        "git_repository_set_namespace",
        "git_repository_set_workdir",
        "git_repository_state",
        "git_repository_state_cleanup",
        "git_repository_workdir",
        "git_repository_wrap_odb",
        "git_revert",
        "git_revert_commit",
        "git_revparse",
        "git_revparse_ext",
        "git_revparse_single",
        "git_revwalk_new",
        "git_signature_default",
        "git_stash_drop",
        "git_stash_foreach",
        "git_status_file",
        "git_status_foreach",
        "git_status_foreach_ext",
        "git_status_list_new",
        "git_status_should_ignore",
        "git_submodule_add_setup",
        "git_submodule_foreach",
        "git_submodule_lookup",
        "git_submodule_open",
        "git_submodule_reload_all",
        "git_tag_annotation_create",
        "git_tag_create",
        "git_tag_create_frombuffer",
        "git_tag_create_lightweight",
        "git_tag_delete",
        "git_tag_foreach",
        "git_tag_list",
        "git_tag_list_match",
        "git_tag_lookup",
        "git_tag_lookup_prefix",
        "git_tree_entry_to_object",
        "git_tree_lookup",
        "git_tree_lookup_prefix",
        "git_treebuilder_write"
      ]
    },
    "typeName": "repository",
    "cType": "git_repository",
    "functions": [
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_config **",
            "comment": "Pointer to store the loaded configuration",
            "cType": "git_config **",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_config",
        "cppFunctionName": "Config",
        "jsFunctionName": "config",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_config **",
            "comment": "Pointer to store the loaded configuration",
            "cType": "git_config **",
            "cppClassName": "GitConfig",
            "jsClassName": "Config",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_config_snapshot",
        "cppFunctionName": "ConfigSnapshot",
        "jsFunctionName": "configSnapshot",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository pointer",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "reflog_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EUNBORNBRANCH when HEAD points to a non existing\n branch or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_detach_head",
        "cppFunctionName": "DetachHead",
        "jsFunctionName": "detachHead",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the active namespace, or NULL if there isn't one",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_get_namespace",
        "cppFunctionName": "GetNamespace",
        "jsFunctionName": "getNamespace",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_reference **",
            "comment": "pointer to the reference which will be retrieved",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "a repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EUNBORNBRANCH when HEAD points to a non existing\n branch, GIT_ENOTFOUND when HEAD is missing; an error code otherwise",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "status.c": [
            "ex/v0.21.2/status.html#git_repository_head-5"
          ]
        },
        "cFunctionName": "git_repository_head",
        "cppFunctionName": "Head",
        "jsFunctionName": "head",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repo to test",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if HEAD is detached, 0 if it's not; error code if there\n was an error.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_head_detached",
        "cppFunctionName": "HeadDetached",
        "jsFunctionName": "headDetached",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repo to test",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the current branch is unborn, 0 if it's not; error\n code if there was an error",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_head_unborn",
        "cppFunctionName": "HeadUnborn",
        "jsFunctionName": "headUnborn",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_index **",
            "comment": "Pointer to store the loaded index",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_repository_index-60"
          ],
          "init.c": [
            "ex/v0.21.2/init.html#git_repository_index-9"
          ]
        },
        "cFunctionName": "git_repository_index",
        "cppFunctionName": "Index",
        "jsFunctionName": "index",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_repository **",
            "comment": "pointer to the repo which will be created or reinitialized",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "the path to the repository",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "is_bare",
            "type": "unsigned int",
            "comment": "if true, a Git repository without a working directory is\n\t\tcreated at the pointed path. If false, provided path will be\n\t\tconsidered as the working directory into which the .git directory\n\t\twill be created.",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "init.c": [
            "ex/v0.21.2/init.html#git_repository_init-5"
          ]
        },
        "cFunctionName": "git_repository_init",
        "cppFunctionName": "Init",
        "jsFunctionName": "init",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_repository **",
            "comment": "Pointer to the repo which will be created or reinitialized.",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo_path",
            "type": "const char *",
            "comment": "The path to the repository.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "opts",
            "type": "git_repository_init_options *",
            "comment": "Pointer to git_repository_init_options struct.",
            "cType": "git_repository_init_options *",
            "cppClassName": "GitRepositoryInitOptions",
            "jsClassName": "RepositoryInitOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code on failure.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "init.c": [
            "ex/v0.21.2/init.html#git_repository_init_ext-6"
          ]
        },
        "cFunctionName": "git_repository_init_ext",
        "cppFunctionName": "InitExt",
        "jsFunctionName": "initExt",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "opts",
            "type": "git_repository_init_options *",
            "comment": "the `git_repository_init_options` struct to initialize",
            "cType": "git_repository_init_options *",
            "cppClassName": "GitRepositoryInitOptions",
            "jsClassName": "RepositoryInitOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "Version of struct; pass `GIT_REPOSITORY_INIT_OPTIONS_VERSION`",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_init_init_options",
        "cppFunctionName": "InitInitOptions",
        "jsFunctionName": "initInitOptions",
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repo to test",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the repository is bare, 0 otherwise.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "status.c": [
            "ex/v0.21.2/status.html#git_repository_is_bare-7"
          ]
        },
        "cFunctionName": "git_repository_is_bare",
        "cppFunctionName": "IsBare",
        "jsFunctionName": "isBare",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repo to test",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if the repository is empty, 0 if it isn't, error code\n if the repository is corrupted",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_is_empty",
        "cppFunctionName": "IsEmpty",
        "jsFunctionName": "isEmpty",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 1 if shallow, zero if not",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_is_shallow",
        "cppFunctionName": "IsShallow",
        "jsFunctionName": "isShallow",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": null,
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_message_remove",
        "cppFunctionName": "MessageRemove",
        "jsFunctionName": "messageRemove",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_odb **",
            "comment": "Pointer to store the loaded ODB",
            "cType": "git_odb **",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_repository_odb-31"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_repository_odb-59"
          ]
        },
        "cFunctionName": "git_repository_odb",
        "cppFunctionName": "Odb",
        "jsFunctionName": "odb",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_repository **",
            "comment": "pointer to the repo which will be opened",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "the path to the repository",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_repository_open-57"
          ],
          "network/git2.c": [
            "ex/v0.21.2/network/git2.html#git_repository_open-3"
          ]
        },
        "cFunctionName": "git_repository_open",
        "cppFunctionName": "Open",
        "jsFunctionName": "open",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_repository **",
            "comment": "Pointer to the repo which will be opened.",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "bare_path",
            "type": "const char *",
            "comment": "Direct path to the bare repository",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_open_bare",
        "cppFunctionName": "OpenBare",
        "jsFunctionName": "openBare",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_repository **",
            "comment": "Pointer to the repo which will be opened.  This can\n        actually be NULL if you only want to use the error code to\n        see if a repo at this path could be opened.",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "Path to open as git repository.  If the flags\n        permit \"searching\", then this can be a path to a subdirectory\n        inside the working directory of the repository.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "flags",
            "type": "unsigned int",
            "comment": "A combination of the GIT_REPOSITORY_OPEN flags above.",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "ceiling_dirs",
            "type": "const char *",
            "comment": "A GIT_PATH_LIST_SEPARATOR delimited list of path\n        prefixes at which the search for a containing repository should\n        terminate.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND if no repository could be found,\n        or -1 if there was a repository but open failed for some reason\n        (such as repo corruption or system errors).",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_repository_open_ext-22"
          ],
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_repository_open_ext-29"
          ],
          "diff.c": [
            "ex/v0.21.2/diff.html#git_repository_open_ext-13"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_repository_open_ext-42",
            "ex/v0.21.2/log.html#git_repository_open_ext-43"
          ],
          "rev-parse.c": [
            "ex/v0.21.2/rev-parse.html#git_repository_open_ext-14"
          ],
          "status.c": [
            "ex/v0.21.2/status.html#git_repository_open_ext-3"
          ],
          "tag.c": [
            "ex/v0.21.2/tag.html#git_repository_open_ext-9"
          ]
        },
        "cFunctionName": "git_repository_open_ext",
        "cppFunctionName": "OpenExt",
        "jsFunctionName": "openExt",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the path to the repository",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "init.c": [
            "ex/v0.21.2/init.html#git_repository_path-7"
          ],
          "status.c": [
            "ex/v0.21.2/status.html#git_repository_path-6"
          ]
        },
        "cFunctionName": "git_repository_path",
        "cppFunctionName": "Path",
        "jsFunctionName": "path",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_refdb **",
            "comment": "Pointer to store the loaded refdb",
            "cType": "git_refdb **",
            "cppClassName": "GitRefdb",
            "jsClassName": "Refdb",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_refdb",
        "cppFunctionName": "Refdb",
        "jsFunctionName": "refdb",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository pointer",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refname",
            "type": "const char *",
            "comment": "Canonical name of the reference the HEAD should point at",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_set_head",
        "cppFunctionName": "SetHead",
        "jsFunctionName": "setHead",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository pointer",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "commitish",
            "type": "const git_oid *",
            "comment": "Object id of the Commit the HEAD should point to",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "signature",
            "type": "const git_signature *",
            "comment": "The identity that will used to populate the reflog entry",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "log_message",
            "type": "const char *",
            "comment": "The one line long message to be appended to the reflog",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_set_head_detached",
        "cppFunctionName": "SetHeadDetached",
        "jsFunctionName": "setHeadDetached",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repo",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "nmspace",
            "type": "const char *",
            "comment": "The namespace. This should not include the refs\n\tfolder, e.g. to namespace all references under `refs/namespaces/foo/`,\n\tuse `foo` as the namespace.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, -1 on error",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_set_namespace",
        "cppFunctionName": "SetNamespace",
        "jsFunctionName": "setNamespace",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "workdir",
            "type": "const char *",
            "comment": "The path to a working directory",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "update_gitlink",
            "type": "int",
            "comment": "Create/update gitlink in workdir and set config\n        \"core.worktree\" (if workdir is not the parent of the .git directory)",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0, or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_set_workdir",
        "cppFunctionName": "SetWorkdir",
        "jsFunctionName": "setWorkdir",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository pointer",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " The state of the repository",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_state",
        "cppFunctionName": "State",
        "jsFunctionName": "state",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or error",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_state_cleanup",
        "cppFunctionName": "StateCleanup",
        "jsFunctionName": "stateCleanup",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the path to the working dir, if it exists",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "examples": {
          "init.c": [
            "ex/v0.21.2/init.html#git_repository_workdir-8"
          ]
        },
        "cFunctionName": "git_repository_workdir",
        "cppFunctionName": "Workdir",
        "jsFunctionName": "workdir",
        "isPrototypeMethod": true,
        "cppClassName": "GitRepository"
      },
      {
        "type": "function",
        "file": "repository.h",
        "args": [
          {
            "name": "out",
            "type": "git_repository **",
            "comment": "pointer to the repo",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "odb",
            "type": "git_odb *",
            "comment": "the object database to wrap",
            "cType": "git_odb *",
            "cppClassName": "GitOdb",
            "jsClassName": "Odb",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "repository",
        "cFunctionName": "git_repository_wrap_odb",
        "cppFunctionName": "WrapOdb",
        "jsFunctionName": "wrapOdb",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitRepository"
      }
    ],
    "cppClassName": "GitRepository",
    "jsClassName": "Repository",
    "filename": "repository",
    "isLibgitType": true,
    "dependencies": [
      "../include/config.h",
      "../include/repository.h",
      "../include/signature.h",
      "../include/reference.h",
      "../include/index.h",
      "../include/repository_init_options.h",
      "../include/odb.h",
      "../include/refdb.h",
      "../include/oid.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_repository_free",
    "name": "repository"
  },
  {
    "typeName": "repository_init_flag",
    "type": "enum",
    "cType": "git_repository_init_flag_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_REPOSITORY_INIT_BARE",
        "value": 1,
        "JsName": "INIT_BARE"
      },
      {
        "name": "GIT_REPOSITORY_INIT_NO_REINIT",
        "value": 2,
        "JsName": "INIT_NO_REINIT"
      },
      {
        "name": "GIT_REPOSITORY_INIT_NO_DOTGIT_DIR",
        "value": 4,
        "JsName": "INIT_NO_DOTGIT_DIR"
      },
      {
        "name": "GIT_REPOSITORY_INIT_MKDIR",
        "value": 8,
        "JsName": "INIT_MKDIR"
      },
      {
        "name": "GIT_REPOSITORY_INIT_MKPATH",
        "value": 16,
        "JsName": "INIT_MKPATH"
      },
      {
        "name": "GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE",
        "value": 32,
        "JsName": "INIT_EXTERNAL_TEMPLATE"
      }
    ],
    "owner": "Repository",
    "JsName": "INIT_FLAG"
  },
  {
    "typeName": "repository_init_mode",
    "type": "enum",
    "cType": "git_repository_init_mode_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_REPOSITORY_INIT_SHARED_UMASK",
        "value": 0,
        "JsName": "INIT_SHARED_UMASK"
      },
      {
        "name": "GIT_REPOSITORY_INIT_SHARED_GROUP",
        "value": 1533,
        "JsName": "INIT_SHARED_GROUP"
      },
      {
        "name": "GIT_REPOSITORY_INIT_SHARED_ALL",
        "value": 1535,
        "JsName": "INIT_SHARED_ALL"
      }
    ],
    "owner": "Repository",
    "JsName": "INIT_MODE"
  },
  {
    "type": "struct",
    "value": "git_repository_init_options",
    "file": "repository.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint32_t",
        "name": "flags",
        "cType": "uint32_t",
        "cppFunctionName": "Flags",
        "jsFunctionName": "flags",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "uint32_t",
        "name": "mode",
        "cType": "uint32_t",
        "cppFunctionName": "Mode",
        "jsFunctionName": "mode",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "workdir_path",
        "cType": "const char *",
        "cppFunctionName": "WorkdirPath",
        "jsFunctionName": "workdirPath",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "description",
        "cType": "const char *",
        "cppFunctionName": "Description",
        "jsFunctionName": "description",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "template_path",
        "cType": "const char *",
        "cppFunctionName": "TemplatePath",
        "jsFunctionName": "templatePath",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "initial_head",
        "cType": "const char *",
        "cppFunctionName": "InitialHead",
        "jsFunctionName": "initialHead",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "const char *",
        "name": "origin_url",
        "cType": "const char *",
        "cppFunctionName": "OriginUrl",
        "jsFunctionName": "originUrl",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_repository_init_ext",
        "git_repository_init_init_options"
      ]
    },
    "typeName": "repository_init_options",
    "cType": "git_repository_init_options",
    "functions": [],
    "cppClassName": "GitRepositoryInitOptions",
    "jsClassName": "RepositoryInitOptions",
    "filename": "repository_init_options",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "repository_init_options"
  },
  {
    "typeName": "repository_open_flag",
    "type": "enum",
    "cType": "git_repository_open_flag_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_REPOSITORY_OPEN_NO_SEARCH",
        "value": 1,
        "JsName": "OPEN_NO_SEARCH"
      },
      {
        "name": "GIT_REPOSITORY_OPEN_CROSS_FS",
        "value": 2,
        "JsName": "OPEN_CROSS_FS"
      },
      {
        "name": "GIT_REPOSITORY_OPEN_BARE",
        "value": 4,
        "JsName": "OPEN_BARE"
      }
    ],
    "owner": "Repository",
    "JsName": "OPEN_FLAG"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "revert.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to revert",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "commit",
            "type": "git_commit *",
            "comment": "the commit to revert",
            "cType": "git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "given_opts",
            "type": "const git_revert_options *",
            "comment": "merge flags",
            "cType": "const git_revert_options *",
            "cppClassName": "GitRevertOptions",
            "jsClassName": "RevertOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " zero on success, -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revert",
        "cFunctionName": "git_revert",
        "cppFunctionName": "Revert",
        "jsFunctionName": "revert",
        "cppClassName": "GitRevert"
      },
      {
        "type": "function",
        "file": "revert.h",
        "args": [
          {
            "name": "out",
            "type": "git_index **",
            "comment": "pointer to store the index result in",
            "cType": "git_index **",
            "cppClassName": "GitIndex",
            "jsClassName": "Index",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository that contains the given commits",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "revert_commit",
            "type": "git_commit *",
            "comment": "the commit to revert",
            "cType": "git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "our_commit",
            "type": "git_commit *",
            "comment": "the commit to revert against (eg, HEAD)",
            "cType": "git_commit *",
            "cppClassName": "GitCommit",
            "jsClassName": "Commit",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "mainline",
            "type": "unsigned int",
            "comment": "the parent of the revert commit, if it is a merge",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "merge_options",
            "type": "const git_merge_options *",
            "comment": "the merge options (or null for defaults)",
            "cType": "const git_merge_options *",
            "cppClassName": "GitMergeOptions",
            "jsClassName": "MergeOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " zero on success, -1 on failure.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revert",
        "cFunctionName": "git_revert_commit",
        "cppFunctionName": "Commit",
        "jsFunctionName": "commit",
        "isAsync": true,
        "cppClassName": "GitRevert"
      },
      {
        "type": "function",
        "file": "revert.h",
        "args": [
          {
            "name": "opts",
            "type": "git_revert_options *",
            "comment": "the `git_revert_options` struct to initialize",
            "cType": "git_revert_options *",
            "cppClassName": "GitRevertOptions",
            "jsClassName": "RevertOptions",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "Version of struct; pass `GIT_REVERT_OPTIONS_VERSION`",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revert",
        "cFunctionName": "git_revert_init_options",
        "cppFunctionName": "InitOptions",
        "jsFunctionName": "initOptions",
        "cppClassName": "GitRevert"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "revert",
    "cppClassName": "GitRevert",
    "jsClassName": "Revert",
    "filename": "revert",
    "isLibgitType": true,
    "dependencies": [
      "../include/repository.h",
      "../include/commit.h",
      "../include/revert_options.h",
      "../include/index.h",
      "../include/merge_options.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "revert"
  },
  {
    "type": "struct",
    "value": "git_revert_options",
    "file": "revert.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "version",
        "cType": "unsigned int",
        "cppFunctionName": "Version",
        "jsFunctionName": "version",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "mainline",
        "cType": "unsigned int",
        "cppFunctionName": "Mainline",
        "jsFunctionName": "mainline",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "git_merge_options",
        "name": "merge_opts",
        "cType": "git_merge_options",
        "cppFunctionName": "MergeOpts",
        "jsFunctionName": "mergeOpts",
        "cppClassName": "GitMergeOptions",
        "jsClassName": "MergeOptions",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      },
      {
        "type": "git_checkout_options",
        "name": "checkout_opts",
        "cType": "git_checkout_options",
        "cppFunctionName": "CheckoutOpts",
        "jsFunctionName": "checkoutOpts",
        "cppClassName": "GitCheckoutOptions",
        "jsClassName": "CheckoutOptions",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_revert",
        "git_revert_init_options"
      ]
    },
    "typeName": "revert_options",
    "cType": "git_revert_options",
    "functions": [],
    "cppClassName": "GitRevertOptions",
    "jsClassName": "RevertOptions",
    "filename": "revert_options",
    "isLibgitType": true,
    "dependencies": [
      "../include/merge_options.h",
      "../include/checkout_options.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": true,
    "name": "revert_options"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "revparse.h",
        "args": [
          {
            "name": "object_out",
            "type": "git_object **",
            "comment": "pointer to output object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "reference_out",
            "type": "git_reference **",
            "comment": "pointer to output reference or NULL",
            "cType": "git_reference **",
            "cppClassName": "GitRefs",
            "jsClassName": "Refs",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to search in",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "spec",
            "type": "const char *",
            "comment": "the textual specification for an object",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC\n or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revparse",
        "cFunctionName": "git_revparse_ext",
        "cppFunctionName": "Ext",
        "jsFunctionName": "ext",
        "cppClassName": "GitRevparse"
      },
      {
        "type": "function",
        "file": "revparse.h",
        "args": [
          {
            "name": "out",
            "type": "git_object **",
            "comment": "pointer to output object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repository to search in",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "spec",
            "type": "const char *",
            "comment": "the textual specification for an object",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND, GIT_EAMBIGUOUS, GIT_EINVALIDSPEC or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revparse",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_revparse_single-24"
          ],
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_revparse_single-32"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_revparse_single-45"
          ],
          "tag.c": [
            "ex/v0.21.2/tag.html#git_revparse_single-11",
            "ex/v0.21.2/tag.html#git_revparse_single-12",
            "ex/v0.21.2/tag.html#git_revparse_single-13",
            "ex/v0.21.2/tag.html#git_revparse_single-14"
          ]
        },
        "cFunctionName": "git_revparse_single",
        "cppFunctionName": "Single",
        "jsFunctionName": "single",
        "isAsync": true,
        "cppClassName": "GitRevparse"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "revparse",
    "cppClassName": "GitRevparse",
    "jsClassName": "Revparse",
    "filename": "revparse",
    "isLibgitType": true,
    "dependencies": [
      "../include/object.h",
      "../include/reference.h",
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "revparse"
  },
  {
    "typeName": "revparse_mode",
    "type": "enum",
    "cType": "git_revparse_mode_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_REVPARSE_SINGLE",
        "value": 1,
        "JsName": "SINGLE"
      },
      {
        "name": "GIT_REVPARSE_RANGE",
        "value": 2,
        "JsName": "RANGE"
      },
      {
        "name": "GIT_REVPARSE_MERGE_BASE",
        "value": 4,
        "JsName": "MERGE_BASE"
      }
    ],
    "owner": "Revparse",
    "JsName": "MODE"
  },
  {
    "type": "class",
    "value": "git_revwalk",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_revwalk_add_hide_cb",
        "git_revwalk_free",
        "git_revwalk_hide",
        "git_revwalk_hide_glob",
        "git_revwalk_hide_head",
        "git_revwalk_hide_ref",
        "git_revwalk_new",
        "git_revwalk_next",
        "git_revwalk_push",
        "git_revwalk_push_glob",
        "git_revwalk_push_head",
        "git_revwalk_push_range",
        "git_revwalk_push_ref",
        "git_revwalk_repository",
        "git_revwalk_reset",
        "git_revwalk_simplify_first_parent",
        "git_revwalk_sorting"
      ]
    },
    "typeName": "revwalk",
    "cType": "git_revwalk",
    "functions": [
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal.",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "commit_id",
            "type": "const git_oid *",
            "comment": "the oid of commit that will be ignored during the traversal",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "examples": {
          "log.c": [
            "ex/v0.21.2/log.html#git_revwalk_hide-51"
          ]
        },
        "cFunctionName": "git_revwalk_hide",
        "cppFunctionName": "Hide",
        "jsFunctionName": "hide",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "glob",
            "type": "const char *",
            "comment": "the glob pattern references should match",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "cFunctionName": "git_revwalk_hide_glob",
        "cppFunctionName": "HideGlob",
        "jsFunctionName": "hideGlob",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "cFunctionName": "git_revwalk_hide_head",
        "cppFunctionName": "HideHead",
        "jsFunctionName": "hideHead",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refname",
            "type": "const char *",
            "comment": "the reference to hide",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "cFunctionName": "git_revwalk_hide_ref",
        "cppFunctionName": "HideRef",
        "jsFunctionName": "hideRef",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "out",
            "type": "git_revwalk **",
            "comment": "pointer to the new revision walker",
            "cType": "git_revwalk **",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repo to walk through",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_revwalk_new-61"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_revwalk_new-47",
            "ex/v0.21.2/log.html#git_revwalk_new-48"
          ]
        },
        "cFunctionName": "git_revwalk_new",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "isAsync": false,
        "isConstructorMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "out",
            "type": "git_oid *",
            "comment": "Pointer where to store the oid of the next commit",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker to pop the commit from.",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 if the next commit was found;\n\tGIT_ITEROVER if there are no commits left to iterate",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_revwalk_next-63"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_revwalk_next-52"
          ]
        },
        "cFunctionName": "git_revwalk_next",
        "cppFunctionName": "Next",
        "jsFunctionName": "next",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal.",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "the oid of the commit to start from.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_revwalk_push-62"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_revwalk_push-49"
          ]
        },
        "cFunctionName": "git_revwalk_push",
        "cppFunctionName": "Push",
        "jsFunctionName": "push",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "glob",
            "type": "const char *",
            "comment": "the glob pattern references should match",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "cFunctionName": "git_revwalk_push_glob",
        "cppFunctionName": "PushGlob",
        "jsFunctionName": "pushGlob",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "examples": {
          "log.c": [
            "ex/v0.21.2/log.html#git_revwalk_push_head-50"
          ]
        },
        "cFunctionName": "git_revwalk_push_head",
        "cppFunctionName": "PushHead",
        "jsFunctionName": "pushHead",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "range",
            "type": "const char *",
            "comment": "the range",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "cFunctionName": "git_revwalk_push_range",
        "cppFunctionName": "PushRange",
        "jsFunctionName": "pushRange",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "refname",
            "type": "const char *",
            "comment": "the reference to push",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "cFunctionName": "git_revwalk_push_ref",
        "cppFunctionName": "PushRef",
        "jsFunctionName": "pushRef",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the revision walker",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " the repository being walked",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "cFunctionName": "git_revwalk_repository",
        "cppFunctionName": "Repository",
        "jsFunctionName": "repository",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walker",
            "type": "git_revwalk *",
            "comment": "handle to reset.",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "cFunctionName": "git_revwalk_reset",
        "cppFunctionName": "Reset",
        "jsFunctionName": "reset",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": null,
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "cFunctionName": "git_revwalk_simplify_first_parent",
        "cppFunctionName": "SimplifyFirstParent",
        "jsFunctionName": "simplifyFirstParent",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      },
      {
        "type": "function",
        "file": "revwalk.h",
        "args": [
          {
            "name": "walk",
            "type": "git_revwalk *",
            "comment": "the walker being used for the traversal.",
            "cType": "git_revwalk *",
            "cppClassName": "GitRevwalk",
            "jsClassName": "Revwalk",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "sort_mode",
            "type": "unsigned int",
            "comment": "combination of GIT_SORT_XXX flags",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "revwalk",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_revwalk_sorting-64"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_revwalk_sorting-53",
            "ex/v0.21.2/log.html#git_revwalk_sorting-54"
          ]
        },
        "cFunctionName": "git_revwalk_sorting",
        "cppFunctionName": "Sorting",
        "jsFunctionName": "sorting",
        "isPrototypeMethod": true,
        "cppClassName": "GitRevwalk"
      }
    ],
    "cppClassName": "GitRevwalk",
    "jsClassName": "Revwalk",
    "filename": "revwalk",
    "isLibgitType": true,
    "dependencies": [
      "../include/revwalk.h",
      "../include/oid.h",
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_revwalk_free",
    "name": "revwalk"
  },
  {
    "type": "class",
    "value": "git_signature",
    "file": "types.h",
    "fields": [
      {
        "type": "char *",
        "name": "name",
        "cType": "char *",
        "cppFunctionName": "Name",
        "jsFunctionName": "name",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "char *",
        "name": "email",
        "cType": "char *",
        "cppFunctionName": "Email",
        "jsFunctionName": "email",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "git_time",
        "name": "when",
        "cType": "git_time",
        "cppFunctionName": "When",
        "jsFunctionName": "when",
        "cppClassName": "GitTime",
        "jsClassName": "Time",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false
      }
    ],
    "used": {
      "returns": [
        "git_commit_author",
        "git_commit_committer",
        "git_reflog_entry_committer",
        "git_tag_tagger"
      ],
      "needs": [
        "git_branch_create",
        "git_branch_move",
        "git_clone_into",
        "git_clone_local_into",
        "git_commit_amend",
        "git_commit_create",
        "git_commit_create_from_callback",
        "git_commit_create_from_ids",
        "git_commit_create_v",
        "git_note_create",
        "git_note_remove",
        "git_push_update_tips",
        "git_reference_create",
        "git_reference_create_matching",
        "git_reference_rename",
        "git_reference_set_target",
        "git_reference_symbolic_create",
        "git_reference_symbolic_create_matching",
        "git_reference_symbolic_set_target",
        "git_reflog_append",
        "git_remote_fetch",
        "git_remote_update_tips",
        "git_repository_detach_head",
        "git_repository_set_head",
        "git_repository_set_head_detached",
        "git_signature_default",
        "git_signature_dup",
        "git_signature_free",
        "git_signature_new",
        "git_signature_now",
        "git_tag_annotation_create",
        "git_tag_create"
      ]
    },
    "typeName": "signature",
    "cType": "git_signature",
    "functions": [
      {
        "type": "function",
        "file": "signature.h",
        "args": [
          {
            "name": "out",
            "type": "git_signature **",
            "comment": "new signature",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository pointer",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND if config is missing, or error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "signature",
        "examples": {
          "init.c": [
            "ex/v0.21.2/init.html#git_signature_default-10"
          ],
          "tag.c": [
            "ex/v0.21.2/tag.html#git_signature_default-15"
          ]
        },
        "cFunctionName": "git_signature_default",
        "cppFunctionName": "Default",
        "jsFunctionName": "default",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitSignature"
      },
      {
        "type": "function",
        "file": "signature.h",
        "args": [
          {
            "name": "dest",
            "type": "git_signature **",
            "comment": "pointer where to store the copy",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "sig",
            "type": "const git_signature *",
            "comment": "signature to duplicate",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "signature",
        "cFunctionName": "git_signature_dup",
        "cppFunctionName": "Dup",
        "jsFunctionName": "dup",
        "isAsync": true,
        "isConstructorMethod": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitSignature"
      },
      {
        "type": "function",
        "file": "signature.h",
        "args": [
          {
            "name": "out",
            "type": "git_signature **",
            "comment": "new signature, in case of error NULL",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "name of the person",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "email",
            "type": "const char *",
            "comment": "email of the person",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "time",
            "type": "git_time_t",
            "comment": "time when the action happened",
            "cType": "git_time_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "offset",
            "type": "int",
            "comment": "timezone offset in minutes for the time",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "signature",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_signature_new-66",
            "ex/v0.21.2/general.html#git_signature_new-67"
          ]
        },
        "cFunctionName": "git_signature_new",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "isAsync": false,
        "isConstructorMethod": true,
        "cppClassName": "GitSignature"
      },
      {
        "type": "function",
        "file": "signature.h",
        "args": [
          {
            "name": "out",
            "type": "git_signature **",
            "comment": "new signature, in case of error NULL",
            "cType": "git_signature **",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "name of the person",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "email",
            "type": "const char *",
            "comment": "email of the person",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "signature",
        "cFunctionName": "git_signature_now",
        "cppFunctionName": "Now",
        "jsFunctionName": "now",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitSignature"
      }
    ],
    "cppClassName": "GitSignature",
    "jsClassName": "Signature",
    "filename": "signature",
    "isLibgitType": true,
    "dependencies": [
      "../include/time.h",
      "../include/signature.h",
      "../include/repository.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "freeFunctionName": "git_signature_free",
    "name": "signature"
  },
  {
    "functions": [],
    "type": "class",
    "cType": null,
    "typeName": "smart",
    "cppClassName": "GitSmart",
    "jsClassName": "Smart",
    "filename": "smart",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "smart"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "stash.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The owning repository.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "index",
            "type": "size_t",
            "comment": "The position within the stash list. 0 points to the\n most recent stashed state.",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, or error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "stash",
        "cFunctionName": "git_stash_drop",
        "cppFunctionName": "Drop",
        "jsFunctionName": "drop",
        "cppClassName": "GitStash"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "stash",
    "cppClassName": "GitStash",
    "jsClassName": "Stash",
    "filename": "stash",
    "isLibgitType": true,
    "dependencies": [
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "stash"
  },
  {
    "typeName": "stash_flags",
    "type": "enum",
    "cType": "git_stash_flags",
    "isMask": false,
    "values": [
      {
        "name": "GIT_STASH_DEFAULT",
        "value": 0,
        "JsName": "DEFAULT"
      },
      {
        "name": "GIT_STASH_KEEP_INDEX",
        "value": 1,
        "JsName": "KEEP_INDEX"
      },
      {
        "name": "GIT_STASH_INCLUDE_UNTRACKED",
        "value": 2,
        "JsName": "INCLUDE_UNTRACKED"
      },
      {
        "name": "GIT_STASH_INCLUDE_IGNORED",
        "value": 4,
        "JsName": "INCLUDE_IGNORED"
      }
    ],
    "owner": "Stash",
    "JsName": "FLAGS"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "status.h",
        "args": [
          {
            "name": "status_flags",
            "type": "unsigned int *",
            "comment": "Output combination of git_status_t values for file",
            "cType": "unsigned int *",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "The file to retrieve status for relative to the repo workdir",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND if the file is not found in the HEAD,\n      index, and work tree, GIT_EAMBIGUOUS if `path` matches multiple files\n      or if it refers to a folder, and -1 on other errors.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "status",
        "cFunctionName": "git_status_file",
        "cppFunctionName": "File",
        "jsFunctionName": "file",
        "cppClassName": "GitStatus"
      },
      {
        "type": "function",
        "file": "status.h",
        "args": [
          {
            "name": "statuslist",
            "type": "git_status_list *",
            "comment": "Existing status list object",
            "cType": "git_status_list *",
            "cppClassName": "GitStatusList",
            "jsClassName": "StatusList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " the number of status entries",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "status",
        "examples": {
          "status.c": [
            "ex/v0.21.2/status.html#git_status_list_entrycount-12",
            "ex/v0.21.2/status.html#git_status_list_entrycount-13"
          ]
        },
        "cFunctionName": "git_status_list_entrycount",
        "cppFunctionName": "ListEntrycount",
        "jsFunctionName": "listEntrycount",
        "cppClassName": "GitStatus"
      },
      {
        "type": "function",
        "file": "status.h",
        "args": [
          {
            "name": "statuslist",
            "type": "git_status_list *",
            "comment": "Existing status list object",
            "cType": "git_status_list *",
            "cppClassName": "GitStatusList",
            "jsClassName": "StatusList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "status",
        "examples": {
          "status.c": [
            "ex/v0.21.2/status.html#git_status_list_free-20"
          ]
        },
        "cFunctionName": "git_status_list_free",
        "cppFunctionName": "ListFree",
        "jsFunctionName": "listFree",
        "cppClassName": "GitStatus"
      },
      {
        "type": "function",
        "file": "sys/diff.h",
        "args": [
          {
            "name": "out",
            "type": "git_diff_perfdata *",
            "comment": null,
            "cType": "git_diff_perfdata *",
            "cppClassName": "GitDiffPerfdata",
            "jsClassName": "DiffPerfdata",
            "isLibgitType": true,
            "isEnum": false,
            "cDependencies": [
              "git2/sys/diff.h"
            ],
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "status",
            "type": "const git_status_list *",
            "comment": null,
            "cType": "const git_status_list *",
            "cppClassName": "GitStatusList",
            "jsClassName": "StatusList",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "status",
        "cFunctionName": "git_status_list_get_perfdata",
        "cppFunctionName": "ListGetPerfdata",
        "jsFunctionName": "listGetPerfdata",
        "isAsync": true,
        "cppClassName": "GitStatus"
      },
      {
        "type": "function",
        "file": "status.h",
        "args": [
          {
            "name": "ignored",
            "type": "int *",
            "comment": "Boolean returning 0 if the file is not ignored, 1 if it is",
            "cType": "int *",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "A repository object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "The file to check ignores for, rooted at the repo's workdir.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 if ignore rules could be processed for the file (regardless\n         of whether it exists or not), or an error \n<\n 0 if they could not.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "status",
        "cFunctionName": "git_status_should_ignore",
        "cppFunctionName": "ShouldIgnore",
        "jsFunctionName": "shouldIgnore",
        "cppClassName": "GitStatus"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "status",
    "cppClassName": "GitStatus",
    "jsClassName": "Status",
    "filename": "status",
    "isLibgitType": true,
    "dependencies": [
      "../include/repository.h",
      "../include/status_list.h",
      "../include/diff_perfdata.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "cDependencies": [
      "git2/sys/diff.h"
    ],
    "name": "status"
  },
  {
    "typeName": "status",
    "type": "enum",
    "cType": "git_status_t",
    "isMask": false,
    "values": [
      {
        "name": "GIT_STATUS_CURRENT",
        "value": 0,
        "JsName": "CURRENT"
      },
      {
        "name": "GIT_STATUS_INDEX_NEW",
        "value": 1,
        "JsName": "INDEX_NEW"
      },
      {
        "name": "GIT_STATUS_INDEX_MODIFIED",
        "value": 2,
        "JsName": "INDEX_MODIFIED"
      },
      {
        "name": "GIT_STATUS_INDEX_DELETED",
        "value": 4,
        "JsName": "INDEX_DELETED"
      },
      {
        "name": "GIT_STATUS_INDEX_RENAMED",
        "value": 8,
        "JsName": "INDEX_RENAMED"
      },
      {
        "name": "GIT_STATUS_INDEX_TYPECHANGE",
        "value": 16,
        "JsName": "INDEX_TYPECHANGE"
      },
      {
        "name": "GIT_STATUS_WT_NEW",
        "value": 128,
        "JsName": "WT_NEW"
      },
      {
        "name": "GIT_STATUS_WT_MODIFIED",
        "value": 256,
        "JsName": "WT_MODIFIED"
      },
      {
        "name": "GIT_STATUS_WT_DELETED",
        "value": 512,
        "JsName": "WT_DELETED"
      },
      {
        "name": "GIT_STATUS_WT_TYPECHANGE",
        "value": 1024,
        "JsName": "WT_TYPECHANGE"
      },
      {
        "name": "GIT_STATUS_WT_RENAMED",
        "value": 2048,
        "JsName": "WT_RENAMED"
      },
      {
        "name": "GIT_STATUS_IGNORED",
        "value": 16384,
        "JsName": "IGNORED"
      }
    ],
    "owner": "Status",
    "JsName": "STATUS"
  },
  {
    "type": "class",
    "value": "git_status_list",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_status_byindex",
        "git_status_list_entrycount",
        "git_status_list_free",
        "git_status_list_get_perfdata",
        "git_status_list_new"
      ]
    },
    "typeName": "status_list",
    "cType": "git_status_list",
    "functions": [],
    "cppClassName": "GitStatusList",
    "jsClassName": "StatusList",
    "filename": "status_list",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "status_list"
  },
  {
    "typeName": "status_opt",
    "type": "enum",
    "cType": "git_status_opt_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_STATUS_OPT_INCLUDE_UNTRACKED",
        "value": 1,
        "JsName": "INCLUDE_UNTRACKED"
      },
      {
        "name": "GIT_STATUS_OPT_INCLUDE_IGNORED",
        "value": 2,
        "JsName": "INCLUDE_IGNORED"
      },
      {
        "name": "GIT_STATUS_OPT_INCLUDE_UNMODIFIED",
        "value": 4,
        "JsName": "INCLUDE_UNMODIFIED"
      },
      {
        "name": "GIT_STATUS_OPT_EXCLUDE_SUBMODULES",
        "value": 8,
        "JsName": "EXCLUDE_SUBMODULES"
      },
      {
        "name": "GIT_STATUS_OPT_RECURSE_UNTRACKED_DIRS",
        "value": 16,
        "JsName": "RECURSE_UNTRACKED_DIRS"
      },
      {
        "name": "GIT_STATUS_OPT_DISABLE_PATHSPEC_MATCH",
        "value": 32,
        "JsName": "DISABLE_PATHSPEC_MATCH"
      },
      {
        "name": "GIT_STATUS_OPT_RECURSE_IGNORED_DIRS",
        "value": 64,
        "JsName": "RECURSE_IGNORED_DIRS"
      },
      {
        "name": "GIT_STATUS_OPT_RENAMES_HEAD_TO_INDEX",
        "value": 128,
        "JsName": "RENAMES_HEAD_TO_INDEX"
      },
      {
        "name": "GIT_STATUS_OPT_RENAMES_INDEX_TO_WORKDIR",
        "value": 256,
        "JsName": "RENAMES_INDEX_TO_WORKDIR"
      },
      {
        "name": "GIT_STATUS_OPT_SORT_CASE_SENSITIVELY",
        "value": 512,
        "JsName": "SORT_CASE_SENSITIVELY"
      },
      {
        "name": "GIT_STATUS_OPT_SORT_CASE_INSENSITIVELY",
        "value": 1024,
        "JsName": "SORT_CASE_INSENSITIVELY"
      },
      {
        "name": "GIT_STATUS_OPT_RENAMES_FROM_REWRITES",
        "value": 2048,
        "JsName": "RENAMES_FROM_REWRITES"
      },
      {
        "name": "GIT_STATUS_OPT_NO_REFRESH",
        "value": 4096,
        "JsName": "NO_REFRESH"
      },
      {
        "name": "GIT_STATUS_OPT_UPDATE_INDEX",
        "value": 8192,
        "JsName": "UPDATE_INDEX"
      }
    ],
    "owner": "Status",
    "JsName": "OPT"
  },
  {
    "typeName": "status_show",
    "type": "enum",
    "cType": "git_status_show_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_STATUS_SHOW_INDEX_AND_WORKDIR",
        "value": 0,
        "JsName": "INDEX_AND_WORKDIR"
      },
      {
        "name": "GIT_STATUS_SHOW_INDEX_ONLY",
        "value": 1,
        "JsName": "INDEX_ONLY"
      },
      {
        "name": "GIT_STATUS_SHOW_WORKDIR_ONLY",
        "value": 2,
        "JsName": "WORKDIR_ONLY"
      }
    ],
    "owner": "Status",
    "JsName": "SHOW"
  },
  {
    "type": "class",
    "value": "git_strarray",
    "file": "strarray.h",
    "fields": [
      {
        "type": "char **",
        "name": "strings",
        "cType": "char **",
        "cppFunctionName": "Strings",
        "jsFunctionName": "strings",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      },
      {
        "type": "size_t",
        "name": "count",
        "cType": "size_t",
        "cppFunctionName": "Count",
        "jsFunctionName": "count",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": [
        "git_index_add_all",
        "git_index_remove_all",
        "git_index_update_all",
        "git_pathspec_new",
        "git_reference_list",
        "git_remote_get_fetch_refspecs",
        "git_remote_get_push_refspecs",
        "git_remote_list",
        "git_remote_rename",
        "git_remote_set_fetch_refspecs",
        "git_remote_set_push_refspecs",
        "git_strarray_copy",
        "git_strarray_free",
        "git_tag_list",
        "git_tag_list_match"
      ]
    },
    "typeName": "strarray",
    "cType": "git_strarray",
    "functions": [
      {
        "type": "function",
        "file": "strarray.h",
        "args": [
          {
            "name": "tgt",
            "type": "git_strarray *",
            "comment": "target",
            "cType": "git_strarray *",
            "cppClassName": "GitStrarray",
            "jsClassName": "Strarray",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "src",
            "type": "const git_strarray *",
            "comment": "source",
            "cType": "const git_strarray *",
            "cppClassName": "GitStrarray",
            "jsClassName": "Strarray",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n 0 on allocation failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "strarray",
        "cFunctionName": "git_strarray_copy",
        "cppFunctionName": "Copy",
        "jsFunctionName": "copy",
        "isPrototypeMethod": true,
        "cppClassName": "GitStrarray"
      }
    ],
    "cppClassName": "GitStrarray",
    "jsClassName": "Strarray",
    "filename": "strarray",
    "isLibgitType": true,
    "dependencies": [
      "../include/strarray.h"
    ],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "freeFunctionName": "git_strarray_free",
    "name": "strarray"
  },
  {
    "type": "class",
    "value": "git_submodule",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_submodule_add_finalize",
        "git_submodule_add_setup",
        "git_submodule_add_to_index",
        "git_submodule_branch",
        "git_submodule_fetch_recurse_submodules",
        "git_submodule_foreach",
        "git_submodule_free",
        "git_submodule_head_id",
        "git_submodule_ignore",
        "git_submodule_index_id",
        "git_submodule_init",
        "git_submodule_location",
        "git_submodule_lookup",
        "git_submodule_name",
        "git_submodule_open",
        "git_submodule_owner",
        "git_submodule_path",
        "git_submodule_reload",
        "git_submodule_save",
        "git_submodule_set_fetch_recurse_submodules",
        "git_submodule_set_ignore",
        "git_submodule_set_update",
        "git_submodule_set_url",
        "git_submodule_status",
        "git_submodule_sync",
        "git_submodule_update",
        "git_submodule_url",
        "git_submodule_wd_id"
      ]
    },
    "typeName": "submodule",
    "cType": "git_submodule",
    "functions": [
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to finish adding.",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_add_finalize",
        "cppFunctionName": "AddFinalize",
        "jsFunctionName": "addFinalize",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "out",
            "type": "git_submodule **",
            "comment": "The newly created submodule ready to open for clone",
            "cType": "git_submodule **",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository in which you want to create the submodule",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "url",
            "type": "const char *",
            "comment": "URL for the submodule's remote",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "Path at which the submodule should be created",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "use_gitlink",
            "type": "int",
            "comment": "Should workdir contain a gitlink to the repo in\n        .git/modules vs. repo directly in workdir.",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EEXISTS if submodule already exists,\n         -1 on other errors.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_add_setup",
        "cppFunctionName": "AddSetup",
        "jsFunctionName": "addSetup",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to add to the index",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "write_index",
            "type": "int",
            "comment": "Boolean if this should immediately write the index\n            file.  If you pass this as false, you will have to get the\n            git_index and explicitly call `git_index_write()` on it to\n            save the change.",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 on failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_add_to_index",
        "cppFunctionName": "AddToIndex",
        "jsFunctionName": "addToIndex",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Pointer to submodule object",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " Pointer to the submodule branch",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_branch",
        "cppFunctionName": "Branch",
        "jsFunctionName": "branch",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": null,
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_submodule_recurse_t",
          "comment": " 0 if fetchRecurseSubmodules is false, 1 if true",
          "cType": "git_submodule_recurse_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_fetch_recurse_submodules",
        "cppFunctionName": "FetchRecurseSubmodules",
        "jsFunctionName": "fetchRecurseSubmodules",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Pointer to submodule object",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " Pointer to git_oid or NULL if submodule is not in the HEAD.",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_head_id",
        "cppFunctionName": "HeadId",
        "jsFunctionName": "headId",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to check",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_submodule_ignore_t",
          "comment": " The current git_submodule_ignore_t valyue what will be used for\n         this submodule.",
          "cType": "git_submodule_ignore_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_ignore",
        "cppFunctionName": "Ignore",
        "jsFunctionName": "ignore",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Pointer to submodule object",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " Pointer to git_oid or NULL if submodule is not in index.",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_index_id",
        "cppFunctionName": "IndexId",
        "jsFunctionName": "indexId",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to write into the superproject config",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "overwrite",
            "type": "int",
            "comment": "By default, existing entries will not be overwritten,\n                  but setting this to true forces them to be updated.",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_init",
        "cppFunctionName": "Init",
        "jsFunctionName": "init",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "out",
            "type": "git_submodule **",
            "comment": "Output ptr to submodule; pass NULL to just get return code",
            "cType": "git_submodule **",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The parent repository",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "name",
            "type": "const char *",
            "comment": "The name of or path to the submodule; trailing slashes okay",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_ENOTFOUND if submodule does not exist,\n         GIT_EEXISTS if a repository is found in working directory only,\n         -1 on other errors.",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "examples": {
          "status.c": [
            "ex/v0.21.2/status.html#git_submodule_lookup-21"
          ]
        },
        "cFunctionName": "git_submodule_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Pointer to submodule object",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " Pointer to the submodule name",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "examples": {
          "status.c": [
            "ex/v0.21.2/status.html#git_submodule_name-24"
          ]
        },
        "cFunctionName": "git_submodule_name",
        "cppFunctionName": "Name",
        "jsFunctionName": "name",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository **",
            "comment": "Pointer to the submodule repo which was opened",
            "cType": "git_repository **",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Submodule to be opened",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 if submodule repo could not be opened.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_open",
        "cppFunctionName": "Open",
        "jsFunctionName": "open",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Pointer to submodule object",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " Pointer to `git_repository`",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Pointer to submodule object",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " Pointer to the submodule path",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "examples": {
          "status.c": [
            "ex/v0.21.2/status.html#git_submodule_path-25"
          ]
        },
        "cFunctionName": "git_submodule_path",
        "cppFunctionName": "Path",
        "jsFunctionName": "path",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to reload",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Force reload even if the data doesn't seem out of date",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 on error",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_reload",
        "cppFunctionName": "Reload",
        "jsFunctionName": "reload",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repository to reload submodule data for",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Force full reload even if the data doesn't seem out of date",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 on error",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_reload_all",
        "cppFunctionName": "ReloadAll",
        "jsFunctionName": "reloadAll",
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to write.",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_save",
        "cppFunctionName": "Save",
        "jsFunctionName": "save",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to modify",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "fetch_recurse_submodules",
            "type": "git_submodule_recurse_t",
            "comment": "Boolean value",
            "cType": "git_submodule_recurse_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": true,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "git_submodule_recurse_t",
          "comment": " old value for fetchRecurseSubmodules",
          "cType": "git_submodule_recurse_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_set_fetch_recurse_submodules",
        "cppFunctionName": "SetFetchRecurseSubmodules",
        "jsFunctionName": "setFetchRecurseSubmodules",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to update",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "ignore",
            "type": "git_submodule_ignore_t",
            "comment": "The new value for the ignore rule",
            "cType": "git_submodule_ignore_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": true,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "git_submodule_ignore_t",
          "comment": " old value for ignore",
          "cType": "git_submodule_ignore_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_set_ignore",
        "cppFunctionName": "SetIgnore",
        "jsFunctionName": "setIgnore",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to update",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "update",
            "type": "git_submodule_update_t",
            "comment": "The new value to use",
            "cType": "git_submodule_update_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": true,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "git_submodule_update_t",
          "comment": " old value for update",
          "cType": "git_submodule_update_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_set_update",
        "cppFunctionName": "SetUpdate",
        "jsFunctionName": "setUpdate",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Pointer to the submodule object",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "url",
            "type": "const char *",
            "comment": "URL that should be used for the submodule",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, \n<\n0 on failure",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_set_url",
        "cppFunctionName": "SetUrl",
        "jsFunctionName": "setUrl",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": null,
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_sync",
        "cppFunctionName": "Sync",
        "jsFunctionName": "sync",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "The submodule to check",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_submodule_update_t",
          "comment": " The current git_submodule_update_t value that will be used\n         for this submodule.",
          "cType": "git_submodule_update_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_update",
        "cppFunctionName": "Update",
        "jsFunctionName": "update",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Pointer to submodule object",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " Pointer to the submodule url",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_url",
        "cppFunctionName": "Url",
        "jsFunctionName": "url",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      },
      {
        "type": "function",
        "file": "submodule.h",
        "args": [
          {
            "name": "submodule",
            "type": "git_submodule *",
            "comment": "Pointer to submodule object",
            "cType": "git_submodule *",
            "cppClassName": "GitSubmodule",
            "jsClassName": "Submodule",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " Pointer to git_oid or NULL if submodule is not checked out.",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "submodule",
        "cFunctionName": "git_submodule_wd_id",
        "cppFunctionName": "WdId",
        "jsFunctionName": "wdId",
        "isPrototypeMethod": true,
        "cppClassName": "GitSubmodule"
      }
    ],
    "cppClassName": "GitSubmodule",
    "jsClassName": "Submodule",
    "filename": "submodule",
    "isLibgitType": true,
    "dependencies": [
      "../include/submodule.h",
      "../include/repository.h",
      "../include/oid.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_submodule_free",
    "name": "submodule"
  },
  {
    "typeName": "submodule_ignore",
    "type": "enum",
    "cType": "git_submodule_ignore_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_SUBMODULE_IGNORE_RESET",
        "value": -1,
        "JsName": "RESET"
      },
      {
        "name": "GIT_SUBMODULE_IGNORE_NONE",
        "value": 1,
        "JsName": "NONE"
      },
      {
        "name": "GIT_SUBMODULE_IGNORE_UNTRACKED",
        "value": 2,
        "JsName": "UNTRACKED"
      },
      {
        "name": "GIT_SUBMODULE_IGNORE_DIRTY",
        "value": 3,
        "JsName": "DIRTY"
      },
      {
        "name": "GIT_SUBMODULE_IGNORE_ALL",
        "value": 4,
        "JsName": "ALL"
      },
      {
        "name": "GIT_SUBMODULE_IGNORE_DEFAULT",
        "value": 0,
        "JsName": "DEFAULT"
      }
    ],
    "owner": "Submodule",
    "JsName": "IGNORE"
  },
  {
    "typeName": "submodule_recurse",
    "type": "enum",
    "cType": "git_submodule_recurse_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_SUBMODULE_RECURSE_RESET",
        "value": -1,
        "JsName": "RESET"
      },
      {
        "name": "GIT_SUBMODULE_RECURSE_NO",
        "value": 0,
        "JsName": "NO"
      },
      {
        "name": "GIT_SUBMODULE_RECURSE_YES",
        "value": 1,
        "JsName": "YES"
      },
      {
        "name": "GIT_SUBMODULE_RECURSE_ONDEMAND",
        "value": 2,
        "JsName": "ONDEMAND"
      }
    ],
    "owner": "Submodule",
    "JsName": "RECURSE"
  },
  {
    "typeName": "submodule_status",
    "type": "enum",
    "cType": "git_submodule_status_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_SUBMODULE_STATUS_IN_HEAD",
        "value": 1,
        "JsName": "IN_HEAD"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_IN_INDEX",
        "value": 2,
        "JsName": "IN_INDEX"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_IN_CONFIG",
        "value": 4,
        "JsName": "IN_CONFIG"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_IN_WD",
        "value": 8,
        "JsName": "IN_WD"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_INDEX_ADDED",
        "value": 16,
        "JsName": "INDEX_ADDED"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_INDEX_DELETED",
        "value": 32,
        "JsName": "INDEX_DELETED"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_INDEX_MODIFIED",
        "value": 64,
        "JsName": "INDEX_MODIFIED"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_WD_UNINITIALIZED",
        "value": 128,
        "JsName": "WD_UNINITIALIZED"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_WD_ADDED",
        "value": 256,
        "JsName": "WD_ADDED"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_WD_DELETED",
        "value": 512,
        "JsName": "WD_DELETED"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_WD_MODIFIED",
        "value": 1024,
        "JsName": "WD_MODIFIED"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_WD_INDEX_MODIFIED",
        "value": 2048,
        "JsName": "WD_INDEX_MODIFIED"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_WD_WD_MODIFIED",
        "value": 4096,
        "JsName": "WD_WD_MODIFIED"
      },
      {
        "name": "GIT_SUBMODULE_STATUS_WD_UNTRACKED",
        "value": 8192,
        "JsName": "WD_UNTRACKED"
      }
    ],
    "owner": "Submodule",
    "JsName": "STATUS"
  },
  {
    "typeName": "submodule_update",
    "type": "enum",
    "cType": "git_submodule_update_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_SUBMODULE_UPDATE_RESET",
        "value": -1,
        "JsName": "RESET"
      },
      {
        "name": "GIT_SUBMODULE_UPDATE_CHECKOUT",
        "value": 1,
        "JsName": "CHECKOUT"
      },
      {
        "name": "GIT_SUBMODULE_UPDATE_REBASE",
        "value": 2,
        "JsName": "REBASE"
      },
      {
        "name": "GIT_SUBMODULE_UPDATE_MERGE",
        "value": 3,
        "JsName": "MERGE"
      },
      {
        "name": "GIT_SUBMODULE_UPDATE_NONE",
        "value": 4,
        "JsName": "NONE"
      },
      {
        "name": "GIT_SUBMODULE_UPDATE_DEFAULT",
        "value": 0,
        "JsName": "DEFAULT"
      }
    ],
    "owner": "Submodule",
    "JsName": "UPDATE"
  },
  {
    "type": "class",
    "value": "git_tag",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_tag_free",
        "git_tag_id",
        "git_tag_lookup",
        "git_tag_lookup_prefix",
        "git_tag_message",
        "git_tag_name",
        "git_tag_owner",
        "git_tag_peel",
        "git_tag_tagger",
        "git_tag_target",
        "git_tag_target_id",
        "git_tag_target_type"
      ]
    },
    "typeName": "tag",
    "cType": "git_tag",
    "functions": [
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "oid",
            "type": "git_oid *",
            "comment": "Pointer where to store the OID of the\n newly created tag",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where to store the tag",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tag_name",
            "type": "const char *",
            "comment": "Name for the tag",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "type": "const git_object *",
            "comment": "Object to which this tag points. This object\n must belong to the given `repo`.",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tagger",
            "type": "const git_signature *",
            "comment": "Signature of the tagger for this tag, and\n of the tagging time",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message",
            "type": "const char *",
            "comment": "Full message for this tag",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "cFunctionName": "git_tag_annotation_create",
        "cppFunctionName": "AnnotationCreate",
        "jsFunctionName": "annotationCreate",
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "oid",
            "type": "git_oid *",
            "comment": "Pointer where to store the OID of the\n newly created tag. If the tag already exists, this parameter\n will be the oid of the existing tag, and the function will\n return a GIT_EEXISTS error code.",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where to store the tag",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tag_name",
            "type": "const char *",
            "comment": "Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "type": "const git_object *",
            "comment": "Object to which this tag points. This object\n must belong to the given `repo`.",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tagger",
            "type": "const git_signature *",
            "comment": "Signature of the tagger for this tag, and\n of the tagging time",
            "cType": "const git_signature *",
            "cppClassName": "GitSignature",
            "jsClassName": "Signature",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "message",
            "type": "const char *",
            "comment": "Full message for this tag",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing references",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EINVALIDSPEC or an error code\n\tA tag object is written to the ODB, and a proper reference\n\tis written in the /refs/tags folder, pointing to it",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "tag.c": [
            "ex/v0.21.2/tag.html#git_tag_create-20"
          ]
        },
        "cFunctionName": "git_tag_create",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "oid",
            "type": "git_oid *",
            "comment": "Pointer where to store the OID of the newly created tag",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where to store the tag",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "buffer",
            "type": "const char *",
            "comment": "Raw tag data",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing tags",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success; error code otherwise",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "cFunctionName": "git_tag_create_frombuffer",
        "cppFunctionName": "CreateFrombuffer",
        "jsFunctionName": "createFrombuffer",
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "oid",
            "type": "git_oid *",
            "comment": "Pointer where to store the OID of the provided\n target object. If the tag already exists, this parameter\n will be filled with the oid of the existing pointed object\n and the function will return a GIT_EEXISTS error code.",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where to store the lightweight tag",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tag_name",
            "type": "const char *",
            "comment": "Name for the tag; this name is validated\n for consistency. It should also not conflict with an\n already existing tag name",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "target",
            "type": "const git_object *",
            "comment": "Object to which this tag points. This object\n must belong to the given `repo`.",
            "cType": "const git_object *",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "force",
            "type": "int",
            "comment": "Overwrite existing references",
            "cType": "int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EINVALIDSPEC or an error code\n\tA proper reference is written in the /refs/tags folder,\n pointing to the provided target object",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "tag.c": [
            "ex/v0.21.2/tag.html#git_tag_create_lightweight-21"
          ]
        },
        "cFunctionName": "git_tag_create_lightweight",
        "cppFunctionName": "CreateLightweight",
        "jsFunctionName": "createLightweight",
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where lives the tag",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tag_name",
            "type": "const char *",
            "comment": "Name of the tag to be deleted;\n this name is validated for consistency.",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success, GIT_EINVALIDSPEC or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "tag.c": [
            "ex/v0.21.2/tag.html#git_tag_delete-22"
          ]
        },
        "cFunctionName": "git_tag_delete",
        "cppFunctionName": "Delete",
        "jsFunctionName": "delete",
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag",
            "type": "const git_tag *",
            "comment": "a previously loaded tag.",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " object identity for the tag.",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "cFunctionName": "git_tag_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "isPrototypeMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag_names",
            "type": "git_strarray *",
            "comment": "Pointer to a git_strarray structure where\n\t\tthe tag names will be stored",
            "cType": "git_strarray *",
            "cppClassName": "GitStrarray",
            "jsClassName": "Strarray",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where to find the tags",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "cFunctionName": "git_tag_list",
        "cppFunctionName": "List",
        "jsFunctionName": "list",
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag_names",
            "type": "git_strarray *",
            "comment": "Pointer to a git_strarray structure where\n\t\tthe tag names will be stored",
            "cType": "git_strarray *",
            "cppClassName": "GitStrarray",
            "jsClassName": "Strarray",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "pattern",
            "type": "const char *",
            "comment": "Standard fnmatch pattern",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository where to find the tags",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "tag.c": [
            "ex/v0.21.2/tag.html#git_tag_list_match-23"
          ]
        },
        "cFunctionName": "git_tag_list_match",
        "cppFunctionName": "ListMatch",
        "jsFunctionName": "listMatch",
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "out",
            "type": "git_tag **",
            "comment": "pointer to the looked up tag",
            "cType": "git_tag **",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repo to use when locating the tag.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "identity of the tag to locate.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_tag_lookup-69"
          ]
        },
        "cFunctionName": "git_tag_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "out",
            "type": "git_tag **",
            "comment": "pointer to the looked up tag",
            "cType": "git_tag **",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repo to use when locating the tag.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "identity of the tag to locate.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "type": "size_t",
            "comment": "the length of the short identifier",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "cFunctionName": "git_tag_lookup_prefix",
        "cppFunctionName": "LookupPrefix",
        "jsFunctionName": "lookupPrefix",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag",
            "type": "const git_tag *",
            "comment": "a previously loaded tag.",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " message of the tag or NULL when unspecified",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tag_message-37",
            "ex/v0.21.2/cat-file.html#git_tag_message-38"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_tag_message-73"
          ],
          "tag.c": [
            "ex/v0.21.2/tag.html#git_tag_message-19"
          ]
        },
        "cFunctionName": "git_tag_message",
        "cppFunctionName": "Message",
        "jsFunctionName": "message",
        "isPrototypeMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag",
            "type": "const git_tag *",
            "comment": "a previously loaded tag.",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " name of the tag",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tag_name-35"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_tag_name-72"
          ],
          "tag.c": [
            "ex/v0.21.2/tag.html#git_tag_name-18"
          ]
        },
        "cFunctionName": "git_tag_name",
        "cppFunctionName": "Name",
        "jsFunctionName": "name",
        "isPrototypeMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag",
            "type": "const git_tag *",
            "comment": "A previously loaded tag.",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " Repository that contains this tag.",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "cFunctionName": "git_tag_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "isPrototypeMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag_target_out",
            "type": "git_object **",
            "comment": "Pointer to the peeled git_object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "tag",
            "type": "const git_tag *",
            "comment": "The tag to be processed",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "cFunctionName": "git_tag_peel",
        "cppFunctionName": "Peel",
        "jsFunctionName": "peel",
        "isPrototypeMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag",
            "type": "const git_tag *",
            "comment": "a previously loaded tag.",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_signature *",
          "comment": " reference to the tag's author or NULL when unspecified",
          "cType": "const git_signature *",
          "cppClassName": "GitSignature",
          "jsClassName": "Signature",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_signature_new": {
              "isAsync": false
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tag_tagger-36"
          ]
        },
        "cFunctionName": "git_tag_tagger",
        "cppFunctionName": "Tagger",
        "jsFunctionName": "tagger",
        "isPrototypeMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "target_out",
            "type": "git_object **",
            "comment": "pointer where to store the target",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "tag",
            "type": "const git_tag *",
            "comment": "a previously loaded tag.",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_tag_target-70"
          ]
        },
        "cFunctionName": "git_tag_target",
        "cppFunctionName": "Target",
        "jsFunctionName": "target",
        "isPrototypeMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag",
            "type": "const git_tag *",
            "comment": "a previously loaded tag.",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " pointer to the OID",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tag_target_id-33"
          ]
        },
        "cFunctionName": "git_tag_target_id",
        "cppFunctionName": "TargetId",
        "jsFunctionName": "targetId",
        "isPrototypeMethod": true,
        "cppClassName": "GitTag"
      },
      {
        "type": "function",
        "file": "tag.h",
        "args": [
          {
            "name": "tag",
            "type": "const git_tag *",
            "comment": "a previously loaded tag.",
            "cType": "const git_tag *",
            "cppClassName": "GitTag",
            "jsClassName": "Tag",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_otype",
          "comment": " type of the tagged object",
          "cType": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "tag",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tag_target_type-34"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_tag_target_type-71"
          ]
        },
        "cFunctionName": "git_tag_target_type",
        "cppFunctionName": "TargetType",
        "jsFunctionName": "targetType",
        "isPrototypeMethod": true,
        "cppClassName": "GitTag"
      }
    ],
    "cppClassName": "GitTag",
    "jsClassName": "Tag",
    "filename": "tag",
    "isLibgitType": true,
    "dependencies": [
      "../include/oid.h",
      "../include/repository.h",
      "../include/object.h",
      "../include/signature.h",
      "../include/tag.h",
      "../include/strarray.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_tag_free",
    "name": "tag"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "threads.h",
        "args": [],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "threads",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_threads_init-26"
          ],
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_threads_init-39"
          ],
          "diff.c": [
            "ex/v0.21.2/diff.html#git_threads_init-15"
          ],
          "init.c": [
            "ex/v0.21.2/init.html#git_threads_init-12"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_threads_init-56"
          ],
          "network/git2.c": [
            "ex/v0.21.2/network/git2.html#git_threads_init-5"
          ],
          "rev-parse.c": [
            "ex/v0.21.2/rev-parse.html#git_threads_init-18"
          ],
          "status.c": [
            "ex/v0.21.2/status.html#git_threads_init-27"
          ],
          "tag.c": [
            "ex/v0.21.2/tag.html#git_threads_init-24"
          ]
        },
        "cFunctionName": "git_threads_init",
        "cppFunctionName": "Init",
        "jsFunctionName": "init",
        "cppClassName": "GitThreads"
      },
      {
        "type": "function",
        "file": "threads.h",
        "args": [],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "threads",
        "examples": {
          "blame.c": [
            "ex/v0.21.2/blame.html#git_threads_shutdown-27"
          ],
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_threads_shutdown-40"
          ],
          "diff.c": [
            "ex/v0.21.2/diff.html#git_threads_shutdown-16"
          ],
          "init.c": [
            "ex/v0.21.2/init.html#git_threads_shutdown-13"
          ],
          "log.c": [
            "ex/v0.21.2/log.html#git_threads_shutdown-57"
          ],
          "rev-parse.c": [
            "ex/v0.21.2/rev-parse.html#git_threads_shutdown-19"
          ],
          "status.c": [
            "ex/v0.21.2/status.html#git_threads_shutdown-28"
          ],
          "tag.c": [
            "ex/v0.21.2/tag.html#git_threads_shutdown-25"
          ]
        },
        "cFunctionName": "git_threads_shutdown",
        "cppFunctionName": "Shutdown",
        "jsFunctionName": "shutdown",
        "cppClassName": "GitThreads"
      }
    ],
    "type": "class",
    "cType": null,
    "typeName": "threads",
    "cppClassName": "GitThreads",
    "jsClassName": "Threads",
    "filename": "threads",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "threads"
  },
  {
    "type": "class",
    "value": "git_time",
    "file": "types.h",
    "fields": [
      {
        "type": "git_time_t",
        "name": "time",
        "cType": "git_time_t",
        "cppFunctionName": "Time",
        "jsFunctionName": "time",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": true
      },
      {
        "type": "int",
        "name": "offset",
        "cType": "int",
        "cppFunctionName": "Offset",
        "jsFunctionName": "offset",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [],
      "needs": []
    },
    "typeName": "time",
    "cType": "git_time",
    "functions": [],
    "cppClassName": "GitTime",
    "jsClassName": "Time",
    "filename": "time",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "time"
  },
  {
    "functions": [],
    "type": "class",
    "cType": null,
    "typeName": "trace",
    "cppClassName": "GitTrace",
    "jsClassName": "Trace",
    "filename": "trace",
    "isLibgitType": true,
    "dependencies": [],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "trace"
  },
  {
    "typeName": "trace_level",
    "type": "enum",
    "cType": "git_trace_level_t",
    "isMask": true,
    "values": [
      {
        "name": "GIT_TRACE_NONE",
        "value": 0,
        "JsName": "NONE"
      },
      {
        "name": "GIT_TRACE_FATAL",
        "value": 1,
        "JsName": "FATAL"
      },
      {
        "name": "GIT_TRACE_ERROR",
        "value": 2,
        "JsName": "ERROR"
      },
      {
        "name": "GIT_TRACE_WARN",
        "value": 3,
        "JsName": "WARN"
      },
      {
        "name": "GIT_TRACE_INFO",
        "value": 4,
        "JsName": "INFO"
      },
      {
        "name": "GIT_TRACE_DEBUG",
        "value": 5,
        "JsName": "DEBUG"
      },
      {
        "name": "GIT_TRACE_TRACE",
        "value": 6,
        "JsName": "TRACE"
      }
    ],
    "owner": "Trace",
    "JsName": "LEVEL"
  },
  {
    "type": "class",
    "value": "git_transfer_progress",
    "file": "types.h",
    "fields": [
      {
        "type": "unsigned int",
        "name": "total_objects",
        "cType": "unsigned int",
        "cppFunctionName": "TotalObjects",
        "jsFunctionName": "totalObjects",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "indexed_objects",
        "cType": "unsigned int",
        "cppFunctionName": "IndexedObjects",
        "jsFunctionName": "indexedObjects",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "received_objects",
        "cType": "unsigned int",
        "cppFunctionName": "ReceivedObjects",
        "jsFunctionName": "receivedObjects",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "local_objects",
        "cType": "unsigned int",
        "cppFunctionName": "LocalObjects",
        "jsFunctionName": "localObjects",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "total_deltas",
        "cType": "unsigned int",
        "cppFunctionName": "TotalDeltas",
        "jsFunctionName": "totalDeltas",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "unsigned int",
        "name": "indexed_deltas",
        "cType": "unsigned int",
        "cppFunctionName": "IndexedDeltas",
        "jsFunctionName": "indexedDeltas",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "type": "size_t",
        "name": "received_bytes",
        "cType": "size_t",
        "cppFunctionName": "ReceivedBytes",
        "jsFunctionName": "receivedBytes",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      }
    ],
    "used": {
      "returns": [
        "git_remote_stats"
      ],
      "needs": [
        "git_indexer_append",
        "git_indexer_commit"
      ]
    },
    "typeName": "transfer_progress",
    "cType": "git_transfer_progress",
    "functions": [],
    "cppClassName": "GitTransferProgress",
    "jsClassName": "TransferProgress",
    "filename": "transfer_progress",
    "isLibgitType": true,
    "dependencies": [],
    "needsForwardDeclaration": false,
    "hasConstructor": false,
    "name": "transfer_progress"
  },
  {
    "functions": [
      {
        "type": "function",
        "file": "transport.h",
        "args": [
          {
            "name": "opts",
            "type": "git_transport *",
            "comment": "the `git_transport` struct to initialize",
            "cType": "git_transport *",
            "cppClassName": "GitTransport",
            "jsClassName": "Transport",
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "version",
            "type": "unsigned int",
            "comment": "Version of struct; pass `GIT_TRANSPORT_VERSION`",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " Zero on success; -1 on failure.",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "transport",
        "cFunctionName": "git_transport_init",
        "cppFunctionName": "Init",
        "jsFunctionName": "init",
        "isPrototypeMethod": true,
        "cppClassName": "GitTransport"
      },
      {
        "type": "function",
        "file": "transport.h",
        "args": [
          {
            "name": "prefix",
            "type": "const char *",
            "comment": "From the previous call to git_transport_register",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "priority",
            "type": "unsigned int",
            "comment": "From the previous call to git_transport_register",
            "cType": "unsigned int",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "transport",
        "cFunctionName": "git_transport_unregister",
        "cppFunctionName": "Unregister",
        "jsFunctionName": "unregister",
        "cppClassName": "GitTransport"
      }
    ],
    "type": "class",
    "cType": "git_transport",
    "typeName": "transport",
    "cppClassName": "GitTransport",
    "jsClassName": "Transport",
    "filename": "transport",
    "isLibgitType": true,
    "dependencies": [
      "../include/transport.h"
    ],
    "fields": [],
    "needsForwardDeclaration": false,
    "name": "transport"
  },
  {
    "type": "class",
    "value": "git_tree",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_commit_amend",
        "git_commit_create",
        "git_commit_create_v",
        "git_commit_tree",
        "git_diff_tree_to_index",
        "git_diff_tree_to_tree",
        "git_diff_tree_to_workdir",
        "git_diff_tree_to_workdir_with_index",
        "git_index_read_tree",
        "git_merge_trees",
        "git_pathspec_match_tree",
        "git_tree_entry_byid",
        "git_tree_entry_byindex",
        "git_tree_entry_byname",
        "git_tree_entry_bypath",
        "git_tree_entrycount",
        "git_tree_free",
        "git_tree_id",
        "git_tree_lookup",
        "git_tree_lookup_prefix",
        "git_tree_owner",
        "git_tree_walk",
        "git_treebuilder_create"
      ]
    },
    "typeName": "tree",
    "cType": "git_tree",
    "functions": [
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": "a previously loaded tree.",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "the sha being looked for",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_tree_entry *",
          "comment": " the tree entry; NULL if not found",
          "cType": "const git_tree_entry *",
          "cppClassName": "GitTreeEntry",
          "jsClassName": "TreeEntry",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "cFunctionName": "git_tree_entry_byid",
        "cppFunctionName": "EntryByid",
        "jsFunctionName": "entryByid",
        "isPrototypeMethod": true,
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": "a previously loaded tree.",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "idx",
            "type": "size_t",
            "comment": "the position in the entry list",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_tree_entry *",
          "comment": " the tree entry; NULL if not found",
          "cType": "const git_tree_entry *",
          "cppClassName": "GitTreeEntry",
          "jsClassName": "TreeEntry",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tree_entry_byindex-42"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_tree_entry_byindex-78"
          ]
        },
        "cFunctionName": "git_tree_entry_byindex",
        "cppFunctionName": "EntryByindex",
        "jsFunctionName": "entryByindex",
        "isPrototypeMethod": true,
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": "a previously loaded tree.",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "filename",
            "type": "const char *",
            "comment": "the filename of the desired entry",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_tree_entry *",
          "comment": " the tree entry; NULL if not found",
          "cType": "const git_tree_entry *",
          "cppClassName": "GitTreeEntry",
          "jsClassName": "TreeEntry",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_tree_entry_byname-77"
          ]
        },
        "cFunctionName": "git_tree_entry_byname",
        "cppFunctionName": "EntryByname",
        "jsFunctionName": "entryByname",
        "isPrototypeMethod": true,
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "out",
            "type": "git_tree_entry **",
            "comment": "Pointer where to store the tree entry",
            "cType": "git_tree_entry **",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "root",
            "type": "const git_tree *",
            "comment": "Previously loaded tree which is the root of the relative path",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "path",
            "type": "const char *",
            "comment": "Path to the contained entry",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success; GIT_ENOTFOUND if the path does not exist",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "cFunctionName": "git_tree_entry_bypath",
        "cppFunctionName": "EntryBypath",
        "jsFunctionName": "entryBypath",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "e1",
            "type": "const git_tree_entry *",
            "comment": "first tree entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "e2",
            "type": "const git_tree_entry *",
            "comment": "second tree entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " \n<\n0 if e1 is before e2, 0 if e1 == e2, >0 if e1 is after e2",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "cFunctionName": "git_tree_entry_cmp",
        "cppFunctionName": "EntryCmp",
        "jsFunctionName": "entryCmp",
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "dest",
            "type": "git_tree_entry **",
            "comment": "pointer where to store the copy",
            "cType": "git_tree_entry **",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "source",
            "type": "const git_tree_entry *",
            "comment": "tree entry to duplicate",
            "cType": "const git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "cFunctionName": "git_tree_entry_dup",
        "cppFunctionName": "EntryDup",
        "jsFunctionName": "entryDup",
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_tree_entry *",
            "comment": "a tree entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "git_filemode_t",
          "comment": " filemode as an integer",
          "cType": "git_filemode_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tree_entry_filemode-46"
          ]
        },
        "cFunctionName": "git_tree_entry_filemode",
        "cppFunctionName": "EntryFilemode",
        "jsFunctionName": "entryFilemode",
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_tree_entry *",
            "comment": "a tree entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "git_filemode_t",
          "comment": " filemode as an integer",
          "cType": "git_filemode_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": true,
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "cFunctionName": "git_tree_entry_filemode_raw",
        "cppFunctionName": "EntryFilemodeRaw",
        "jsFunctionName": "entryFilemodeRaw",
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "entry",
            "type": "git_tree_entry *",
            "comment": "The entry to free",
            "cType": "git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "cFunctionName": "git_tree_entry_free",
        "cppFunctionName": "EntryFree",
        "jsFunctionName": "entryFree",
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_tree_entry *",
            "comment": "a tree entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " the oid of the object",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tree_entry_id-44"
          ]
        },
        "cFunctionName": "git_tree_entry_id",
        "cppFunctionName": "EntryId",
        "jsFunctionName": "entryId",
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_tree_entry *",
            "comment": "a tree entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const char *",
          "comment": " the name of the file",
          "cType": "const char *",
          "cppClassName": "String",
          "jsClassName": "String",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tree_entry_name-43"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_tree_entry_name-79",
            "ex/v0.21.2/general.html#git_tree_entry_name-80"
          ]
        },
        "cFunctionName": "git_tree_entry_name",
        "cppFunctionName": "EntryName",
        "jsFunctionName": "entryName",
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "object_out",
            "type": "git_object **",
            "comment": "pointer to the converted object",
            "cType": "git_object **",
            "cppClassName": "GitObject",
            "jsClassName": "Object",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "repository where to lookup the pointed object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "entry",
            "type": "const git_tree_entry *",
            "comment": "a tree entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_tree_entry_to_object-81"
          ]
        },
        "cFunctionName": "git_tree_entry_to_object",
        "cppFunctionName": "EntryToObject",
        "jsFunctionName": "entryToObject",
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "entry",
            "type": "const git_tree_entry *",
            "comment": "a tree entry",
            "cType": "const git_tree_entry *",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "git_otype",
          "comment": " the type of the pointed object",
          "cType": "git_otype",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isLibgitType": true,
          "isEnum": true,
          "isMask": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tree_entry_type-45"
          ]
        },
        "cFunctionName": "git_tree_entry_type",
        "cppFunctionName": "EntryType",
        "jsFunctionName": "entryType",
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": "a previously loaded tree.",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "size_t",
          "comment": " the number of entries in the tree",
          "cType": "size_t",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "examples": {
          "cat-file.c": [
            "ex/v0.21.2/cat-file.html#git_tree_entrycount-41"
          ],
          "general.c": [
            "ex/v0.21.2/general.html#git_tree_entrycount-76"
          ]
        },
        "cFunctionName": "git_tree_entrycount",
        "cppFunctionName": "Entrycount",
        "jsFunctionName": "entrycount",
        "isPrototypeMethod": true,
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": "a previously loaded tree.",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "const git_oid *",
          "comment": " object identity for the tree.",
          "cType": "const git_oid *",
          "cppClassName": "GitOid",
          "jsClassName": "Oid",
          "isLibgitType": true,
          "isEnum": false,
          "shouldAlloc": true,
          "functions": {
            "git_oid_cpy": {
              "ignore": true
            },
            "git_oid_fmt": {
              "ignore": true
            },
            "git_oid_fromraw": {
              "ignore": true
            },
            "git_oid_fromstr": {
              "jsFunctionName": "fromString",
              "isAsync": false
            },
            "git_oid_fromstrn": {
              "ignore": true
            },
            "git_oid_fromstrp": {
              "ignore": true
            },
            "git_oid_nfmt": {
              "ignore": true
            },
            "git_oid_pathfmt": {
              "ignore": true
            },
            "git_oid_shorten_add": {
              "ignore": true
            },
            "git_oid_shorten_free": {
              "ignore": true
            },
            "git_oid_shorten_new": {
              "ignore": true
            },
            "git_oid_tostr": {
              "ignore": true,
              "jsFunctionName": "toString"
            }
          },
          "fields": {
            "id": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "cFunctionName": "git_tree_id",
        "cppFunctionName": "Id",
        "jsFunctionName": "id",
        "isPrototypeMethod": true,
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "out",
            "type": "git_tree **",
            "comment": "Pointer to the looked up tree",
            "cType": "git_tree **",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "The repo to use when locating the tree.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "Identity of the tree to locate.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "examples": {
          "general.c": [
            "ex/v0.21.2/general.html#git_tree_lookup-74",
            "ex/v0.21.2/general.html#git_tree_lookup-75"
          ],
          "init.c": [
            "ex/v0.21.2/init.html#git_tree_lookup-14"
          ]
        },
        "cFunctionName": "git_tree_lookup",
        "cppFunctionName": "Lookup",
        "jsFunctionName": "lookup",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "out",
            "type": "git_tree **",
            "comment": "pointer to the looked up tree",
            "cType": "git_tree **",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "the repo to use when locating the tree.",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "identity of the tree to locate.",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "len",
            "type": "size_t",
            "comment": "the length of the short identifier",
            "cType": "size_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "cFunctionName": "git_tree_lookup_prefix",
        "cppFunctionName": "LookupPrefix",
        "jsFunctionName": "lookupPrefix",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitTree"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "tree",
            "type": "const git_tree *",
            "comment": "A previously loaded tree.",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "git_repository *",
          "comment": " Repository that contains this tree.",
          "cType": "git_repository *",
          "cppClassName": "GitRepository",
          "jsClassName": "Repository",
          "isLibgitType": true,
          "isEnum": false,
          "functions": {
            "git_repository_discover": {
              "ignore": true
            },
            "git_repository_fetchhead_foreach": {
              "ignore": true
            },
            "git_repository_free": {
              "ignore": true
            },
            "git_repository_hashfile": {
              "ignore": true
            },
            "git_repository_mergehead_foreach": {
              "ignore": true
            },
            "git_repository_message": {
              "ignore": true
            }
          },
          "isReturn": false,
          "isSelf": false
        },
        "group": "tree",
        "cFunctionName": "git_tree_owner",
        "cppFunctionName": "Owner",
        "jsFunctionName": "owner",
        "isPrototypeMethod": true,
        "cppClassName": "GitTree"
      }
    ],
    "cppClassName": "GitTree",
    "jsClassName": "Tree",
    "filename": "tree",
    "isLibgitType": true,
    "dependencies": [
      "../include/tree.h",
      "../include/oid.h",
      "../include/tree_entry.h",
      "../include/object.h",
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_tree_free",
    "name": "tree"
  },
  {
    "type": "class",
    "value": "git_tree_entry",
    "file": "types.h",
    "used": {
      "returns": [
        "git_tree_entry_byid",
        "git_tree_entry_byindex",
        "git_tree_entry_byname",
        "git_treebuilder_get"
      ],
      "needs": [
        "git_tree_entry_bypath",
        "git_tree_entry_cmp",
        "git_tree_entry_dup",
        "git_tree_entry_filemode",
        "git_tree_entry_filemode_raw",
        "git_tree_entry_free",
        "git_tree_entry_id",
        "git_tree_entry_name",
        "git_tree_entry_to_object",
        "git_tree_entry_type",
        "git_treebuilder_insert"
      ]
    },
    "fields": [
      {
        "name": "removed",
        "type": "uint16_t",
        "cType": "uint16_t",
        "cppFunctionName": "Removed",
        "jsFunctionName": "removed",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "attr",
        "type": "uint16_t",
        "cType": "uint16_t",
        "cppFunctionName": "Attr",
        "jsFunctionName": "attr",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "oid",
        "type": "git_oid",
        "cType": "git_oid",
        "cppFunctionName": "Oid",
        "jsFunctionName": "oid",
        "cppClassName": "GitOid",
        "jsClassName": "Oid",
        "isCallbackFunction": false,
        "isLibgitType": true,
        "isEnum": false,
        "shouldAlloc": true,
        "functions": {
          "git_oid_cpy": {
            "ignore": true
          },
          "git_oid_fmt": {
            "ignore": true
          },
          "git_oid_fromraw": {
            "ignore": true
          },
          "git_oid_fromstr": {
            "jsFunctionName": "fromString",
            "isAsync": false
          },
          "git_oid_fromstrn": {
            "ignore": true
          },
          "git_oid_fromstrp": {
            "ignore": true
          },
          "git_oid_nfmt": {
            "ignore": true
          },
          "git_oid_pathfmt": {
            "ignore": true
          },
          "git_oid_shorten_add": {
            "ignore": true
          },
          "git_oid_shorten_free": {
            "ignore": true
          },
          "git_oid_shorten_new": {
            "ignore": true
          },
          "git_oid_tostr": {
            "ignore": true,
            "jsFunctionName": "toString"
          }
        },
        "fields": {
          "id": {
            "ignore": true
          }
        }
      },
      {
        "name": "filename_len",
        "type": "size_t",
        "cType": "size_t",
        "cppFunctionName": "FilenameLen",
        "jsFunctionName": "filenameLen",
        "cppClassName": "Number",
        "jsClassName": "Number",
        "isCallbackFunction": false
      },
      {
        "name": "filename",
        "structType": "char",
        "structName": "filename[1]",
        "type": "char *",
        "cType": "char *",
        "cppFunctionName": "Filename",
        "jsFunctionName": "filename",
        "cppClassName": "String",
        "jsClassName": "String",
        "isCallbackFunction": false
      }
    ],
    "typeName": "tree_entry",
    "cType": "git_tree_entry",
    "functions": [],
    "cppClassName": "GitTreeEntry",
    "jsClassName": "TreeEntry",
    "filename": "tree_entry",
    "isLibgitType": true,
    "dependencies": [
      "../include/oid.h"
    ],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "name": "tree_entry"
  },
  {
    "type": "class",
    "value": "git_treebuilder",
    "file": "types.h",
    "used": {
      "returns": [],
      "needs": [
        "git_treebuilder_clear",
        "git_treebuilder_create",
        "git_treebuilder_entrycount",
        "git_treebuilder_filter",
        "git_treebuilder_free",
        "git_treebuilder_get",
        "git_treebuilder_insert",
        "git_treebuilder_remove",
        "git_treebuilder_write"
      ]
    },
    "typeName": "treebuilder",
    "cType": "git_treebuilder",
    "functions": [
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "bld",
            "type": "git_treebuilder *",
            "comment": "Builder to clear",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreebuilder",
            "jsClassName": "Treebuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "void",
          "comment": null,
          "cType": "void",
          "cppClassName": "Void",
          "jsClassName": "Void",
          "isReturn": false,
          "isSelf": false
        },
        "group": "treebuilder",
        "cFunctionName": "git_treebuilder_clear",
        "cppFunctionName": "Clear",
        "jsFunctionName": "clear",
        "isPrototypeMethod": true,
        "cppClassName": "GitTreebuilder"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "out",
            "type": "git_treebuilder **",
            "comment": "Pointer where to store the tree builder",
            "cType": "git_treebuilder **",
            "cppClassName": "GitTreebuilder",
            "jsClassName": "Treebuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "source",
            "type": "const git_tree *",
            "comment": "Source tree to initialize the builder (optional)",
            "cType": "const git_tree *",
            "cppClassName": "GitTree",
            "jsClassName": "Tree",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 on success; error code otherwise",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "treebuilder",
        "cFunctionName": "git_treebuilder_create",
        "cppFunctionName": "Create",
        "jsFunctionName": "create",
        "isAsync": true,
        "isConstructorMethod": true,
        "cppClassName": "GitTreebuilder"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "bld",
            "type": "git_treebuilder *",
            "comment": "a previously loaded treebuilder.",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreebuilder",
            "jsClassName": "Treebuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "unsigned int",
          "comment": " the number of entries in the treebuilder",
          "cType": "unsigned int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "treebuilder",
        "cFunctionName": "git_treebuilder_entrycount",
        "cppFunctionName": "Entrycount",
        "jsFunctionName": "entrycount",
        "isPrototypeMethod": true,
        "cppClassName": "GitTreebuilder"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "bld",
            "type": "git_treebuilder *",
            "comment": "Tree builder",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreebuilder",
            "jsClassName": "Treebuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "filename",
            "type": "const char *",
            "comment": "Name of the entry",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "const git_tree_entry *",
          "comment": " pointer to the entry; NULL if not found",
          "cType": "const git_tree_entry *",
          "cppClassName": "GitTreeEntry",
          "jsClassName": "TreeEntry",
          "isLibgitType": true,
          "isEnum": false,
          "isReturn": false,
          "isSelf": false
        },
        "group": "treebuilder",
        "cFunctionName": "git_treebuilder_get",
        "cppFunctionName": "Get",
        "jsFunctionName": "get",
        "isPrototypeMethod": true,
        "cppClassName": "GitTreebuilder"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "out",
            "type": "const git_tree_entry **",
            "comment": "Pointer to store the entry (optional)",
            "cType": "const git_tree_entry **",
            "cppClassName": "GitTreeEntry",
            "jsClassName": "TreeEntry",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": true,
            "isSelf": false
          },
          {
            "name": "bld",
            "type": "git_treebuilder *",
            "comment": "Tree builder",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreebuilder",
            "jsClassName": "Treebuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "filename",
            "type": "const char *",
            "comment": "Filename of the entry",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "id",
            "type": "const git_oid *",
            "comment": "SHA1 oid of the entry",
            "cType": "const git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "filemode",
            "type": "git_filemode_t",
            "comment": "Folder attributes of the entry. This parameter must\n\t\t\tbe valued with one of the following entries: 0040000, 0100644,\n\t\t\t0100755, 0120000 or 0160000.",
            "cType": "git_filemode_t",
            "cppClassName": "Number",
            "jsClassName": "Number",
            "isLibgitType": true,
            "isEnum": true,
            "isMask": true,
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "isErrorCode": true,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "treebuilder",
        "cFunctionName": "git_treebuilder_insert",
        "cppFunctionName": "Insert",
        "jsFunctionName": "insert",
        "isAsync": true,
        "isPrototypeMethod": true,
        "cppClassName": "GitTreebuilder"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "bld",
            "type": "git_treebuilder *",
            "comment": "Tree builder",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreebuilder",
            "jsClassName": "Treebuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          },
          {
            "name": "filename",
            "type": "const char *",
            "comment": "Filename of the entry to remove",
            "cType": "const char *",
            "cppClassName": "String",
            "jsClassName": "String",
            "isReturn": false,
            "isSelf": false
          }
        ],
        "return": {
          "type": "int",
          "comment": null,
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "treebuilder",
        "cFunctionName": "git_treebuilder_remove",
        "cppFunctionName": "Remove",
        "jsFunctionName": "remove",
        "isPrototypeMethod": true,
        "cppClassName": "GitTreebuilder"
      },
      {
        "type": "function",
        "file": "tree.h",
        "args": [
          {
            "name": "id",
            "type": "git_oid *",
            "comment": "Pointer to store the OID of the newly written tree",
            "cType": "git_oid *",
            "cppClassName": "GitOid",
            "jsClassName": "Oid",
            "isLibgitType": true,
            "isEnum": false,
            "shouldAlloc": true,
            "fields": {
              "id": {
                "ignore": true
              }
            },
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "repo",
            "type": "git_repository *",
            "comment": "Repository in which to store the object",
            "cType": "git_repository *",
            "cppClassName": "GitRepository",
            "jsClassName": "Repository",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": false
          },
          {
            "name": "bld",
            "type": "git_treebuilder *",
            "comment": "Tree builder to write",
            "cType": "git_treebuilder *",
            "cppClassName": "GitTreebuilder",
            "jsClassName": "Treebuilder",
            "isLibgitType": true,
            "isEnum": false,
            "isReturn": false,
            "isSelf": true
          }
        ],
        "return": {
          "type": "int",
          "comment": " 0 or an error code",
          "cType": "int",
          "cppClassName": "Number",
          "jsClassName": "Number",
          "isReturn": false,
          "isSelf": false
        },
        "group": "treebuilder",
        "cFunctionName": "git_treebuilder_write",
        "cppFunctionName": "Write",
        "jsFunctionName": "write",
        "isPrototypeMethod": true,
        "cppClassName": "GitTreebuilder"
      }
    ],
    "cppClassName": "GitTreebuilder",
    "jsClassName": "Treebuilder",
    "filename": "treebuilder",
    "isLibgitType": true,
    "dependencies": [
      "../include/treebuilder.h",
      "../include/tree.h",
      "../include/tree_entry.h",
      "../include/oid.h",
      "../include/repository.h"
    ],
    "fields": [],
    "needsForwardDeclaration": true,
    "hasConstructor": false,
    "freeFunctionName": "git_treebuilder_free",
    "name": "treebuilder"
  },
  {
    "typeName": "treewalk_mode",
    "type": "enum",
    "cType": "git_treewalk_mode",
    "isMask": false,
    "values": [
      {
        "name": "GIT_TREEWALK_PRE",
        "value": 0,
        "JsName": "WALK_PRE"
      },
      {
        "name": "GIT_TREEWALK_POST",
        "value": 1,
        "JsName": "WALK_POST"
      }
    ],
    "owner": "Tree",
    "JsName": "WALK_MODE"
  }
]